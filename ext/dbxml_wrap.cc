/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.31
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGRUBY

#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; }
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC)
#   if (__SUNPRO_CC <= 0x560)
#     define SWIGTEMPLATEDISAMBIGUATOR template
#   else
#     define SWIGTEMPLATEDISAMBIGUATOR
#   endif
# else
#   define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC)
#   if (__SUNPRO_CC <= 0x560)
#     define SWIGTEMPLATEDISAMBIGUATOR template
#   else
#     define SWIGTEMPLATEDISAMBIGUATOR
#   endif
# else
#   define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic CAPI SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "3"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the swig runtime code.
  In 99.9% of the cases, swig just needs to declare them as 'static'.

  But only do this if is strictly necessary, ie, if you have problems
  with your compiler or so.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The swig conversion methods, as ConvertPtr, return and integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old swig versions, you usually write code as:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit as:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   that seems to be the same, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   requires also to SWIG_ConvertPtr to return new result values, as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   swig errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()


 */
#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))


/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif




#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store inforomation on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (l1 - f1) - (l2 - f2);
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/* think of this as a c++ template<> or a scheme macro */
#define SWIG_TypeCheck_Template(comparison, ty)         \
  if (ty) {                                             \
    swig_cast_info *iter = ty->cast;                    \
    while (iter) {                                      \
      if (comparison) {                                 \
        if (iter == ty->cast) return iter;              \
        /* Move iter to the top of the linked list */   \
        iter->prev->next = iter->next;                  \
        if (iter->next)                                 \
          iter->next->prev = iter->prev;                \
        iter->next = ty->cast;                          \
        iter->prev = 0;                                 \
        if (ty->cast) ty->cast->prev = iter;            \
        ty->cast = iter;                                \
        return iter;                                    \
      }                                                 \
      iter = iter->next;                                \
    }                                                   \
  }                                                     \
  return 0

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  SWIG_TypeCheck_Template(strcmp(iter->type->name, c) == 0, ty);
}

/* Same as previous function, except strcmp is replaced with a pointer comparison */
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *into) {
  SWIG_TypeCheck_Template(iter->type == from, into);
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



#include <ruby.h>

/* Ruby 1.7 defines NUM2LL(), LL2NUM() and ULL2NUM() macros */
#ifndef NUM2LL
#define NUM2LL(x) NUM2LONG((x))
#endif
#ifndef LL2NUM
#define LL2NUM(x) INT2NUM((long) (x))
#endif
#ifndef ULL2NUM
#define ULL2NUM(x) UINT2NUM((unsigned long) (x))
#endif

/* Ruby 1.7 doesn't (yet) define NUM2ULL() */
#ifndef NUM2ULL
#ifdef HAVE_LONG_LONG
#define NUM2ULL(x) rb_num2ull((x))
#else
#define NUM2ULL(x) NUM2ULONG(x)
#endif
#endif

/* RSTRING_LEN, etc are new in Ruby 1.9, but ->ptr and ->len no longer work */
/* Define these for older versions so we can just write code the new way */
#ifndef RSTRING_LEN
# define RSTRING_LEN(x) RSTRING(x)->len
#endif
#ifndef RSTRING_PTR
# define RSTRING_PTR(x) RSTRING(x)->ptr
#endif
#ifndef RARRAY_LEN
# define RARRAY_LEN(x) RARRAY(x)->len
#endif
#ifndef RARRAY_PTR
# define RARRAY_PTR(x) RARRAY(x)->ptr
#endif

/*
 * Need to be very careful about how these macros are defined, especially
 * when compiling C++ code or C code with an ANSI C compiler.
 *
 * VALUEFUNC(f) is a macro used to typecast a C function that implements
 * a Ruby method so that it can be passed as an argument to API functions
 * like rb_define_method() and rb_define_singleton_method().
 *
 * VOIDFUNC(f) is a macro used to typecast a C function that implements
 * either the "mark" or "free" stuff for a Ruby Data object, so that it
 * can be passed as an argument to API functions like Data_Wrap_Struct()
 * and Data_Make_Struct().
 */

#ifdef __cplusplus
#  ifndef RUBY_METHOD_FUNC /* These definitions should work for Ruby 1.4.6 */
#    define PROTECTFUNC(f) ((VALUE (*)()) f)
#    define VALUEFUNC(f) ((VALUE (*)()) f)
#    define VOIDFUNC(f)  ((void (*)()) f)
#  else
#    ifndef ANYARGS /* These definitions should work for Ruby 1.6 */
#      define PROTECTFUNC(f) ((VALUE (*)()) f)
#      define VALUEFUNC(f) ((VALUE (*)()) f)
#      define VOIDFUNC(f)  ((RUBY_DATA_FUNC) f)
#    else /* These definitions should work for Ruby 1.7+ */
#      define PROTECTFUNC(f) ((VALUE (*)(VALUE)) f)
#      define VALUEFUNC(f) ((VALUE (*)(ANYARGS)) f)
#      define VOIDFUNC(f)  ((RUBY_DATA_FUNC) f)
#    endif
#  endif
#else
#  define VALUEFUNC(f) (f)
#  define VOIDFUNC(f) (f)
#endif

/* Don't use for expressions have side effect */
#ifndef RB_STRING_VALUE
#define RB_STRING_VALUE(s) (TYPE(s) == T_STRING ? (s) : (*(volatile VALUE *)&(s) = rb_str_to_str(s)))
#endif
#ifndef StringValue
#define StringValue(s) RB_STRING_VALUE(s)
#endif
#ifndef StringValuePtr
#define StringValuePtr(s) RSTRING_PTR(RB_STRING_VALUE(s))
#endif
#ifndef StringValueLen
#define StringValueLen(s) RSTRING_LEN(RB_STRING_VALUE(s))
#endif
#ifndef SafeStringValue
#define SafeStringValue(v) do {\
    StringValue(v);\
    rb_check_safe_str(v);\
} while (0)
#endif

#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
#define rb_define_alloc_func(klass, func) rb_define_singleton_method((klass), "new", VALUEFUNC((func)), -1)
#define rb_undef_alloc_func(klass) rb_undef_method(CLASS_OF((klass)), "new")
#endif


/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */


/* Define some additional error types */
#define SWIG_ObjectPreviouslyDeletedError  -100


/* Define custom exceptions for errors that do not map to existing Ruby
   exceptions.  Note this only works for C++ since a global cannot be
   initialized by a funtion in C.  For C, fallback to rb_eRuntimeError.*/

SWIGINTERN VALUE
getNullReferenceError(void) {
  static int init = 0;
  static VALUE rb_eNullReferenceError ;
  if (!init) {
    init = 1;
    rb_eNullReferenceError = rb_define_class("NullReferenceError", rb_eRuntimeError);
  }
  return rb_eNullReferenceError;
}

SWIGINTERN VALUE
getObjectPreviouslyDeletedError(void) {
  static int init = 0;
  static VALUE rb_eObjectPreviouslyDeleted ;
  if (!init) {
    init = 1;
    rb_eObjectPreviouslyDeleted = rb_define_class("ObjectPreviouslyDeleted", rb_eRuntimeError);
  }
  return rb_eObjectPreviouslyDeleted;
}


SWIGINTERN VALUE
SWIG_Ruby_ErrorType(int SWIG_code) {
  VALUE type;
  switch (SWIG_code) {
  case SWIG_MemoryError:
    type = rb_eNoMemError;
    break;
  case SWIG_IOError:
    type = rb_eIOError;
    break;
  case SWIG_RuntimeError:
    type = rb_eRuntimeError;
    break;
  case SWIG_IndexError:
    type = rb_eIndexError;
    break;
  case SWIG_TypeError:
    type = rb_eTypeError;
    break;
  case SWIG_DivisionByZero:
    type = rb_eZeroDivError;
    break;
  case SWIG_OverflowError:
    type = rb_eRangeError;
    break;
  case SWIG_SyntaxError:
    type = rb_eSyntaxError;
    break;
  case SWIG_ValueError:
    type = rb_eArgError;
    break;
  case SWIG_SystemError:
    type = rb_eFatal;
    break;
  case SWIG_AttributeError:
    type = rb_eRuntimeError;
    break;
  case SWIG_NullReferenceError:
    type = getNullReferenceError();
    break;
  case SWIG_ObjectPreviouslyDeletedError:
    type = getObjectPreviouslyDeletedError();
    break;
  case SWIG_UnknownError:
    type = rb_eRuntimeError;
    break;
  default:
    type = rb_eRuntimeError;
  }
  return type;
}




/* -----------------------------------------------------------------------------
 * See the LICENSE file for information on copyright, usage and redistribution
 * of SWIG, and the README file for authors - http://www.swig.org/release.html.
 *
 * rubytracking.swg
 *
 * This file contains support for tracking mappings from
 * Ruby objects to C++ objects.  This functionality is needed
 * to implement mark functions for Ruby's mark and sweep
 * garbage collector.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif


/* Global Ruby hash table to store Trackings from C/C++
   structs to Ruby Objects. */
static VALUE swig_ruby_trackings;

/* Global variable that stores a reference to the ruby
   hash table delete function. */
static ID swig_ruby_hash_delete = 0;

/* Setup a Ruby hash table to store Trackings */
SWIGRUNTIME void SWIG_RubyInitializeTrackings(void) {
  /* Create a ruby hash table to store Trackings from C++
     objects to Ruby objects.  Also make sure to tell
     the garabage collector about the hash table. */
  swig_ruby_trackings = rb_hash_new();
  rb_gc_register_address(&swig_ruby_trackings);

  /* Now store a reference to the hash table delete function
     so that we only have to look it up once.*/
  swig_ruby_hash_delete = rb_intern("delete");
}

/* Get a Ruby number to reference a pointer */
SWIGRUNTIME VALUE SWIG_RubyPtrToReference(void* ptr) {
  /* We cast the pointer to an unsigned long
     and then store a reference to it using
     a Ruby number object. */

  /* Convert the pointer to a Ruby number */
  unsigned long value = (unsigned long) ptr;
  return LONG2NUM(value);
}

/* Get a Ruby number to reference an object */
SWIGRUNTIME VALUE SWIG_RubyObjectToReference(VALUE object) {
  /* We cast the object to an unsigned long
     and then store a reference to it using
     a Ruby number object. */

  /* Convert the Object to a Ruby number */
  unsigned long value = (unsigned long) object;
  return LONG2NUM(value);
}

/* Get a Ruby object from a previously stored reference */
SWIGRUNTIME VALUE SWIG_RubyReferenceToObject(VALUE reference) {
  /* The provided Ruby number object is a reference
     to the Ruby object we want.*/

  /* First convert the Ruby number to a C number */
  unsigned long value = NUM2LONG(reference);
  return (VALUE) value;
}

/* Add a Tracking from a C/C++ struct to a Ruby object */
SWIGRUNTIME void SWIG_RubyAddTracking(void* ptr, VALUE object) {
  /* In a Ruby hash table we store the pointer and
     the associated Ruby object.  The trick here is
     that we cannot store the Ruby object directly - if
     we do then it cannot be garbage collected.  So
     instead we typecast it as a unsigned long and
     convert it to a Ruby number object.*/

  /* Get a reference to the pointer as a Ruby number */
  VALUE key = SWIG_RubyPtrToReference(ptr);

  /* Get a reference to the Ruby object as a Ruby number */
  VALUE value = SWIG_RubyObjectToReference(object);

  /* Store the mapping to the global hash table. */
  rb_hash_aset(swig_ruby_trackings, key, value);
}

/* Get the Ruby object that owns the specified C/C++ struct */
SWIGRUNTIME VALUE SWIG_RubyInstanceFor(void* ptr) {
  /* Get a reference to the pointer as a Ruby number */
  VALUE key = SWIG_RubyPtrToReference(ptr);

  /* Now lookup the value stored in the global hash table */
  VALUE value = rb_hash_aref(swig_ruby_trackings, key);

  if (value == Qnil) {
    /* No object exists - return nil. */
    return Qnil;
  }
  else {
    /* Convert this value to Ruby object */
    return SWIG_RubyReferenceToObject(value);
  }
}

/* Remove a Tracking from a C/C++ struct to a Ruby object.  It
   is very important to remove objects once they are destroyed
   since the same memory address may be reused later to create
   a new object. */
SWIGRUNTIME void SWIG_RubyRemoveTracking(void* ptr) {
  /* Get a reference to the pointer as a Ruby number */
  VALUE key = SWIG_RubyPtrToReference(ptr);

  /* Delete the object from the hash table by calling Ruby's
     do this we need to call the Hash.delete method.*/
  rb_funcall(swig_ruby_trackings, swig_ruby_hash_delete, 1, key);
}

/* This is a helper method that unlinks a Ruby object from its
   underlying C++ object.  This is needed if the lifetime of the
   Ruby object is longer than the C++ object */
SWIGRUNTIME void SWIG_RubyUnlinkObjects(void* ptr) {
  VALUE object = SWIG_RubyInstanceFor(ptr);

  if (object != Qnil) {
    DATA_PTR(object) = 0;
  }
}


#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * Ruby API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

SWIGINTERN VALUE
SWIG_Ruby_AppendOutput(VALUE target, VALUE o) {
  if (NIL_P(target)) {
    target = o;
  } else {
    if (TYPE(target) != T_ARRAY) {
      VALUE o2 = target;
      target = rb_ary_new();
      rb_ary_push(target, o2);
    }
    rb_ary_push(target, o);
  }
  return target;
}

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * See the LICENSE file for information on copyright, usage and redistribution
 * of SWIG, and the README file for authors - http://www.swig.org/release.html.
 *
 * rubyrun.swg
 *
 * This file contains the runtime support for Ruby modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* For backward compatibility only */
#define SWIG_POINTER_EXCEPTION  0

/* for raw pointers */
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Ruby_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Ruby_ConvertPtrAndOwn(obj, pptr, type, flags, own)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Ruby_NewPointerObj(ptr, type, flags)
#define SWIG_AcquirePtr(ptr, own)                       SWIG_Ruby_AcquirePtr(ptr, own)
#define swig_owntype                                    ruby_owntype

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Ruby_ConvertPacked(obj, ptr, sz, ty, flags)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Ruby_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_NewPointerObj(ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Ruby_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Ruby_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Ruby_GetModule()
#define SWIG_SetModule(clientdata, pointer) 		SWIG_Ruby_SetModule(pointer)


/* Error manipulation */

#define SWIG_ErrorType(code)                            SWIG_Ruby_ErrorType(code)
#define SWIG_Error(code, msg)            		rb_raise(SWIG_Ruby_ErrorType(code), msg)
#define SWIG_fail                        		goto fail


/* Ruby-specific SWIG API */

#define SWIG_InitRuntime()                              SWIG_Ruby_InitRuntime()
#define SWIG_define_class(ty)                        	SWIG_Ruby_define_class(ty)
#define SWIG_NewClassInstance(value, ty)             	SWIG_Ruby_NewClassInstance(value, ty)
#define SWIG_MangleStr(value)                        	SWIG_Ruby_MangleStr(value)
#define SWIG_CheckConvert(value, ty)                 	SWIG_Ruby_CheckConvert(value, ty)


/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* cc-mode */
#endif
#endif

typedef struct {
  VALUE klass;
  VALUE mImpl;
  void  (*mark)(void *);
  void  (*destroy)(void *);
  int trackObjects;
} swig_class;


static VALUE _mSWIG = Qnil;
static VALUE _cSWIG_Pointer = Qnil;
static VALUE swig_runtime_data_type_pointer = Qnil;

SWIGRUNTIME VALUE
getExceptionClass(void) {
  static int init = 0;
  static VALUE rubyExceptionClass ;
  if (!init) {
    init = 1;
    rubyExceptionClass = rb_const_get(_mSWIG, rb_intern("Exception"));
  }
  return rubyExceptionClass;
}

/* This code checks to see if the Ruby object being raised as part
   of an exception inherits from the Ruby class Exception.  If so,
   the object is simply returned.  If not, then a new Ruby exception
   object is created and that will be returned to Ruby.*/
SWIGRUNTIME VALUE
SWIG_Ruby_ExceptionType(swig_type_info *desc, VALUE obj) {
  VALUE exceptionClass = getExceptionClass();
  if (rb_obj_is_kind_of(obj, exceptionClass)) {
    return obj;
  }  else {
    return rb_exc_new3(rb_eRuntimeError, rb_obj_as_string(obj));
  }
}

/* Initialize Ruby runtime support */
SWIGRUNTIME void
SWIG_Ruby_InitRuntime(void)
{
  if (_mSWIG == Qnil) {
    _mSWIG = rb_define_module("SWIG");
  }
}

/* Define Ruby class for C type */
SWIGRUNTIME void
SWIG_Ruby_define_class(swig_type_info *type)
{
  VALUE klass;
  char *klass_name = (char *) malloc(4 + strlen(type->name) + 1);
  sprintf(klass_name, "TYPE%s", type->name);
  if (NIL_P(_cSWIG_Pointer)) {
    _cSWIG_Pointer = rb_define_class_under(_mSWIG, "Pointer", rb_cObject);
    rb_undef_method(CLASS_OF(_cSWIG_Pointer), "new");
  }
  klass = rb_define_class_under(_mSWIG, klass_name, _cSWIG_Pointer);
  free((void *) klass_name);
}

/* Create a new pointer object */
SWIGRUNTIME VALUE
SWIG_Ruby_NewPointerObj(void *ptr, swig_type_info *type, int flags)
{
  int own =  flags & SWIG_POINTER_OWN;

  char *klass_name;
  swig_class *sklass;
  VALUE klass;
  VALUE obj;

  if (!ptr)
    return Qnil;

  if (type->clientdata) {
    sklass = (swig_class *) type->clientdata;

    /* Are we tracking this class and have we already returned this Ruby object? */
    if (sklass->trackObjects) {
      obj = SWIG_RubyInstanceFor(ptr);

      /* Check the object's type and make sure it has the correct type.
        It might not in cases where methods do things like
        downcast methods. */
      if (obj != Qnil) {
        VALUE value = rb_iv_get(obj, "__swigtype__");
        char* type_name = RSTRING_PTR(value);

        if (strcmp(type->name, type_name) == 0) {
          return obj;
        }
      }
    }

    /* Create a new Ruby object */
    obj = Data_Wrap_Struct(sklass->klass, VOIDFUNC(sklass->mark), (own ? VOIDFUNC(sklass->destroy) : 0), ptr);

    /* If tracking is on for this class then track this object. */
    if (sklass->trackObjects) {
      SWIG_RubyAddTracking(ptr, obj);
    }
  } else {
    klass_name = (char *) malloc(4 + strlen(type->name) + 1);
    sprintf(klass_name, "TYPE%s", type->name);
    klass = rb_const_get(_mSWIG, rb_intern(klass_name));
    free((void *) klass_name);
    obj = Data_Wrap_Struct(klass, 0, 0, ptr);
  }
  rb_iv_set(obj, "__swigtype__", rb_str_new2(type->name));

  return obj;
}

/* Create a new class instance (always owned) */
SWIGRUNTIME VALUE
SWIG_Ruby_NewClassInstance(VALUE klass, swig_type_info *type)
{
  VALUE obj;
  swig_class *sklass = (swig_class *) type->clientdata;
  obj = Data_Wrap_Struct(klass, VOIDFUNC(sklass->mark), VOIDFUNC(sklass->destroy), 0);
  rb_iv_set(obj, "__swigtype__", rb_str_new2(type->name));
  return obj;
}

/* Get type mangle from class name */
SWIGRUNTIMEINLINE char *
SWIG_Ruby_MangleStr(VALUE obj)
{
  VALUE stype = rb_iv_get(obj, "__swigtype__");
  return StringValuePtr(stype);
}

/* Acquire a pointer value */
typedef void (*ruby_owntype)(void*);

SWIGRUNTIME ruby_owntype
SWIG_Ruby_AcquirePtr(VALUE obj, ruby_owntype own) {
  if (obj) {
    ruby_owntype oldown = RDATA(obj)->dfree;
    RDATA(obj)->dfree = own;
    return oldown;
  } else {
    return 0;
  }
}

/* Convert a pointer value */
SWIGRUNTIME int
SWIG_Ruby_ConvertPtrAndOwn(VALUE obj, void **ptr, swig_type_info *ty, int flags, ruby_owntype *own)
{
  char *c;
  swig_cast_info *tc;
  void *vptr = 0;

  /* Grab the pointer */
  if (NIL_P(obj)) {
    *ptr = 0;
    return SWIG_OK;
  } else {
    if (TYPE(obj) != T_DATA) {
      return SWIG_ERROR;
    }
    Data_Get_Struct(obj, void, vptr);
  }

  if (own) *own = RDATA(obj)->dfree;

  /* Check to see if the input object is giving up ownership
     of the underlying C struct or C++ object.  If so then we
     need to reset the destructor since the Ruby object no
     longer owns the underlying C++ object.*/
  if (flags & SWIG_POINTER_DISOWN) {
    /* Is tracking on for this class? */
    int track = 0;
    if (ty && ty->clientdata) {
      swig_class *sklass = (swig_class *) ty->clientdata;
      track = sklass->trackObjects;
    }

    if (track) {
      /* We are tracking objects for this class.  Thus we change the destructor
       * to SWIG_RubyRemoveTracking.  This allows us to
       * remove the mapping from the C++ to Ruby object
       * when the Ruby object is garbage collected.  If we don't
       * do this, then it is possible we will return a reference
       * to a Ruby object that no longer exists thereby crashing Ruby. */
      RDATA(obj)->dfree = SWIG_RubyRemoveTracking;
    } else {
      RDATA(obj)->dfree = 0;
    }
  }

  /* Do type-checking if type info was provided */
  if (ty) {
    if (ty->clientdata) {
      if (rb_obj_is_kind_of(obj, ((swig_class *) (ty->clientdata))->klass)) {
        if (vptr == 0) {
          /* The object has already been deleted */
          return SWIG_ObjectPreviouslyDeletedError;
        }
        *ptr = vptr;
        return SWIG_OK;
      }
    }
    if ((c = SWIG_MangleStr(obj)) == NULL) {
      return SWIG_ERROR;
    }
    tc = SWIG_TypeCheck(c, ty);
    if (!tc) {
      return SWIG_ERROR;
    }
    *ptr = SWIG_TypeCast(tc, vptr);
  } else {
    *ptr = vptr;
  }

  return SWIG_OK;
}

/* Check convert */
SWIGRUNTIMEINLINE int
SWIG_Ruby_CheckConvert(VALUE obj, swig_type_info *ty)
{
  char *c = SWIG_MangleStr(obj);
  if (!c) return 0;
  return SWIG_TypeCheck(c,ty) != 0;
}

SWIGRUNTIME VALUE
SWIG_Ruby_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r, ptr, sz);
  strcpy(r, type->name);
  return rb_str_new2(result);
}

/* Convert a packed value value */
SWIGRUNTIME int
SWIG_Ruby_ConvertPacked(VALUE obj, void *ptr, int sz, swig_type_info *ty) {
  swig_cast_info *tc;
  const char  *c;

  if (TYPE(obj) != T_STRING) goto type_error;
  c = StringValuePtr(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c, ptr, sz);
  if (ty) {
    tc = SWIG_TypeCheck(c, ty);
    if (!tc) goto type_error;
  }
  return SWIG_OK;

 type_error:
  return SWIG_ERROR;
}

SWIGRUNTIME swig_module_info *
SWIG_Ruby_GetModule(void)
{
  VALUE pointer;
  swig_module_info *ret = 0;
  VALUE verbose = rb_gv_get("VERBOSE");

 /* temporarily disable warnings, since the pointer check causes warnings with 'ruby -w' */
  rb_gv_set("VERBOSE", Qfalse);

  /* first check if pointer already created */
  pointer = rb_gv_get("$swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  if (pointer != Qnil) {
    Data_Get_Struct(pointer, swig_module_info, ret);
  }

  /* reinstate warnings */
  rb_gv_set("VERBOSE", verbose);
  return ret;
}

SWIGRUNTIME void
SWIG_Ruby_SetModule(swig_module_info *pointer)
{
  /* register a new class */
  VALUE cl = rb_define_class("swig_runtime_data", rb_cObject);
  /* create and store the structure pointer to a global variable */
  swig_runtime_data_type_pointer = Data_Wrap_Struct(cl, 0, 0, pointer);
  rb_define_readonly_variable("$swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, &swig_runtime_data_type_pointer);
}

#ifdef __cplusplus
#if 0
{ /* cc-mode */
#endif
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0)

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg);; } while(0)


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_DbEnv swig_types[0]
#define SWIGTYPE_p_DbException swig_types[1]
#define SWIGTYPE_p_DbTxn swig_types[2]
#define SWIGTYPE_p_XmlContainer swig_types[3]
#define SWIGTYPE_p_XmlData swig_types[4]
#define SWIGTYPE_p_XmlDocument swig_types[5]
#define SWIGTYPE_p_XmlEventReader swig_types[6]
#define SWIGTYPE_p_XmlEventReaderToWriter swig_types[7]
#define SWIGTYPE_p_XmlEventWriter swig_types[8]
#define SWIGTYPE_p_XmlException swig_types[9]
#define SWIGTYPE_p_XmlIndexDeclaration swig_types[10]
#define SWIGTYPE_p_XmlIndexLookup swig_types[11]
#define SWIGTYPE_p_XmlIndexSpecification swig_types[12]
#define SWIGTYPE_p_XmlInputStream swig_types[13]
#define SWIGTYPE_p_XmlManager swig_types[14]
#define SWIGTYPE_p_XmlMetaData swig_types[15]
#define SWIGTYPE_p_XmlMetaDataIterator swig_types[16]
#define SWIGTYPE_p_XmlModify swig_types[17]
#define SWIGTYPE_p_XmlQueryContext swig_types[18]
#define SWIGTYPE_p_XmlQueryExpression swig_types[19]
#define SWIGTYPE_p_XmlResults swig_types[20]
#define SWIGTYPE_p_XmlStatistics swig_types[21]
#define SWIGTYPE_p_XmlTransaction swig_types[22]
#define SWIGTYPE_p_XmlUpdateContext swig_types[23]
#define SWIGTYPE_p_XmlValue swig_types[24]
#define SWIGTYPE_p_char swig_types[25]
#define SWIGTYPE_p_int swig_types[26]
#define SWIGTYPE_p_std__exception swig_types[27]
#define SWIGTYPE_p_unsigned_char swig_types[28]
static swig_type_info *swig_types[30];
static swig_module_info swig_module = {swig_types, 29, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    Init_dbxml
#define SWIG_name    "Dbxml"

static VALUE mDbxml;

#define SWIGVERSION 0x010331
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a))
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a))


#include <stdexcept>


#ifdef __cplusplus
extern "C" {
#endif
#include "rubyio.h"
#ifdef __cplusplus
}
#endif


#ifdef __cplusplus
extern "C" {
#endif
#ifdef HAVE_SYS_TIME_H
# include <sys/time.h>
struct timeval rb_time_timeval(VALUE);
#endif
#ifdef __cplusplus
}
#endif


#include "db_cxx.h"
#include "dbxml/DbXml.hpp"
#include <errno.h>
#include <fstream>

using namespace DbXml;

class XmlIndexDeclaration {
public:
	XmlIndexDeclaration() {}
	XmlIndexDeclaration(const std::string &uri, const std::string &name, const std::string &index) : uri(uri), name(name), index(index) {}
#ifndef SWIGJAVA
	const std::string &get_uri() const { return uri; }
	const std::string &get_name() const { return name; }
	const std::string &get_index() const { return index; }
#endif
	std::string uri, name, index;
};

class XmlMetaData {
public:
	XmlMetaData() {}
	XmlMetaData(const std::string &uri, const std::string &name, const
		    XmlValue &value) : uri(uri), name(name), value(value) {}

	const std::string &get_uri() const { return uri; }
	const std::string &get_name() const { return name; }
	const XmlValue &get_value() const { return value; }
	std::string uri, name;
	XmlValue value;
};



#include <string>


#include <stdexcept>


#include <limits.h>
#ifndef LLONG_MIN
# define LLONG_MIN	LONG_LONG_MIN
#endif
#ifndef LLONG_MAX
# define LLONG_MAX	LONG_LONG_MAX
#endif
#ifndef ULLONG_MAX
# define ULLONG_MAX	ULONG_LONG_MAX
#endif


  #define SWIG_From_long   LONG2NUM


SWIGINTERNINLINE VALUE
SWIG_From_int  (int value)
{
  return SWIG_From_long  (value);
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(VALUE obj, char** cptr, size_t* psize, int *alloc)
{
  if (TYPE(obj) == T_STRING) {



    char *cstr = STR2CSTR(obj);

    size_t size = RSTRING_LEN(obj) + 1;
    if (cptr)  {
      if (alloc) {
	if (*alloc == SWIG_NEWOBJ) {
	  *cptr = reinterpret_cast< char* >(memcpy((new char[size]), cstr, sizeof(char)*(size)));
	} else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      }
    }
    if (psize) *psize = size;
    return SWIG_OK;
  } else {
    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *)vptr;
	if (psize) *psize = vptr ? (strlen((char*)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}





SWIGINTERN VALUE
SWIG_ruby_failed(void)
{
  return Qnil;
}


/*@SWIG:%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2LONG(VALUE *args)
{
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  long *res = (long *)(args[1]);
  *res = type == T_FIXNUM ? NUM2LONG(obj) : rb_big2long(obj);
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_long (VALUE obj, long* val)
{
  VALUE type = TYPE(obj);
  if ((type == T_FIXNUM) || (type == T_BIGNUM)) {
    long v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(RUBY_METHOD_FUNC(SWIG_AUX_NUM2LONG), (VALUE)a, RUBY_METHOD_FUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_int (VALUE obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }
  return res;
}


SWIGINTERNINLINE VALUE
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > LONG_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ?
	SWIG_NewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : Qnil;
    } else {
      return rb_str_new(carray, static_cast< long >(size));
    }
  } else {
    return Qnil;
  }
}


SWIGINTERNINLINE VALUE
SWIG_FromCharPtr(const char *cptr)
{
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}


SWIGINTERNINLINE VALUE
SWIG_From_std_string  (const std::string& s)
{
  if (s.size()) {
    return SWIG_FromCharPtrAndSize(s.data(), s.size());
  } else {
    return SWIG_FromCharPtrAndSize(s.c_str(), 0);
  }
}


SWIGINTERN int
SWIG_AsPtr_std_string (VALUE obj, std::string **val)
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}

SWIGINTERN XmlInputStream *XmlManager_createStdInInputStream(XmlManager const *self){
		return self->createStdInInputStream();
	}
SWIGINTERN XmlInputStream *XmlManager_createLocalFileInputStream(XmlManager const *self,std::string const &filename){
		return self->createLocalFileInputStream(filename);
	}

/*@SWIG:%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2ULONG(VALUE *args)
{
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  unsigned long *res = (unsigned long *)(args[1]);
  *res = type == T_FIXNUM ? NUM2ULONG(obj) : rb_big2ulong(obj);
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (VALUE obj, unsigned long *val)
{
  VALUE type = TYPE(obj);
  if ((type == T_FIXNUM) || (type == T_BIGNUM)) {
    unsigned long v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(RUBY_METHOD_FUNC(SWIG_AUX_NUM2ULONG), (VALUE)a, RUBY_METHOD_FUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (VALUE obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }
  return res;
}


SWIGINTERN int
SWIG_AsVal_bool (VALUE obj, bool *val)
{
  if (obj == Qtrue) {
    if (val) *val = true;
    return SWIG_OK;
  } else if (obj == Qfalse) {
    if (val) *val = false;
    return SWIG_OK;
  } else {
    int res = 0;
    if (SWIG_AsVal_int (obj, &res) == SWIG_OK) {
      if (val) *val = res ? true : false;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}

SWIGINTERN XmlInputStream *XmlManager_createMemBufInputStream__SWIG_0(XmlManager const *self,char const *bytes,unsigned int const count,char const *id,bool const adopt=false){
		return self->createMemBufInputStream(bytes,
						     count,
						     id, adopt);
	}
SWIGINTERN XmlInputStream *XmlManager_createMemBufInputStream__SWIG_2(XmlManager const *self,char const *bytes,unsigned int const count,bool const copyBuffer){
		return self->createMemBufInputStream(bytes,
						     count,
						     copyBuffer);
	}
SWIGINTERN XmlInputStream *XmlManager_createURLInputStream__SWIG_0(XmlManager const *self,std::string const &baseId,std::string const &systemId,std::string const &publicId){
		return self->createURLInputStream(baseId, systemId, publicId);
	}
SWIGINTERN XmlInputStream *XmlManager_createURLInputStream__SWIG_1(XmlManager const *self,std::string const &baseId,std::string const &systemId){
		return self->createURLInputStream(baseId, systemId);
	}
SWIGINTERN XmlContainer *XmlManager_createContainer__SWIG_0(XmlManager *self,std::string const &name){
		return new XmlContainer(self->createContainer(name));
	}
SWIGINTERN XmlContainer *XmlManager_createContainer__SWIG_1(XmlManager *self,XmlTransaction &txn,std::string const &name){
		return new XmlContainer(self->createContainer(txn, name));
	}
SWIGINTERN XmlContainer *XmlManager_openContainer__SWIG_0(XmlManager *self,XmlTransaction &txn,std::string const &name){
		return new XmlContainer(self->openContainer(txn, name));
	}
SWIGINTERN XmlContainer *XmlManager_openContainer__SWIG_1(XmlManager *self,std::string const &name){
		return new XmlContainer(self->openContainer(name));
	}
SWIGINTERN XmlContainer *XmlManager_createContainer__SWIG_2(XmlManager *self,std::string const &name,u_int32_t flags,enum XmlContainer::ContainerType type=XmlContainer::NodeContainer,int mode=0){
		return new XmlContainer(
			self->createContainer(name, flags, type, mode));
	 }
SWIGINTERN XmlContainer *XmlManager_createContainer__SWIG_5(XmlManager *self,XmlTransaction &txn,std::string const &name,u_int32_t flags,enum XmlContainer::ContainerType type=XmlContainer::NodeContainer,int mode=0){
		return new XmlContainer(self->createContainer(txn, name, flags,
							      type, mode));
        }
SWIGINTERN XmlContainer *XmlManager_openContainer__SWIG_2(XmlManager *self,std::string const &name,u_int32_t flags){
		return new XmlContainer(self->openContainer(name, flags));
        }
SWIGINTERN XmlContainer *XmlManager_openContainer__SWIG_3(XmlManager *self,XmlTransaction &txn,std::string const &name,u_int32_t flags){
		return new XmlContainer(self->openContainer(txn, name, flags));
        }
SWIGINTERN XmlContainer *XmlManager_openContainer__SWIG_4(XmlManager *self,std::string const &name,u_int32_t flags,enum XmlContainer::ContainerType type,int mode=0){
	    return new XmlContainer(self->openContainer(name,
						    flags, type, mode));
        }
SWIGINTERN XmlContainer *XmlManager_openContainer__SWIG_6(XmlManager *self,XmlTransaction &txn,std::string const &name,u_int32_t flags,enum XmlContainer::ContainerType type,int mode=0){
	    return new XmlContainer(self->openContainer(txn, name,
						    flags, type, mode));
        }
SWIGINTERN void XmlManager_dumpContainer(XmlManager *self,std::string const &name,char const *filename){
		std::ofstream out(filename);
		self->dumpContainer(name, &out);
		out.close();
	}
SWIGINTERN void XmlManager_loadContainer(XmlManager *self,std::string const &name,char const *filename,XmlUpdateContext &uc){
		std::ifstream in(filename);
		unsigned long lineno = 0;
		self->loadContainer(name, &in, &lineno, uc);
		in.close();
	}
SWIGINTERN void XmlManager_verifyContainer__SWIG_0(XmlManager *self,std::string const &name,char const *filename,u_int32_t flags=0){
		std::ofstream out;
		if (flags & DB_SALVAGE)
			out.open(filename);
		self->verifyContainer(name, &out, flags);
		if (flags & DB_SALVAGE)
			out.close();
	}
SWIGINTERN XmlDocument *XmlManager_createDocument(XmlManager *self){
		return new XmlDocument(self->createDocument());
	}
SWIGINTERN XmlQueryContext *XmlManager_createQueryContext__SWIG_0(XmlManager *self,enum XmlQueryContext::ReturnType rt,enum XmlQueryContext::EvaluationType et){
		return new XmlQueryContext(self->createQueryContext(rt, et));
	}
SWIGINTERN XmlQueryContext *XmlManager_createQueryContext__SWIG_1(XmlManager *self){
		return new XmlQueryContext(self->createQueryContext(
			XmlQueryContext::LiveValues, XmlQueryContext::Eager));
	}
SWIGINTERN XmlQueryContext *XmlManager_createQueryContext__SWIG_2(XmlManager *self,enum XmlQueryContext::ReturnType rt){
		return new XmlQueryContext(self->createQueryContext(rt, XmlQueryContext::Eager));
	}
SWIGINTERN XmlUpdateContext *XmlManager_createUpdateContext(XmlManager *self){
		return new XmlUpdateContext(self->createUpdateContext());
	}
SWIGINTERN XmlQueryExpression *XmlManager_prepare__SWIG_0(XmlManager *self,std::string const &query,XmlQueryContext &context){
		return new XmlQueryExpression(self->prepare(query, context));
	}
SWIGINTERN XmlQueryExpression *XmlManager_prepare__SWIG_1(XmlManager *self,XmlTransaction &txn,std::string const &query,XmlQueryContext &context){
		return new XmlQueryExpression(self->prepare(
						      txn,query, context));
	}
SWIGINTERN XmlResults *XmlManager_query__SWIG_0(XmlManager *self,std::string const &query,XmlQueryContext &context,u_int32_t flags){
		return new XmlResults(self->query(query, context, flags));
	}
SWIGINTERN XmlResults *XmlManager_query__SWIG_1(XmlManager *self,XmlTransaction &txn,std::string const &query,XmlQueryContext &context,u_int32_t flags){
		return new XmlResults(self->query(txn, query, context, flags));
	}
SWIGINTERN XmlResults *XmlManager_query__SWIG_2(XmlManager *self,std::string const &query,XmlQueryContext &context){
		return new XmlResults(self->query(query, context, 0));
	}
SWIGINTERN XmlResults *XmlManager_query__SWIG_3(XmlManager *self,XmlTransaction &txn,std::string const &query,XmlQueryContext &context){
		return new XmlResults(self->query(txn, query, context, 0));
	}
SWIGINTERN XmlResults *XmlManager_createResults(XmlManager *self){
		return new XmlResults(self->createResults());
	}
SWIGINTERN XmlModify *XmlManager_createModify(XmlManager *self){
		return new XmlModify(self->createModify());
	}
SWIGINTERN XmlTransaction *XmlManager_createTransaction__SWIG_0(XmlManager *self,DbTxn *toAdopt){
		return new XmlTransaction(self->createTransaction(toAdopt));
        }
SWIGINTERN XmlTransaction *XmlManager_createTransaction__SWIG_1(XmlManager *self,u_int32_t flags){
		return new XmlTransaction(self->createTransaction(flags));
	}
SWIGINTERN XmlTransaction *XmlManager_createTransaction__SWIG_2(XmlManager *self){
		return new XmlTransaction(self->createTransaction((u_int32_t)0));
        }
SWIGINTERN XmlIndexLookup *XmlManager_createIndexLookup__SWIG_0(XmlManager *self,XmlContainer &cont,std::string const &uri,std::string const &name,std::string const &index,XmlValue const &value=XmlValue(),enum XmlIndexLookup::Operation op=XmlIndexLookup::NONE){
		return new XmlIndexLookup(self->createIndexLookup(cont, uri,name,
								  index, value,
								  op));
	}
SWIGINTERN void XmlManager_setLogLevel(enum LogLevel level,bool enabled){
		DbXml::setLogLevel(level, enabled);
	}
SWIGINTERN void XmlManager_setLogCategory(enum LogCategory category,bool enabled){
		DbXml::setLogCategory(category, enabled);
	}
SWIGINTERN int XmlManager_get_version_major(){
		int major;
		(void)dbxml_version(&major, NULL, NULL);
		return major;
	}
SWIGINTERN int XmlManager_get_version_minor(){
		int minor;
		(void)dbxml_version(NULL, &minor, NULL);
		return minor;
	}
SWIGINTERN int XmlManager_get_version_patch(){
		int patch;
		(void)dbxml_version(NULL, NULL, &patch);
		return patch;
	}
SWIGINTERN char const *XmlManager_get_version_string(){
		return dbxml_version(NULL, NULL, NULL);
	}

SWIGINTERNINLINE VALUE
SWIG_From_bool  (bool value)
{
  return value ? Qtrue : Qfalse;
}

SWIGINTERN XmlResults *XmlIndexLookup_execute__SWIG_0(XmlIndexLookup const *self,XmlQueryContext &context,u_int32_t flags=0){
		return new XmlResults(self->execute(context, flags));
	}
SWIGINTERN XmlResults *XmlIndexLookup_execute__SWIG_2(XmlIndexLookup const *self,XmlTransaction &txn,XmlQueryContext &context,u_int32_t flags=0){
		return new XmlResults(self->execute(txn, context, flags));
	}

SWIGINTERNINLINE VALUE
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return ULONG2NUM(value);
}


SWIGINTERNINLINE VALUE
SWIG_From_size_t  (size_t value)
{
  return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
}

SWIGINTERN XmlIndexSpecification *XmlContainer_getIndexSpecification__SWIG_0(XmlContainer const *self){
		return new XmlIndexSpecification(self->getIndexSpecification());
	}
SWIGINTERN XmlIndexSpecification *XmlContainer_getIndexSpecification__SWIG_1(XmlContainer const *self,XmlTransaction &txn){
		 return new XmlIndexSpecification(
			 self->getIndexSpecification(txn));
        }
SWIGINTERN XmlIndexSpecification *XmlContainer_getIndexSpecification__SWIG_2(XmlContainer const *self,XmlTransaction &txn,u_int32_t flags){
		 return new XmlIndexSpecification(
			 self->getIndexSpecification(txn, flags));
	 }
SWIGINTERN XmlDocument *XmlContainer_getDocument__SWIG_0(XmlContainer *self,std::string const &name){
		return new XmlDocument(self->getDocument(name, 0));
	}
SWIGINTERN XmlDocument *XmlContainer_getDocument__SWIG_1(XmlContainer *self,XmlTransaction &txn,std::string const &name){
		return new XmlDocument(self->getDocument(txn, name, 0));
	}
SWIGINTERN XmlValue *XmlContainer_getNode__SWIG_0(XmlContainer *self,std::string const &name){
		return new XmlValue(self->getNode(name, 0));
	}
SWIGINTERN XmlValue *XmlContainer_getNode__SWIG_1(XmlContainer *self,XmlTransaction &txn,std::string const &name){
		return new XmlValue(self->getNode(txn, name, 0));
	}
SWIGINTERN XmlDocument *XmlContainer_getDocument__SWIG_2(XmlContainer *self,std::string const &name,u_int32_t flags){
		return new XmlDocument(self->getDocument(name, flags));
	}
SWIGINTERN XmlDocument *XmlContainer_getDocument__SWIG_3(XmlContainer *self,XmlTransaction &txn,std::string const &name,u_int32_t flags){
		return new XmlDocument(self->getDocument(txn, name, flags));
	}
SWIGINTERN XmlValue *XmlContainer_getNode__SWIG_2(XmlContainer *self,std::string const &name,u_int32_t flags){
		return new XmlValue(self->getNode(name, flags));
	}
SWIGINTERN XmlValue *XmlContainer_getNode__SWIG_3(XmlContainer *self,XmlTransaction &txn,std::string const &name,u_int32_t flags){
		return new XmlValue(self->getNode(txn, name, flags));
	}
SWIGINTERN XmlResults *XmlContainer_getAllDocuments__SWIG_0(XmlContainer *self,u_int32_t flags){
		   return new XmlResults(self->getAllDocuments(flags));
	}
SWIGINTERN XmlResults *XmlContainer_getAllDocuments__SWIG_1(XmlContainer *self,XmlTransaction &txn,u_int32_t flags){
		   return new XmlResults(self->getAllDocuments(txn, flags));
	}
SWIGINTERN XmlResults *XmlContainer_lookupIndex__SWIG_0(XmlContainer *self,XmlQueryContext &context,std::string const &uri,std::string const &name,std::string const &index,XmlValue const &value=XmlValue(),u_int32_t flags=0){
		return new XmlResults(
			self->lookupIndex(context, uri, name, index,
					  value, flags));
	}
SWIGINTERN XmlResults *XmlContainer_lookupIndex__SWIG_3(XmlContainer *self,XmlQueryContext &context,std::string const &uri,std::string const &name,std::string const &parent_uri,std::string const &parent_name,std::string const &index,XmlValue const &value=XmlValue(),u_int32_t flags=0){
		return new XmlResults(self->lookupIndex(context, uri, name,
							parent_uri, parent_name,
							index, value, flags));
	}
SWIGINTERN XmlResults *XmlContainer_lookupIndex__SWIG_6(XmlContainer *self,XmlTransaction &txn,XmlQueryContext &context,std::string const &uri,std::string const &name,std::string const &index,XmlValue const &value=XmlValue(),u_int32_t flags=0){
                return new XmlResults(self->lookupIndex(txn, context, uri, name,
							index, value, flags));
        }
SWIGINTERN XmlResults *XmlContainer_lookupIndex__SWIG_9(XmlContainer *self,XmlTransaction &txn,XmlQueryContext &context,std::string const &uri,std::string const &name,std::string const &parent_uri,std::string const &parent_name,std::string const &index,XmlValue const &value=XmlValue(),u_int32_t flags=0){
	        return new XmlResults(self->lookupIndex(txn, context, uri, name,
							parent_uri, parent_name,
							index, value, flags));
	}
SWIGINTERN XmlStatistics *XmlContainer_lookupStatistics__SWIG_0(XmlContainer *self,std::string const &uri,std::string const &name,std::string const &index,XmlValue const &value=XmlValue()){
		return new XmlStatistics(self->lookupStatistics(uri, name, index,
								value));
	}
SWIGINTERN XmlStatistics *XmlContainer_lookupStatistics__SWIG_2(XmlContainer *self,std::string const &uri,std::string const &name,std::string const &parent_uri,std::string const &parent_name,std::string const &index,XmlValue const &value=XmlValue()){
		return new XmlStatistics(self->lookupStatistics(uri, name,
								parent_uri,
								parent_name,
								index, value));
	}
SWIGINTERN XmlStatistics *XmlContainer_lookupStatistics__SWIG_4(XmlContainer *self,XmlTransaction &txn,std::string const &uri,std::string const &name,std::string const &index,XmlValue const &value=XmlValue()){
		return new XmlStatistics(self->lookupStatistics(txn, uri, name,
								index, value));
	}
SWIGINTERN XmlStatistics *XmlContainer_lookupStatistics__SWIG_6(XmlContainer *self,XmlTransaction &txn,std::string const &uri,std::string const &name,std::string const &parent_uri,std::string const &parent_name,std::string const &index,XmlValue const &value=XmlValue()){
		return new XmlStatistics(self->lookupStatistics(txn, uri, name,
								parent_uri,
								parent_name,
								index, value));
	}
SWIGINTERN std::string XmlDocument_getContentAsString(XmlDocument const *self){
		std::string s;
		return self->getContent(s);
	}
SWIGINTERN XmlData const *XmlDocument_getContent(XmlDocument const *self){
		return new XmlData(self->getContent());
	}
SWIGINTERN XmlData const *XmlDocument_getMetaData__SWIG_2(XmlDocument *self,std::string const &uri,std::string const &name){
		XmlData data;
		bool ret = self->getMetaData(uri, name, data);
		if (ret)
			return new XmlData(data);
		return 0;
	}
SWIGINTERN XmlMetaDataIterator *XmlDocument_getMetaDataIterator(XmlDocument const *self){
		return new XmlMetaDataIterator(self->getMetaDataIterator());
	}
SWIGINTERN bool XmlDocument_equals(XmlDocument const *self,XmlDocument const &other){
		return (*self == other);
	}
SWIGINTERN XmlMetaData *XmlMetaDataIterator_next(XmlMetaDataIterator *self){
		XmlMetaData *idecl = new XmlMetaData;
		if (self->next(idecl->uri, idecl->name, idecl->value))
			return idecl;
		else
			delete idecl;
		return NULL;
	}
SWIGINTERN XmlValue *XmlQueryContext_getVariableValue(XmlQueryContext const *self,std::string const &name){
		XmlValue *value = new XmlValue;
		try {
			if (self->getVariableValue(name, *value))
				return value;
			else {
				delete value;
				return NULL;
			}
		}
		catch(...) {
			delete value;
			throw;
		}
	}
SWIGINTERN XmlResults *XmlQueryContext_getVariableValues(XmlQueryContext const *self,std::string const &name){
		XmlResults *res = new XmlResults();
		try {
			if (self->getVariableValue(name, *res))
				return res;
			else {
				delete res;
				return NULL;
			}
		}
		catch(...) {
			delete res;
			throw;
		}
	}
SWIGINTERN XmlValue *XmlResults_next__SWIG_0(XmlResults *self){
		XmlValue *value = new XmlValue;
		if (self->next(*value))
			return value;
		else {
			delete value;
			return NULL;
		}
	}
SWIGINTERN XmlValue *XmlResults_previous__SWIG_0(XmlResults *self){
		XmlValue *value = new XmlValue;
		if (self->previous(*value))
			return value;
		else {
			delete value;
			return NULL;
		}
	}
SWIGINTERN XmlValue *XmlResults_peek__SWIG_0(XmlResults *self){
		XmlValue *value = new XmlValue;
		if (self->peek(*value))
			return value;
		else {
			delete value;
			return NULL;
		}
	}

/*@SWIG:%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2DBL(VALUE *args)
{
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  double *res = (double *)(args[1]);
  *res = (type == T_FLOAT ? NUM2DBL(obj) : (type == T_FIXNUM ? (double) FIX2INT(obj) : rb_big2dbl(obj)));
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_double (VALUE obj, double *val)
{
  VALUE type = TYPE(obj);
  if ((type == T_FLOAT) || (type == T_FIXNUM) || (type == T_BIGNUM)) {
    double v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(RUBY_METHOD_FUNC(SWIG_AUX_NUM2DBL), (VALUE)a, RUBY_METHOD_FUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


  #define SWIG_From_double   rb_float_new

SWIGINTERN XmlData *XmlValue_asBinary(XmlValue const *self){
		XmlData data = self->asBinary();
		return new XmlData(data);
	}

SWIGINTERNINLINE VALUE
SWIG_From_short  (short value)
{
  return SWIG_From_long  (value);
}

SWIGINTERN XmlValue *XmlValue_getParentNode(XmlValue const *self){
		return new XmlValue(self->getParentNode());
	}
SWIGINTERN XmlValue *XmlValue_getFirstChild(XmlValue const *self){
		return new XmlValue(self->getFirstChild());
	}
SWIGINTERN XmlValue *XmlValue_getLastChild(XmlValue const *self){
		return new XmlValue(self->getLastChild());
	}
SWIGINTERN XmlValue *XmlValue_getPreviousSibling(XmlValue const *self){
		return new XmlValue(self->getPreviousSibling());
	}
SWIGINTERN XmlValue *XmlValue_getNextSibling(XmlValue const *self){
		return new XmlValue(self->getNextSibling());
	}
SWIGINTERN XmlResults *XmlValue_getAttributes(XmlValue const *self){
		return new XmlResults(self->getAttributes());
	}
SWIGINTERN XmlValue *XmlValue_getOwnerElement(XmlValue const *self){
		return new XmlValue(self->getOwnerElement());
	}
SWIGINTERN void XmlValue_setValue(XmlValue &to,XmlValue const &from){
		to = from;
	}
SWIGINTERN XmlIndexDeclaration *XmlIndexSpecification_find(XmlIndexSpecification *self,std::string const &uri,std::string const &name){
		XmlIndexDeclaration *idecl =
			new XmlIndexDeclaration(uri, name, "");
		if (self->find(idecl->uri, idecl->name, idecl->index))
			return idecl;
		else {
			delete idecl;
			return NULL;
		}
	}
SWIGINTERN XmlIndexDeclaration *XmlIndexSpecification_next(XmlIndexSpecification *self){
		XmlIndexDeclaration *idecl = new XmlIndexDeclaration;
		if (self->next(idecl->uri, idecl->name, idecl->index))
			return idecl;
		else {
			delete idecl;
			return NULL;
		}
	}
SWIGINTERN XmlResults *XmlQueryExpression_execute__SWIG_0(XmlQueryExpression const *self,XmlQueryContext &context,u_int32_t flags=0){
		return new XmlResults(self->execute(context, flags));
	}
SWIGINTERN XmlResults *XmlQueryExpression_execute__SWIG_2(XmlQueryExpression const *self,XmlValue const &contextItem,XmlQueryContext &context,u_int32_t flags=0){
		return new XmlResults(
			self->execute(contextItem, context, flags));
	}
SWIGINTERN XmlResults *XmlQueryExpression_execute__SWIG_4(XmlQueryExpression const *self,XmlTransaction &txn,XmlQueryContext &context,u_int32_t flags=0){
		return new XmlResults(self->execute(txn, context, flags));
	}
SWIGINTERN XmlResults *XmlQueryExpression_execute__SWIG_6(XmlQueryExpression const *self,XmlTransaction &txn,XmlValue const &contextItem,XmlQueryContext &context,u_int32_t flags=0){
		return new XmlResults(self->execute(txn, contextItem,
						    context, flags));
	}

SWIGINTERNINLINE VALUE
SWIG_From_unsigned_SS_int  (unsigned int value)
{
  return SWIG_From_unsigned_SS_long  (value);
}

SWIGINTERN void XmlInputStream_freeMemory(XmlInputStream *self){
		delete self;
	}
SWIGINTERN XmlTransaction *XmlTransaction_createChild__SWIG_0(XmlTransaction *self,u_int32_t flags=0){
		return new XmlTransaction(self->createChild(flags));
	}
SWIGINTERN void XmlTransaction_commit__SWIG_1(XmlTransaction *self){
	  self->commit(0);
	}
SWIGINTERN unsigned char const *XmlEventReader_getValue(XmlEventReader const *self){
		int len;
		return self->getValue(len);
	}
SWIGINTERN int XmlEventReader_getValueLength(XmlEventReader const *self){
		int len;
		(void)self->getValue(len);
		return len;
	}
swig_class cXmlException;

SWIGINTERN VALUE
_wrap_new_XmlException__SWIG_0(int argc, VALUE *argv, VALUE self) {
  DbException *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  XmlException *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;

  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_DbException,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XmlException" "', argument " "1"" of type '" "DbException const &""'");
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XmlException" "', argument " "1"" of type '" "DbException const &""'");
  }
  arg1 = reinterpret_cast< DbException * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XmlException" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "XmlException" "', argument " "3"" of type '" "int""'");
  }
  arg3 = static_cast< int >(val3);
  result = (XmlException *)new XmlException((DbException const &)*arg1,(char const *)arg2,arg3);DATA_PTR(self) = result;

  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return self;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_XmlException__SWIG_1(int argc, VALUE *argv, VALUE self) {
  DbException *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  XmlException *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;

  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_DbException,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XmlException" "', argument " "1"" of type '" "DbException const &""'");
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XmlException" "', argument " "1"" of type '" "DbException const &""'");
  }
  arg1 = reinterpret_cast< DbException * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XmlException" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (XmlException *)new XmlException((DbException const &)*arg1,(char const *)arg2);DATA_PTR(self) = result;

  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return self;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_XmlException__SWIG_2(int argc, VALUE *argv, VALUE self) {
  DbException *arg1 = 0 ;
  XmlException *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_DbException,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XmlException" "', argument " "1"" of type '" "DbException const &""'");
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XmlException" "', argument " "1"" of type '" "DbException const &""'");
  }
  arg1 = reinterpret_cast< DbException * >(argp1);
  result = (XmlException *)new XmlException((DbException const &)*arg1);DATA_PTR(self) = result;

  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_XmlException_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_XmlException_allocate(int argc, VALUE *argv, VALUE self) {
#endif


    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_XmlException);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }


SWIGINTERN VALUE
_wrap_new_XmlException__SWIG_3(int argc, VALUE *argv, VALUE self) {
  XmlException *arg1 = 0 ;
  XmlException *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_XmlException,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XmlException" "', argument " "1"" of type '" "XmlException const &""'");
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XmlException" "', argument " "1"" of type '" "XmlException const &""'");
  }
  arg1 = reinterpret_cast< XmlException * >(argp1);
  result = (XmlException *)new XmlException((XmlException const &)*arg1);DATA_PTR(self) = result;

  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_XmlException(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;

  argc = nargs;
  if (argc > 3) SWIG_fail;
  for (ii = 0; (ii < argc); ii++) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DbException, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_XmlException__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlException, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_XmlException__SWIG_3(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DbException, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_XmlException__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DbException, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_XmlException__SWIG_0(nargs, args, self);
        }
      }
    }
  }

fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'new_XmlException'");
  return Qnil;
}


SWIGINTERN void
free_XmlException(XmlException *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_XmlException_what(int argc, VALUE *argv, VALUE self) {
  XmlException *arg1 = (XmlException *) 0 ;
  char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlException, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "what" "', argument " "1"" of type '" "XmlException const *""'");
  }
  arg1 = reinterpret_cast< XmlException * >(argp1);
  result = (char *)((XmlException const *)arg1)->what();
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlException_getExceptionCode(int argc, VALUE *argv, VALUE self) {
  XmlException *arg1 = (XmlException *) 0 ;
  XmlException::ExceptionCode result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlException, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getExceptionCode" "', argument " "1"" of type '" "XmlException const *""'");
  }
  arg1 = reinterpret_cast< XmlException * >(argp1);
  result = (XmlException::ExceptionCode)((XmlException const *)arg1)->getExceptionCode();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlException_getDbErrno(int argc, VALUE *argv, VALUE self) {
  XmlException *arg1 = (XmlException *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlException, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getDbErrno" "', argument " "1"" of type '" "XmlException const *""'");
  }
  arg1 = reinterpret_cast< XmlException * >(argp1);
  result = (int)((XmlException const *)arg1)->getDbErrno();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


swig_class cXmlManager;

SWIGINTERN VALUE
_wrap_new_XmlManager__SWIG_0(int argc, VALUE *argv, VALUE self) {
  XmlManager *result = 0 ;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (XmlManager *)new XmlManager();DATA_PTR(self) = result;

    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_XmlManager__SWIG_1(int argc, VALUE *argv, VALUE self) {
  u_int32_t arg1 ;
  XmlManager *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "XmlManager" "', argument " "1"" of type '" "u_int32_t""'");
  }
  arg1 = static_cast< u_int32_t >(val1);
  {
    try {
      result = (XmlManager *)new XmlManager(arg1);DATA_PTR(self) = result;

    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_XmlManager_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_XmlManager_allocate(int argc, VALUE *argv, VALUE self) {
#endif


    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_XmlManager);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }


SWIGINTERN VALUE
_wrap_new_XmlManager__SWIG_2(int argc, VALUE *argv, VALUE self) {
  DbEnv *arg1 = (DbEnv *) 0 ;
  u_int32_t arg2 ;
  XmlManager *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;

  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_DbEnv, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XmlManager" "', argument " "1"" of type '" "DbEnv *""'");
  }
  arg1 = reinterpret_cast< DbEnv * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "XmlManager" "', argument " "2"" of type '" "u_int32_t""'");
  }
  arg2 = static_cast< u_int32_t >(val2);
  {
    try {
      result = (XmlManager *)new XmlManager(arg1,arg2);DATA_PTR(self) = result;

    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_XmlManager(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;

  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ii++) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_XmlManager__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_XmlManager__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DbEnv, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_XmlManager__SWIG_2(nargs, args, self);
      }
    }
  }

fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'new_XmlManager'");
  return Qnil;
}


SWIGINTERN void
free_XmlManager(XmlManager *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_XmlManager_setDefaultContainerFlags(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  u_int32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setDefaultContainerFlags" "', argument " "1"" of type '" "XmlManager *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "setDefaultContainerFlags" "', argument " "2"" of type '" "u_int32_t""'");
  }
  arg2 = static_cast< u_int32_t >(val2);
  {
    try {
      (arg1)->setDefaultContainerFlags(arg2);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_getDefaultContainerFlags(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  u_int32_t result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getDefaultContainerFlags" "', argument " "1"" of type '" "XmlManager *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  {
    try {
      result = (arg1)->getDefaultContainerFlags();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_getFlags(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  u_int32_t result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getFlags" "', argument " "1"" of type '" "XmlManager const *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  {
    try {
      result = ((XmlManager const *)arg1)->getFlags();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_setDefaultPageSize(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  u_int32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setDefaultPageSize" "', argument " "1"" of type '" "XmlManager *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "setDefaultPageSize" "', argument " "2"" of type '" "u_int32_t""'");
  }
  arg2 = static_cast< u_int32_t >(val2);
  {
    try {
      (arg1)->setDefaultPageSize(arg2);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_getDefaultPageSize(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  u_int32_t result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getDefaultPageSize" "', argument " "1"" of type '" "XmlManager *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  {
    try {
      result = (arg1)->getDefaultPageSize();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_setDefaultSequenceIncrement(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  u_int32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setDefaultSequenceIncrement" "', argument " "1"" of type '" "XmlManager *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "setDefaultSequenceIncrement" "', argument " "2"" of type '" "u_int32_t""'");
  }
  arg2 = static_cast< u_int32_t >(val2);
  {
    try {
      (arg1)->setDefaultSequenceIncrement(arg2);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_getDefaultSequenceIncrement(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  u_int32_t result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getDefaultSequenceIncrement" "', argument " "1"" of type '" "XmlManager *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  {
    try {
      result = (arg1)->getDefaultSequenceIncrement();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_setDefaultContainerType(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  enum XmlContainer::ContainerType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setDefaultContainerType" "', argument " "1"" of type '" "XmlManager *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "setDefaultContainerType" "', argument " "2"" of type '" "enum XmlContainer::ContainerType""'");
  }
  arg2 = static_cast< enum XmlContainer::ContainerType >(val2);
  {
    try {
      (arg1)->setDefaultContainerType(arg2);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_getDefaultContainerType(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  enum XmlContainer::ContainerType result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getDefaultContainerType" "', argument " "1"" of type '" "XmlManager *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  {
    try {
      result = (enum XmlContainer::ContainerType)(arg1)->getDefaultContainerType();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_getDbEnv(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  DbEnv *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getDbEnv" "', argument " "1"" of type '" "XmlManager *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  {
    try {
      result = (DbEnv *)(arg1)->getDbEnv();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DbEnv, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_getHome(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getHome" "', argument " "1"" of type '" "XmlManager const *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  {
    try {
      {
        std::string const &_result_ref = ((XmlManager const *)arg1)->getHome();
        result = (std::string *) &_result_ref;
      }
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_std_string(static_cast< std::string >(*result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_getImplicitTimezone(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getImplicitTimezone" "', argument " "1"" of type '" "XmlManager const *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  {
    try {
      result = (int)((XmlManager const *)arg1)->getImplicitTimezone();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_setImplicitTimezone(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setImplicitTimezone" "', argument " "1"" of type '" "XmlManager *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "setImplicitTimezone" "', argument " "2"" of type '" "int""'");
  }
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setImplicitTimezone(arg2);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_existsContainer(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  VALUE vresult = Qnil;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "existsContainer" "', argument " "1"" of type '" "XmlManager *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "existsContainer" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "existsContainer" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  {
    try {
      result = (int)(arg1)->existsContainer((std::string const &)*arg2);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_removeContainer__SWIG_0(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "removeContainer" "', argument " "1"" of type '" "XmlManager *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "removeContainer" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "removeContainer" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->removeContainer((std::string const &)*arg2);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_removeContainer__SWIG_1(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  XmlTransaction *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;

  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "removeContainer" "', argument " "1"" of type '" "XmlManager *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlTransaction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "removeContainer" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "removeContainer" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  arg2 = reinterpret_cast< XmlTransaction * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "removeContainer" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "removeContainer" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->removeContainer(*arg2,(std::string const &)*arg3);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
}


SWIGINTERN VALUE _wrap_XmlManager_removeContainer(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;

  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_XmlManager_removeContainer__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlTransaction, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_XmlManager_removeContainer__SWIG_1(nargs, args, self);
        }
      }
    }
  }

fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'XmlManager_removeContainer'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_renameContainer__SWIG_0(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;

  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "renameContainer" "', argument " "1"" of type '" "XmlManager *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "renameContainer" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "renameContainer" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "renameContainer" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "renameContainer" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->renameContainer((std::string const &)*arg2,(std::string const &)*arg3);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_renameContainer__SWIG_1(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  XmlTransaction *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;

  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "renameContainer" "', argument " "1"" of type '" "XmlManager *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlTransaction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "renameContainer" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "renameContainer" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  arg2 = reinterpret_cast< XmlTransaction * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "renameContainer" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "renameContainer" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "renameContainer" "', argument " "4"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "renameContainer" "', argument " "4"" of type '" "std::string const &""'");
    }
    arg4 = ptr;
  }
  {
    try {
      (arg1)->renameContainer(*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return Qnil;
}


SWIGINTERN VALUE _wrap_XmlManager_renameContainer(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;

  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_XmlManager_renameContainer__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlTransaction, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_XmlManager_renameContainer__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }

fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'XmlManager_renameContainer'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_upgradeContainer(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  std::string *arg2 = 0 ;
  XmlUpdateContext *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;

  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "upgradeContainer" "', argument " "1"" of type '" "XmlManager *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "upgradeContainer" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "upgradeContainer" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_XmlUpdateContext,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "upgradeContainer" "', argument " "3"" of type '" "XmlUpdateContext &""'");
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "upgradeContainer" "', argument " "3"" of type '" "XmlUpdateContext &""'");
  }
  arg3 = reinterpret_cast< XmlUpdateContext * >(argp3);
  {
    try {
      (arg1)->upgradeContainer((std::string const &)*arg2,*arg3);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_compactContainer__SWIG_0(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  std::string *arg2 = 0 ;
  XmlUpdateContext *arg3 = 0 ;
  u_int32_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;

  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "compactContainer" "', argument " "1"" of type '" "XmlManager *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "compactContainer" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "compactContainer" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_XmlUpdateContext,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "compactContainer" "', argument " "3"" of type '" "XmlUpdateContext &""'");
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "compactContainer" "', argument " "3"" of type '" "XmlUpdateContext &""'");
  }
  arg3 = reinterpret_cast< XmlUpdateContext * >(argp3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "compactContainer" "', argument " "4"" of type '" "u_int32_t""'");
  }
  arg4 = static_cast< u_int32_t >(val4);
  {
    try {
      (arg1)->compactContainer((std::string const &)*arg2,*arg3,arg4);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_compactContainer__SWIG_1(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  std::string *arg2 = 0 ;
  XmlUpdateContext *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;

  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "compactContainer" "', argument " "1"" of type '" "XmlManager *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "compactContainer" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "compactContainer" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_XmlUpdateContext,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "compactContainer" "', argument " "3"" of type '" "XmlUpdateContext &""'");
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "compactContainer" "', argument " "3"" of type '" "XmlUpdateContext &""'");
  }
  arg3 = reinterpret_cast< XmlUpdateContext * >(argp3);
  {
    try {
      (arg1)->compactContainer((std::string const &)*arg2,*arg3);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_compactContainer__SWIG_2(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  XmlTransaction *arg2 = 0 ;
  std::string *arg3 = 0 ;
  XmlUpdateContext *arg4 = 0 ;
  u_int32_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;

  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "compactContainer" "', argument " "1"" of type '" "XmlManager *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlTransaction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "compactContainer" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "compactContainer" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  arg2 = reinterpret_cast< XmlTransaction * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "compactContainer" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "compactContainer" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_XmlUpdateContext,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "compactContainer" "', argument " "4"" of type '" "XmlUpdateContext &""'");
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "compactContainer" "', argument " "4"" of type '" "XmlUpdateContext &""'");
  }
  arg4 = reinterpret_cast< XmlUpdateContext * >(argp4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "compactContainer" "', argument " "5"" of type '" "u_int32_t""'");
  }
  arg5 = static_cast< u_int32_t >(val5);
  {
    try {
      (arg1)->compactContainer(*arg2,(std::string const &)*arg3,*arg4,arg5);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_compactContainer__SWIG_3(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  XmlTransaction *arg2 = 0 ;
  std::string *arg3 = 0 ;
  XmlUpdateContext *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 = 0 ;
  int res4 = 0 ;

  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "compactContainer" "', argument " "1"" of type '" "XmlManager *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlTransaction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "compactContainer" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "compactContainer" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  arg2 = reinterpret_cast< XmlTransaction * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "compactContainer" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "compactContainer" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_XmlUpdateContext,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "compactContainer" "', argument " "4"" of type '" "XmlUpdateContext &""'");
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "compactContainer" "', argument " "4"" of type '" "XmlUpdateContext &""'");
  }
  arg4 = reinterpret_cast< XmlUpdateContext * >(argp4);
  {
    try {
      (arg1)->compactContainer(*arg2,(std::string const &)*arg3,*arg4);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
}


SWIGINTERN VALUE _wrap_XmlManager_compactContainer(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;

  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_XmlUpdateContext, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_XmlManager_compactContainer__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlTransaction, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_XmlUpdateContext, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_XmlManager_compactContainer__SWIG_3(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_XmlUpdateContext, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_XmlManager_compactContainer__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlTransaction, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_XmlUpdateContext, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_XmlManager_compactContainer__SWIG_2(nargs, args, self);
            }
          }
        }
      }
    }
  }

fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'XmlManager_compactContainer'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_truncateContainer__SWIG_0(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  std::string *arg2 = 0 ;
  XmlUpdateContext *arg3 = 0 ;
  u_int32_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;

  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "truncateContainer" "', argument " "1"" of type '" "XmlManager *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "truncateContainer" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "truncateContainer" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_XmlUpdateContext,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "truncateContainer" "', argument " "3"" of type '" "XmlUpdateContext &""'");
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "truncateContainer" "', argument " "3"" of type '" "XmlUpdateContext &""'");
  }
  arg3 = reinterpret_cast< XmlUpdateContext * >(argp3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "truncateContainer" "', argument " "4"" of type '" "u_int32_t""'");
  }
  arg4 = static_cast< u_int32_t >(val4);
  {
    try {
      (arg1)->truncateContainer((std::string const &)*arg2,*arg3,arg4);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_truncateContainer__SWIG_1(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  std::string *arg2 = 0 ;
  XmlUpdateContext *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;

  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "truncateContainer" "', argument " "1"" of type '" "XmlManager *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "truncateContainer" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "truncateContainer" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_XmlUpdateContext,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "truncateContainer" "', argument " "3"" of type '" "XmlUpdateContext &""'");
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "truncateContainer" "', argument " "3"" of type '" "XmlUpdateContext &""'");
  }
  arg3 = reinterpret_cast< XmlUpdateContext * >(argp3);
  {
    try {
      (arg1)->truncateContainer((std::string const &)*arg2,*arg3);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_truncateContainer__SWIG_2(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  XmlTransaction *arg2 = 0 ;
  std::string *arg3 = 0 ;
  XmlUpdateContext *arg4 = 0 ;
  u_int32_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;

  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "truncateContainer" "', argument " "1"" of type '" "XmlManager *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlTransaction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "truncateContainer" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "truncateContainer" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  arg2 = reinterpret_cast< XmlTransaction * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "truncateContainer" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "truncateContainer" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_XmlUpdateContext,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "truncateContainer" "', argument " "4"" of type '" "XmlUpdateContext &""'");
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "truncateContainer" "', argument " "4"" of type '" "XmlUpdateContext &""'");
  }
  arg4 = reinterpret_cast< XmlUpdateContext * >(argp4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "truncateContainer" "', argument " "5"" of type '" "u_int32_t""'");
  }
  arg5 = static_cast< u_int32_t >(val5);
  {
    try {
      (arg1)->truncateContainer(*arg2,(std::string const &)*arg3,*arg4,arg5);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_truncateContainer__SWIG_3(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  XmlTransaction *arg2 = 0 ;
  std::string *arg3 = 0 ;
  XmlUpdateContext *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 = 0 ;
  int res4 = 0 ;

  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "truncateContainer" "', argument " "1"" of type '" "XmlManager *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlTransaction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "truncateContainer" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "truncateContainer" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  arg2 = reinterpret_cast< XmlTransaction * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "truncateContainer" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "truncateContainer" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_XmlUpdateContext,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "truncateContainer" "', argument " "4"" of type '" "XmlUpdateContext &""'");
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "truncateContainer" "', argument " "4"" of type '" "XmlUpdateContext &""'");
  }
  arg4 = reinterpret_cast< XmlUpdateContext * >(argp4);
  {
    try {
      (arg1)->truncateContainer(*arg2,(std::string const &)*arg3,*arg4);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
}


SWIGINTERN VALUE _wrap_XmlManager_truncateContainer(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;

  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_XmlUpdateContext, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_XmlManager_truncateContainer__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlTransaction, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_XmlUpdateContext, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_XmlManager_truncateContainer__SWIG_3(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_XmlUpdateContext, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_XmlManager_truncateContainer__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlTransaction, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_XmlUpdateContext, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_XmlManager_truncateContainer__SWIG_2(nargs, args, self);
            }
          }
        }
      }
    }
  }

fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'XmlManager_truncateContainer'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_reindexContainer__SWIG_0(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  std::string *arg2 = 0 ;
  XmlUpdateContext *arg3 = 0 ;
  u_int32_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;

  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "reindexContainer" "', argument " "1"" of type '" "XmlManager *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "reindexContainer" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "reindexContainer" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_XmlUpdateContext,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "reindexContainer" "', argument " "3"" of type '" "XmlUpdateContext &""'");
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "reindexContainer" "', argument " "3"" of type '" "XmlUpdateContext &""'");
  }
  arg3 = reinterpret_cast< XmlUpdateContext * >(argp3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "reindexContainer" "', argument " "4"" of type '" "u_int32_t""'");
  }
  arg4 = static_cast< u_int32_t >(val4);
  {
    try {
      (arg1)->reindexContainer((std::string const &)*arg2,*arg3,arg4);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_reindexContainer__SWIG_1(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  std::string *arg2 = 0 ;
  XmlUpdateContext *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;

  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "reindexContainer" "', argument " "1"" of type '" "XmlManager *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "reindexContainer" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "reindexContainer" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_XmlUpdateContext,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "reindexContainer" "', argument " "3"" of type '" "XmlUpdateContext &""'");
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "reindexContainer" "', argument " "3"" of type '" "XmlUpdateContext &""'");
  }
  arg3 = reinterpret_cast< XmlUpdateContext * >(argp3);
  {
    try {
      (arg1)->reindexContainer((std::string const &)*arg2,*arg3);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_reindexContainer__SWIG_2(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  XmlTransaction *arg2 = 0 ;
  std::string *arg3 = 0 ;
  XmlUpdateContext *arg4 = 0 ;
  u_int32_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;

  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "reindexContainer" "', argument " "1"" of type '" "XmlManager *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlTransaction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "reindexContainer" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "reindexContainer" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  arg2 = reinterpret_cast< XmlTransaction * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "reindexContainer" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "reindexContainer" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_XmlUpdateContext,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "reindexContainer" "', argument " "4"" of type '" "XmlUpdateContext &""'");
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "reindexContainer" "', argument " "4"" of type '" "XmlUpdateContext &""'");
  }
  arg4 = reinterpret_cast< XmlUpdateContext * >(argp4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "reindexContainer" "', argument " "5"" of type '" "u_int32_t""'");
  }
  arg5 = static_cast< u_int32_t >(val5);
  {
    try {
      (arg1)->reindexContainer(*arg2,(std::string const &)*arg3,*arg4,arg5);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_reindexContainer__SWIG_3(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  XmlTransaction *arg2 = 0 ;
  std::string *arg3 = 0 ;
  XmlUpdateContext *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 = 0 ;
  int res4 = 0 ;

  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "reindexContainer" "', argument " "1"" of type '" "XmlManager *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlTransaction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "reindexContainer" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "reindexContainer" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  arg2 = reinterpret_cast< XmlTransaction * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "reindexContainer" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "reindexContainer" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_XmlUpdateContext,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "reindexContainer" "', argument " "4"" of type '" "XmlUpdateContext &""'");
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "reindexContainer" "', argument " "4"" of type '" "XmlUpdateContext &""'");
  }
  arg4 = reinterpret_cast< XmlUpdateContext * >(argp4);
  {
    try {
      (arg1)->reindexContainer(*arg2,(std::string const &)*arg3,*arg4);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
}


SWIGINTERN VALUE _wrap_XmlManager_reindexContainer(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;

  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_XmlUpdateContext, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_XmlManager_reindexContainer__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlTransaction, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_XmlUpdateContext, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_XmlManager_reindexContainer__SWIG_3(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_XmlUpdateContext, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_XmlManager_reindexContainer__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlTransaction, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_XmlUpdateContext, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_XmlManager_reindexContainer__SWIG_2(nargs, args, self);
            }
          }
        }
      }
    }
  }

fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'XmlManager_reindexContainer'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_createStdInInputStream(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  XmlInputStream *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "createStdInInputStream" "', argument " "1"" of type '" "XmlManager const *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  {
    try {
      result = (XmlInputStream *)XmlManager_createStdInInputStream((XmlManager const *)arg1);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlInputStream, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_createLocalFileInputStream(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  std::string *arg2 = 0 ;
  XmlInputStream *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  VALUE vresult = Qnil;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "createLocalFileInputStream" "', argument " "1"" of type '" "XmlManager const *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "createLocalFileInputStream" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "createLocalFileInputStream" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  {
    try {
      result = (XmlInputStream *)XmlManager_createLocalFileInputStream((XmlManager const *)arg1,(std::string const &)*arg2);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlInputStream, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_createMemBufInputStream__SWIG_0(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  char *arg4 = (char *) 0 ;
  bool arg5 ;
  XmlInputStream *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "createMemBufInputStream" "', argument " "1"" of type '" "XmlManager const *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "createMemBufInputStream" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "createMemBufInputStream" "', argument " "3"" of type '" "unsigned int""'");
  }
  arg3 = static_cast< unsigned int >(val3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "createMemBufInputStream" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  ecode5 = SWIG_AsVal_bool(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "createMemBufInputStream" "', argument " "5"" of type '" "bool""'");
  }
  arg5 = static_cast< bool >(val5);
  {
    try {
      result = (XmlInputStream *)XmlManager_createMemBufInputStream__SWIG_0((XmlManager const *)arg1,(char const *)arg2,arg3,(char const *)arg4,arg5);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlInputStream, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_createMemBufInputStream__SWIG_1(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  char *arg4 = (char *) 0 ;
  XmlInputStream *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "createMemBufInputStream" "', argument " "1"" of type '" "XmlManager const *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "createMemBufInputStream" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "createMemBufInputStream" "', argument " "3"" of type '" "unsigned int""'");
  }
  arg3 = static_cast< unsigned int >(val3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "createMemBufInputStream" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  {
    try {
      result = (XmlInputStream *)XmlManager_createMemBufInputStream__SWIG_0((XmlManager const *)arg1,(char const *)arg2,arg3,(char const *)arg4);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlInputStream, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_createMemBufInputStream__SWIG_2(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  bool arg4 ;
  XmlInputStream *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "createMemBufInputStream" "', argument " "1"" of type '" "XmlManager const *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "createMemBufInputStream" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "createMemBufInputStream" "', argument " "3"" of type '" "unsigned int""'");
  }
  arg3 = static_cast< unsigned int >(val3);
  ecode4 = SWIG_AsVal_bool(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "createMemBufInputStream" "', argument " "4"" of type '" "bool""'");
  }
  arg4 = static_cast< bool >(val4);
  {
    try {
      result = (XmlInputStream *)XmlManager_createMemBufInputStream__SWIG_2((XmlManager const *)arg1,(char const *)arg2,arg3,arg4);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlInputStream, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_XmlManager_createMemBufInputStream(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;

  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_XmlManager_createMemBufInputStream__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_XmlManager_createMemBufInputStream__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_XmlManager_createMemBufInputStream__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }

fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'XmlManager_createMemBufInputStream'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_createURLInputStream__SWIG_0(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  XmlInputStream *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  VALUE vresult = Qnil;

  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "createURLInputStream" "', argument " "1"" of type '" "XmlManager const *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "createURLInputStream" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "createURLInputStream" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "createURLInputStream" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "createURLInputStream" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "createURLInputStream" "', argument " "4"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "createURLInputStream" "', argument " "4"" of type '" "std::string const &""'");
    }
    arg4 = ptr;
  }
  {
    try {
      result = (XmlInputStream *)XmlManager_createURLInputStream__SWIG_0((XmlManager const *)arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlInputStream, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_createURLInputStream__SWIG_1(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  XmlInputStream *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  VALUE vresult = Qnil;

  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "createURLInputStream" "', argument " "1"" of type '" "XmlManager const *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "createURLInputStream" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "createURLInputStream" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "createURLInputStream" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "createURLInputStream" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  {
    try {
      result = (XmlInputStream *)XmlManager_createURLInputStream__SWIG_1((XmlManager const *)arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlInputStream, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
}


SWIGINTERN VALUE _wrap_XmlManager_createURLInputStream(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;

  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_XmlManager_createURLInputStream__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_XmlManager_createURLInputStream__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }

fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'XmlManager_createURLInputStream'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_createContainer__SWIG_0(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  std::string *arg2 = 0 ;
  XmlContainer *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  VALUE vresult = Qnil;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "createContainer" "', argument " "1"" of type '" "XmlManager *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "createContainer" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "createContainer" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  {
    try {
      result = (XmlContainer *)XmlManager_createContainer__SWIG_0(arg1,(std::string const &)*arg2);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlContainer, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_createContainer__SWIG_1(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  XmlTransaction *arg2 = 0 ;
  std::string *arg3 = 0 ;
  XmlContainer *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  VALUE vresult = Qnil;

  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "createContainer" "', argument " "1"" of type '" "XmlManager *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlTransaction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "createContainer" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "createContainer" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  arg2 = reinterpret_cast< XmlTransaction * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "createContainer" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "createContainer" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  {
    try {
      result = (XmlContainer *)XmlManager_createContainer__SWIG_1(arg1,*arg2,(std::string const &)*arg3);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlContainer, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return vresult;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_openContainer__SWIG_0(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  XmlTransaction *arg2 = 0 ;
  std::string *arg3 = 0 ;
  XmlContainer *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  VALUE vresult = Qnil;

  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "openContainer" "', argument " "1"" of type '" "XmlManager *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlTransaction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "openContainer" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "openContainer" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  arg2 = reinterpret_cast< XmlTransaction * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "openContainer" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "openContainer" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  {
    try {
      result = (XmlContainer *)XmlManager_openContainer__SWIG_0(arg1,*arg2,(std::string const &)*arg3);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlContainer, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return vresult;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_openContainer__SWIG_1(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  std::string *arg2 = 0 ;
  XmlContainer *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  VALUE vresult = Qnil;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "openContainer" "', argument " "1"" of type '" "XmlManager *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "openContainer" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "openContainer" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  {
    try {
      result = (XmlContainer *)XmlManager_openContainer__SWIG_1(arg1,(std::string const &)*arg2);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlContainer, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_createContainer__SWIG_2(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  std::string *arg2 = 0 ;
  u_int32_t arg3 ;
  enum XmlContainer::ContainerType arg4 ;
  int arg5 ;
  XmlContainer *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "createContainer" "', argument " "1"" of type '" "XmlManager *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "createContainer" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "createContainer" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "createContainer" "', argument " "3"" of type '" "u_int32_t""'");
  }
  arg3 = static_cast< u_int32_t >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "createContainer" "', argument " "4"" of type '" "enum XmlContainer::ContainerType""'");
  }
  arg4 = static_cast< enum XmlContainer::ContainerType >(val4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "createContainer" "', argument " "5"" of type '" "int""'");
  }
  arg5 = static_cast< int >(val5);
  {
    try {
      result = (XmlContainer *)XmlManager_createContainer__SWIG_2(arg1,(std::string const &)*arg2,arg3,arg4,arg5);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlContainer, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_createContainer__SWIG_3(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  std::string *arg2 = 0 ;
  u_int32_t arg3 ;
  enum XmlContainer::ContainerType arg4 ;
  XmlContainer *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "createContainer" "', argument " "1"" of type '" "XmlManager *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "createContainer" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "createContainer" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "createContainer" "', argument " "3"" of type '" "u_int32_t""'");
  }
  arg3 = static_cast< u_int32_t >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "createContainer" "', argument " "4"" of type '" "enum XmlContainer::ContainerType""'");
  }
  arg4 = static_cast< enum XmlContainer::ContainerType >(val4);
  {
    try {
      result = (XmlContainer *)XmlManager_createContainer__SWIG_2(arg1,(std::string const &)*arg2,arg3,arg4);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlContainer, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_createContainer__SWIG_4(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  std::string *arg2 = 0 ;
  u_int32_t arg3 ;
  XmlContainer *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "createContainer" "', argument " "1"" of type '" "XmlManager *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "createContainer" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "createContainer" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "createContainer" "', argument " "3"" of type '" "u_int32_t""'");
  }
  arg3 = static_cast< u_int32_t >(val3);
  {
    try {
      result = (XmlContainer *)XmlManager_createContainer__SWIG_2(arg1,(std::string const &)*arg2,arg3);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlContainer, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_createContainer__SWIG_5(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  XmlTransaction *arg2 = 0 ;
  std::string *arg3 = 0 ;
  u_int32_t arg4 ;
  enum XmlContainer::ContainerType arg5 ;
  int arg6 ;
  XmlContainer *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "createContainer" "', argument " "1"" of type '" "XmlManager *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlTransaction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "createContainer" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "createContainer" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  arg2 = reinterpret_cast< XmlTransaction * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "createContainer" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "createContainer" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "createContainer" "', argument " "4"" of type '" "u_int32_t""'");
  }
  arg4 = static_cast< u_int32_t >(val4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "createContainer" "', argument " "5"" of type '" "enum XmlContainer::ContainerType""'");
  }
  arg5 = static_cast< enum XmlContainer::ContainerType >(val5);
  ecode6 = SWIG_AsVal_int(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "createContainer" "', argument " "6"" of type '" "int""'");
  }
  arg6 = static_cast< int >(val6);
  {
    try {
      result = (XmlContainer *)XmlManager_createContainer__SWIG_5(arg1,*arg2,(std::string const &)*arg3,arg4,arg5,arg6);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlContainer, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return vresult;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_createContainer__SWIG_6(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  XmlTransaction *arg2 = 0 ;
  std::string *arg3 = 0 ;
  u_int32_t arg4 ;
  enum XmlContainer::ContainerType arg5 ;
  XmlContainer *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "createContainer" "', argument " "1"" of type '" "XmlManager *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlTransaction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "createContainer" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "createContainer" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  arg2 = reinterpret_cast< XmlTransaction * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "createContainer" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "createContainer" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "createContainer" "', argument " "4"" of type '" "u_int32_t""'");
  }
  arg4 = static_cast< u_int32_t >(val4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "createContainer" "', argument " "5"" of type '" "enum XmlContainer::ContainerType""'");
  }
  arg5 = static_cast< enum XmlContainer::ContainerType >(val5);
  {
    try {
      result = (XmlContainer *)XmlManager_createContainer__SWIG_5(arg1,*arg2,(std::string const &)*arg3,arg4,arg5);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlContainer, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return vresult;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_createContainer__SWIG_7(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  XmlTransaction *arg2 = 0 ;
  std::string *arg3 = 0 ;
  u_int32_t arg4 ;
  XmlContainer *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int val4 ;
  int ecode4 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "createContainer" "', argument " "1"" of type '" "XmlManager *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlTransaction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "createContainer" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "createContainer" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  arg2 = reinterpret_cast< XmlTransaction * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "createContainer" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "createContainer" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "createContainer" "', argument " "4"" of type '" "u_int32_t""'");
  }
  arg4 = static_cast< u_int32_t >(val4);
  {
    try {
      result = (XmlContainer *)XmlManager_createContainer__SWIG_5(arg1,*arg2,(std::string const &)*arg3,arg4);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlContainer, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return vresult;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
}


SWIGINTERN VALUE _wrap_XmlManager_createContainer(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[7];
  int ii;

  argc = nargs + 1;
  argv[0] = self;
  if (argc > 7) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_XmlManager_createContainer__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlTransaction, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_XmlManager_createContainer__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_XmlManager_createContainer__SWIG_4(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlTransaction, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_XmlManager_createContainer__SWIG_7(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_XmlManager_createContainer__SWIG_3(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlTransaction, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_XmlManager_createContainer__SWIG_6(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_XmlManager_createContainer__SWIG_2(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlTransaction, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_XmlManager_createContainer__SWIG_5(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }

fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'XmlManager_createContainer'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_openContainer__SWIG_2(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  std::string *arg2 = 0 ;
  u_int32_t arg3 ;
  XmlContainer *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "openContainer" "', argument " "1"" of type '" "XmlManager *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "openContainer" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "openContainer" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "openContainer" "', argument " "3"" of type '" "u_int32_t""'");
  }
  arg3 = static_cast< u_int32_t >(val3);
  {
    try {
      result = (XmlContainer *)XmlManager_openContainer__SWIG_2(arg1,(std::string const &)*arg2,arg3);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlContainer, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_openContainer__SWIG_3(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  XmlTransaction *arg2 = 0 ;
  std::string *arg3 = 0 ;
  u_int32_t arg4 ;
  XmlContainer *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int val4 ;
  int ecode4 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "openContainer" "', argument " "1"" of type '" "XmlManager *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlTransaction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "openContainer" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "openContainer" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  arg2 = reinterpret_cast< XmlTransaction * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "openContainer" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "openContainer" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "openContainer" "', argument " "4"" of type '" "u_int32_t""'");
  }
  arg4 = static_cast< u_int32_t >(val4);
  {
    try {
      result = (XmlContainer *)XmlManager_openContainer__SWIG_3(arg1,*arg2,(std::string const &)*arg3,arg4);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlContainer, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return vresult;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_openContainer__SWIG_4(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  std::string *arg2 = 0 ;
  u_int32_t arg3 ;
  enum XmlContainer::ContainerType arg4 ;
  int arg5 ;
  XmlContainer *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "openContainer" "', argument " "1"" of type '" "XmlManager *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "openContainer" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "openContainer" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "openContainer" "', argument " "3"" of type '" "u_int32_t""'");
  }
  arg3 = static_cast< u_int32_t >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "openContainer" "', argument " "4"" of type '" "enum XmlContainer::ContainerType""'");
  }
  arg4 = static_cast< enum XmlContainer::ContainerType >(val4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "openContainer" "', argument " "5"" of type '" "int""'");
  }
  arg5 = static_cast< int >(val5);
  {
    try {
      result = (XmlContainer *)XmlManager_openContainer__SWIG_4(arg1,(std::string const &)*arg2,arg3,arg4,arg5);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlContainer, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_openContainer__SWIG_5(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  std::string *arg2 = 0 ;
  u_int32_t arg3 ;
  enum XmlContainer::ContainerType arg4 ;
  XmlContainer *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "openContainer" "', argument " "1"" of type '" "XmlManager *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "openContainer" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "openContainer" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "openContainer" "', argument " "3"" of type '" "u_int32_t""'");
  }
  arg3 = static_cast< u_int32_t >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "openContainer" "', argument " "4"" of type '" "enum XmlContainer::ContainerType""'");
  }
  arg4 = static_cast< enum XmlContainer::ContainerType >(val4);
  {
    try {
      result = (XmlContainer *)XmlManager_openContainer__SWIG_4(arg1,(std::string const &)*arg2,arg3,arg4);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlContainer, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_openContainer__SWIG_6(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  XmlTransaction *arg2 = 0 ;
  std::string *arg3 = 0 ;
  u_int32_t arg4 ;
  enum XmlContainer::ContainerType arg5 ;
  int arg6 ;
  XmlContainer *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "openContainer" "', argument " "1"" of type '" "XmlManager *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlTransaction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "openContainer" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "openContainer" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  arg2 = reinterpret_cast< XmlTransaction * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "openContainer" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "openContainer" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "openContainer" "', argument " "4"" of type '" "u_int32_t""'");
  }
  arg4 = static_cast< u_int32_t >(val4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "openContainer" "', argument " "5"" of type '" "enum XmlContainer::ContainerType""'");
  }
  arg5 = static_cast< enum XmlContainer::ContainerType >(val5);
  ecode6 = SWIG_AsVal_int(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "openContainer" "', argument " "6"" of type '" "int""'");
  }
  arg6 = static_cast< int >(val6);
  {
    try {
      result = (XmlContainer *)XmlManager_openContainer__SWIG_6(arg1,*arg2,(std::string const &)*arg3,arg4,arg5,arg6);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlContainer, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return vresult;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_openContainer__SWIG_7(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  XmlTransaction *arg2 = 0 ;
  std::string *arg3 = 0 ;
  u_int32_t arg4 ;
  enum XmlContainer::ContainerType arg5 ;
  XmlContainer *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "openContainer" "', argument " "1"" of type '" "XmlManager *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlTransaction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "openContainer" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "openContainer" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  arg2 = reinterpret_cast< XmlTransaction * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "openContainer" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "openContainer" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "openContainer" "', argument " "4"" of type '" "u_int32_t""'");
  }
  arg4 = static_cast< u_int32_t >(val4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "openContainer" "', argument " "5"" of type '" "enum XmlContainer::ContainerType""'");
  }
  arg5 = static_cast< enum XmlContainer::ContainerType >(val5);
  {
    try {
      result = (XmlContainer *)XmlManager_openContainer__SWIG_6(arg1,*arg2,(std::string const &)*arg3,arg4,arg5);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlContainer, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return vresult;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
}


SWIGINTERN VALUE _wrap_XmlManager_openContainer(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[7];
  int ii;

  argc = nargs + 1;
  argv[0] = self;
  if (argc > 7) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_XmlManager_openContainer__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlTransaction, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_XmlManager_openContainer__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_XmlManager_openContainer__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlTransaction, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_XmlManager_openContainer__SWIG_3(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_XmlManager_openContainer__SWIG_5(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlTransaction, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_XmlManager_openContainer__SWIG_7(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_XmlManager_openContainer__SWIG_4(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlTransaction, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_XmlManager_openContainer__SWIG_6(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }

fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'XmlManager_openContainer'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_dumpContainer(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  std::string *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;

  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dumpContainer" "', argument " "1"" of type '" "XmlManager *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dumpContainer" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dumpContainer" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "dumpContainer" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try {
      XmlManager_dumpContainer(arg1,(std::string const &)*arg2,(char const *)arg3);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_loadContainer(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  std::string *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  XmlUpdateContext *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;

  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "loadContainer" "', argument " "1"" of type '" "XmlManager *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "loadContainer" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "loadContainer" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "loadContainer" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_XmlUpdateContext,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "loadContainer" "', argument " "4"" of type '" "XmlUpdateContext &""'");
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "loadContainer" "', argument " "4"" of type '" "XmlUpdateContext &""'");
  }
  arg4 = reinterpret_cast< XmlUpdateContext * >(argp4);
  {
    try {
      XmlManager_loadContainer(arg1,(std::string const &)*arg2,(char const *)arg3,*arg4);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_verifyContainer__SWIG_0(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  std::string *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  u_int32_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;

  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "verifyContainer" "', argument " "1"" of type '" "XmlManager *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "verifyContainer" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "verifyContainer" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "verifyContainer" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "verifyContainer" "', argument " "4"" of type '" "u_int32_t""'");
  }
  arg4 = static_cast< u_int32_t >(val4);
  {
    try {
      XmlManager_verifyContainer__SWIG_0(arg1,(std::string const &)*arg2,(char const *)arg3,arg4);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_verifyContainer__SWIG_1(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  std::string *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;

  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "verifyContainer" "', argument " "1"" of type '" "XmlManager *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "verifyContainer" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "verifyContainer" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "verifyContainer" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    try {
      XmlManager_verifyContainer__SWIG_0(arg1,(std::string const &)*arg2,(char const *)arg3);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE _wrap_XmlManager_verifyContainer(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;

  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_XmlManager_verifyContainer__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_XmlManager_verifyContainer__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }

fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'XmlManager_verifyContainer'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_createDocument(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  XmlDocument *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "createDocument" "', argument " "1"" of type '" "XmlManager *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  {
    try {
      result = (XmlDocument *)XmlManager_createDocument(arg1);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlDocument, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_createQueryContext__SWIG_0(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  enum XmlQueryContext::ReturnType arg2 ;
  enum XmlQueryContext::EvaluationType arg3 ;
  XmlQueryContext *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "createQueryContext" "', argument " "1"" of type '" "XmlManager *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "createQueryContext" "', argument " "2"" of type '" "enum XmlQueryContext::ReturnType""'");
  }
  arg2 = static_cast< enum XmlQueryContext::ReturnType >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "createQueryContext" "', argument " "3"" of type '" "enum XmlQueryContext::EvaluationType""'");
  }
  arg3 = static_cast< enum XmlQueryContext::EvaluationType >(val3);
  {
    try {
      result = (XmlQueryContext *)XmlManager_createQueryContext__SWIG_0(arg1,arg2,arg3);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlQueryContext, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_createQueryContext__SWIG_1(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  XmlQueryContext *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "createQueryContext" "', argument " "1"" of type '" "XmlManager *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  {
    try {
      result = (XmlQueryContext *)XmlManager_createQueryContext__SWIG_1(arg1);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlQueryContext, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_createQueryContext__SWIG_2(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  enum XmlQueryContext::ReturnType arg2 ;
  XmlQueryContext *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "createQueryContext" "', argument " "1"" of type '" "XmlManager *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "createQueryContext" "', argument " "2"" of type '" "enum XmlQueryContext::ReturnType""'");
  }
  arg2 = static_cast< enum XmlQueryContext::ReturnType >(val2);
  {
    try {
      result = (XmlQueryContext *)XmlManager_createQueryContext__SWIG_2(arg1,arg2);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlQueryContext, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_XmlManager_createQueryContext(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;

  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_XmlManager_createQueryContext__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_XmlManager_createQueryContext__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_XmlManager_createQueryContext__SWIG_0(nargs, args, self);
        }
      }
    }
  }

fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'XmlManager_createQueryContext'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_createUpdateContext(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  XmlUpdateContext *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "createUpdateContext" "', argument " "1"" of type '" "XmlManager *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  {
    try {
      result = (XmlUpdateContext *)XmlManager_createUpdateContext(arg1);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlUpdateContext, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_prepare__SWIG_0(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  std::string *arg2 = 0 ;
  XmlQueryContext *arg3 = 0 ;
  XmlQueryExpression *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prepare" "', argument " "1"" of type '" "XmlManager *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prepare" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prepare" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_XmlQueryContext,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "prepare" "', argument " "3"" of type '" "XmlQueryContext &""'");
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prepare" "', argument " "3"" of type '" "XmlQueryContext &""'");
  }
  arg3 = reinterpret_cast< XmlQueryContext * >(argp3);
  {
    try {
      result = (XmlQueryExpression *)XmlManager_prepare__SWIG_0(arg1,(std::string const &)*arg2,*arg3);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlQueryExpression, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_prepare__SWIG_1(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  XmlTransaction *arg2 = 0 ;
  std::string *arg3 = 0 ;
  XmlQueryContext *arg4 = 0 ;
  XmlQueryExpression *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "prepare" "', argument " "1"" of type '" "XmlManager *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlTransaction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "prepare" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prepare" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  arg2 = reinterpret_cast< XmlTransaction * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "prepare" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prepare" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_XmlQueryContext,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "prepare" "', argument " "4"" of type '" "XmlQueryContext &""'");
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "prepare" "', argument " "4"" of type '" "XmlQueryContext &""'");
  }
  arg4 = reinterpret_cast< XmlQueryContext * >(argp4);
  {
    try {
      result = (XmlQueryExpression *)XmlManager_prepare__SWIG_1(arg1,*arg2,(std::string const &)*arg3,*arg4);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlQueryExpression, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return vresult;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
}


SWIGINTERN VALUE _wrap_XmlManager_prepare(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;

  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_XmlQueryContext, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_XmlManager_prepare__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlTransaction, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_XmlQueryContext, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_XmlManager_prepare__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }

fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'XmlManager_prepare'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_query__SWIG_0(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  std::string *arg2 = 0 ;
  XmlQueryContext *arg3 = 0 ;
  u_int32_t arg4 ;
  XmlResults *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "query" "', argument " "1"" of type '" "XmlManager *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "query" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "query" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_XmlQueryContext,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "query" "', argument " "3"" of type '" "XmlQueryContext &""'");
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "query" "', argument " "3"" of type '" "XmlQueryContext &""'");
  }
  arg3 = reinterpret_cast< XmlQueryContext * >(argp3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "query" "', argument " "4"" of type '" "u_int32_t""'");
  }
  arg4 = static_cast< u_int32_t >(val4);
  {
    try {
      result = (XmlResults *)XmlManager_query__SWIG_0(arg1,(std::string const &)*arg2,*arg3,arg4);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlResults, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_query__SWIG_1(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  XmlTransaction *arg2 = 0 ;
  std::string *arg3 = 0 ;
  XmlQueryContext *arg4 = 0 ;
  u_int32_t arg5 ;
  XmlResults *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "query" "', argument " "1"" of type '" "XmlManager *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlTransaction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "query" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "query" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  arg2 = reinterpret_cast< XmlTransaction * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "query" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "query" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_XmlQueryContext,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "query" "', argument " "4"" of type '" "XmlQueryContext &""'");
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "query" "', argument " "4"" of type '" "XmlQueryContext &""'");
  }
  arg4 = reinterpret_cast< XmlQueryContext * >(argp4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "query" "', argument " "5"" of type '" "u_int32_t""'");
  }
  arg5 = static_cast< u_int32_t >(val5);
  {
    try {
      result = (XmlResults *)XmlManager_query__SWIG_1(arg1,*arg2,(std::string const &)*arg3,*arg4,arg5);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlResults, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return vresult;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_query__SWIG_2(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  std::string *arg2 = 0 ;
  XmlQueryContext *arg3 = 0 ;
  XmlResults *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "query" "', argument " "1"" of type '" "XmlManager *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "query" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "query" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_XmlQueryContext,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "query" "', argument " "3"" of type '" "XmlQueryContext &""'");
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "query" "', argument " "3"" of type '" "XmlQueryContext &""'");
  }
  arg3 = reinterpret_cast< XmlQueryContext * >(argp3);
  {
    try {
      result = (XmlResults *)XmlManager_query__SWIG_2(arg1,(std::string const &)*arg2,*arg3);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlResults, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_query__SWIG_3(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  XmlTransaction *arg2 = 0 ;
  std::string *arg3 = 0 ;
  XmlQueryContext *arg4 = 0 ;
  XmlResults *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "query" "', argument " "1"" of type '" "XmlManager *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlTransaction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "query" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "query" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  arg2 = reinterpret_cast< XmlTransaction * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "query" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "query" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_XmlQueryContext,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "query" "', argument " "4"" of type '" "XmlQueryContext &""'");
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "query" "', argument " "4"" of type '" "XmlQueryContext &""'");
  }
  arg4 = reinterpret_cast< XmlQueryContext * >(argp4);
  {
    try {
      result = (XmlResults *)XmlManager_query__SWIG_3(arg1,*arg2,(std::string const &)*arg3,*arg4);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlResults, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return vresult;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
}


SWIGINTERN VALUE _wrap_XmlManager_query(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;

  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_XmlQueryContext, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_XmlManager_query__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlTransaction, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_XmlQueryContext, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_XmlManager_query__SWIG_3(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_XmlQueryContext, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_XmlManager_query__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlTransaction, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_XmlQueryContext, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_XmlManager_query__SWIG_1(nargs, args, self);
            }
          }
        }
      }
    }
  }

fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'XmlManager_query'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_createResults(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  XmlResults *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "createResults" "', argument " "1"" of type '" "XmlManager *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  {
    try {
      result = (XmlResults *)XmlManager_createResults(arg1);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlResults, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_createModify(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  XmlModify *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "createModify" "', argument " "1"" of type '" "XmlManager *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  {
    try {
      result = (XmlModify *)XmlManager_createModify(arg1);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlModify, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_createTransaction__SWIG_0(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  DbTxn *arg2 = (DbTxn *) 0 ;
  XmlTransaction *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "createTransaction" "', argument " "1"" of type '" "XmlManager *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_DbTxn, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "createTransaction" "', argument " "2"" of type '" "DbTxn *""'");
  }
  arg2 = reinterpret_cast< DbTxn * >(argp2);
  {
    try {
      result = (XmlTransaction *)XmlManager_createTransaction__SWIG_0(arg1,arg2);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlTransaction, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_createTransaction__SWIG_1(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  u_int32_t arg2 ;
  XmlTransaction *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "createTransaction" "', argument " "1"" of type '" "XmlManager *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "createTransaction" "', argument " "2"" of type '" "u_int32_t""'");
  }
  arg2 = static_cast< u_int32_t >(val2);
  {
    try {
      result = (XmlTransaction *)XmlManager_createTransaction__SWIG_1(arg1,arg2);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlTransaction, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_createTransaction__SWIG_2(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  XmlTransaction *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "createTransaction" "', argument " "1"" of type '" "XmlManager *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  {
    try {
      result = (XmlTransaction *)XmlManager_createTransaction__SWIG_2(arg1);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlTransaction, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_XmlManager_createTransaction(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;

  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_XmlManager_createTransaction__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_DbTxn, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_XmlManager_createTransaction__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_XmlManager_createTransaction__SWIG_1(nargs, args, self);
      }
    }
  }

fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'XmlManager_createTransaction'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_createIndexLookup__SWIG_0(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  XmlContainer *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  XmlValue *arg6 = 0 ;
  enum XmlIndexLookup::Operation arg7 ;
  XmlIndexLookup *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  int res5 = SWIG_OLDOBJ ;
  void *argp6 ;
  int res6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "createIndexLookup" "', argument " "1"" of type '" "XmlManager *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlContainer,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "createIndexLookup" "', argument " "2"" of type '" "XmlContainer &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "createIndexLookup" "', argument " "2"" of type '" "XmlContainer &""'");
  }
  arg2 = reinterpret_cast< XmlContainer * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "createIndexLookup" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "createIndexLookup" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "createIndexLookup" "', argument " "4"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "createIndexLookup" "', argument " "4"" of type '" "std::string const &""'");
    }
    arg4 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(argv[3], &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "createIndexLookup" "', argument " "5"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "createIndexLookup" "', argument " "5"" of type '" "std::string const &""'");
    }
    arg5 = ptr;
  }
  res6 = SWIG_ConvertPtr(argv[4], &argp6, SWIGTYPE_p_XmlValue,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "createIndexLookup" "', argument " "6"" of type '" "XmlValue const &""'");
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "createIndexLookup" "', argument " "6"" of type '" "XmlValue const &""'");
  }
  arg6 = reinterpret_cast< XmlValue * >(argp6);
  ecode7 = SWIG_AsVal_int(argv[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "createIndexLookup" "', argument " "7"" of type '" "enum XmlIndexLookup::Operation""'");
  }
  arg7 = static_cast< enum XmlIndexLookup::Operation >(val7);
  {
    try {
      result = (XmlIndexLookup *)XmlManager_createIndexLookup__SWIG_0(arg1,*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(XmlValue const &)*arg6,arg7);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlIndexLookup, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return vresult;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_createIndexLookup__SWIG_1(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  XmlContainer *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  XmlValue *arg6 = 0 ;
  XmlIndexLookup *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  int res5 = SWIG_OLDOBJ ;
  void *argp6 ;
  int res6 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "createIndexLookup" "', argument " "1"" of type '" "XmlManager *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlContainer,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "createIndexLookup" "', argument " "2"" of type '" "XmlContainer &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "createIndexLookup" "', argument " "2"" of type '" "XmlContainer &""'");
  }
  arg2 = reinterpret_cast< XmlContainer * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "createIndexLookup" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "createIndexLookup" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "createIndexLookup" "', argument " "4"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "createIndexLookup" "', argument " "4"" of type '" "std::string const &""'");
    }
    arg4 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(argv[3], &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "createIndexLookup" "', argument " "5"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "createIndexLookup" "', argument " "5"" of type '" "std::string const &""'");
    }
    arg5 = ptr;
  }
  res6 = SWIG_ConvertPtr(argv[4], &argp6, SWIGTYPE_p_XmlValue,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "createIndexLookup" "', argument " "6"" of type '" "XmlValue const &""'");
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "createIndexLookup" "', argument " "6"" of type '" "XmlValue const &""'");
  }
  arg6 = reinterpret_cast< XmlValue * >(argp6);
  {
    try {
      result = (XmlIndexLookup *)XmlManager_createIndexLookup__SWIG_0(arg1,*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(XmlValue const &)*arg6);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlIndexLookup, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return vresult;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_createIndexLookup__SWIG_2(int argc, VALUE *argv, VALUE self) {
  XmlManager *arg1 = (XmlManager *) 0 ;
  XmlContainer *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  XmlIndexLookup *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  int res5 = SWIG_OLDOBJ ;
  VALUE vresult = Qnil;

  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "createIndexLookup" "', argument " "1"" of type '" "XmlManager *""'");
  }
  arg1 = reinterpret_cast< XmlManager * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlContainer,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "createIndexLookup" "', argument " "2"" of type '" "XmlContainer &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "createIndexLookup" "', argument " "2"" of type '" "XmlContainer &""'");
  }
  arg2 = reinterpret_cast< XmlContainer * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "createIndexLookup" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "createIndexLookup" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "createIndexLookup" "', argument " "4"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "createIndexLookup" "', argument " "4"" of type '" "std::string const &""'");
    }
    arg4 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(argv[3], &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "createIndexLookup" "', argument " "5"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "createIndexLookup" "', argument " "5"" of type '" "std::string const &""'");
    }
    arg5 = ptr;
  }
  {
    try {
      result = (XmlIndexLookup *)XmlManager_createIndexLookup__SWIG_0(arg1,*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlIndexLookup, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return vresult;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return Qnil;
}


SWIGINTERN VALUE _wrap_XmlManager_createIndexLookup(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[8];
  int ii;

  argc = nargs + 1;
  argv[0] = self;
  if (argc > 8) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlContainer, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_XmlManager_createIndexLookup__SWIG_2(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlContainer, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_XmlValue, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_XmlManager_createIndexLookup__SWIG_1(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlContainer, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_XmlValue, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                {
                  int res = SWIG_AsVal_int(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_XmlManager_createIndexLookup__SWIG_0(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }

fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'XmlManager_createIndexLookup'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_setLogLevel(int argc, VALUE *argv, VALUE self) {
  enum LogLevel arg1 ;
  bool arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;

  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "XmlManager_setLogLevel" "', argument " "1"" of type '" "enum LogLevel""'");
  }
  arg1 = static_cast< enum LogLevel >(val1);
  ecode2 = SWIG_AsVal_bool(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "XmlManager_setLogLevel" "', argument " "2"" of type '" "bool""'");
  }
  arg2 = static_cast< bool >(val2);
  {
    try {
      XmlManager_setLogLevel(arg1,arg2);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_setLogCategory(int argc, VALUE *argv, VALUE self) {
  enum LogCategory arg1 ;
  bool arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;

  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "XmlManager_setLogCategory" "', argument " "1"" of type '" "enum LogCategory""'");
  }
  arg1 = static_cast< enum LogCategory >(val1);
  ecode2 = SWIG_AsVal_bool(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "XmlManager_setLogCategory" "', argument " "2"" of type '" "bool""'");
  }
  arg2 = static_cast< bool >(val2);
  {
    try {
      XmlManager_setLogCategory(arg1,arg2);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_get_version_major(int argc, VALUE *argv, VALUE self) {
  int result;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (int)XmlManager_get_version_major();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_get_version_minor(int argc, VALUE *argv, VALUE self) {
  int result;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (int)XmlManager_get_version_minor();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_get_version_patch(int argc, VALUE *argv, VALUE self) {
  int result;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (int)XmlManager_get_version_patch();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlManager_get_version_string(int argc, VALUE *argv, VALUE self) {
  char *result = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (char *)XmlManager_get_version_string();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}


swig_class cXmlIndexLookup;

SWIGINTERN VALUE
_wrap_new_XmlIndexLookup__SWIG_0(int argc, VALUE *argv, VALUE self) {
  XmlIndexLookup *result = 0 ;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (XmlIndexLookup *)new XmlIndexLookup();DATA_PTR(self) = result;

    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_XmlIndexLookup_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_XmlIndexLookup_allocate(int argc, VALUE *argv, VALUE self) {
#endif


    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_XmlIndexLookup);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }


SWIGINTERN VALUE
_wrap_new_XmlIndexLookup__SWIG_1(int argc, VALUE *argv, VALUE self) {
  XmlIndexLookup *arg1 = 0 ;
  XmlIndexLookup *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_XmlIndexLookup,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XmlIndexLookup" "', argument " "1"" of type '" "XmlIndexLookup const &""'");
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XmlIndexLookup" "', argument " "1"" of type '" "XmlIndexLookup const &""'");
  }
  arg1 = reinterpret_cast< XmlIndexLookup * >(argp1);
  {
    try {
      result = (XmlIndexLookup *)new XmlIndexLookup((XmlIndexLookup const &)*arg1);DATA_PTR(self) = result;

    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_XmlIndexLookup(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;

  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ii++) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_XmlIndexLookup__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlIndexLookup, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_XmlIndexLookup__SWIG_1(nargs, args, self);
    }
  }

fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'new_XmlIndexLookup'");
  return Qnil;
}


SWIGINTERN void
free_XmlIndexLookup(XmlIndexLookup *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_XmlIndexLookup_isNull(int argc, VALUE *argv, VALUE self) {
  XmlIndexLookup *arg1 = (XmlIndexLookup *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlIndexLookup, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "isNull" "', argument " "1"" of type '" "XmlIndexLookup const *""'");
  }
  arg1 = reinterpret_cast< XmlIndexLookup * >(argp1);
  {
    try {
      result = (bool)((XmlIndexLookup const *)arg1)->isNull();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlIndexLookup_getIndex(int argc, VALUE *argv, VALUE self) {
  XmlIndexLookup *arg1 = (XmlIndexLookup *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlIndexLookup, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getIndex" "', argument " "1"" of type '" "XmlIndexLookup const *""'");
  }
  arg1 = reinterpret_cast< XmlIndexLookup * >(argp1);
  {
    try {
      {
        std::string const &_result_ref = ((XmlIndexLookup const *)arg1)->getIndex();
        result = (std::string *) &_result_ref;
      }
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_std_string(static_cast< std::string >(*result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlIndexLookup_setIndex(int argc, VALUE *argv, VALUE self) {
  XmlIndexLookup *arg1 = (XmlIndexLookup *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlIndexLookup, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setIndex" "', argument " "1"" of type '" "XmlIndexLookup *""'");
  }
  arg1 = reinterpret_cast< XmlIndexLookup * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "setIndex" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "setIndex" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->setIndex((std::string const &)*arg2);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlIndexLookup_getNodeURI(int argc, VALUE *argv, VALUE self) {
  XmlIndexLookup *arg1 = (XmlIndexLookup *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlIndexLookup, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getNodeURI" "', argument " "1"" of type '" "XmlIndexLookup const *""'");
  }
  arg1 = reinterpret_cast< XmlIndexLookup * >(argp1);
  {
    try {
      {
        std::string const &_result_ref = ((XmlIndexLookup const *)arg1)->getNodeURI();
        result = (std::string *) &_result_ref;
      }
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_std_string(static_cast< std::string >(*result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlIndexLookup_getNodeName(int argc, VALUE *argv, VALUE self) {
  XmlIndexLookup *arg1 = (XmlIndexLookup *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlIndexLookup, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getNodeName" "', argument " "1"" of type '" "XmlIndexLookup const *""'");
  }
  arg1 = reinterpret_cast< XmlIndexLookup * >(argp1);
  {
    try {
      {
        std::string const &_result_ref = ((XmlIndexLookup const *)arg1)->getNodeName();
        result = (std::string *) &_result_ref;
      }
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_std_string(static_cast< std::string >(*result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlIndexLookup_setNode(int argc, VALUE *argv, VALUE self) {
  XmlIndexLookup *arg1 = (XmlIndexLookup *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;

  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlIndexLookup, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setNode" "', argument " "1"" of type '" "XmlIndexLookup *""'");
  }
  arg1 = reinterpret_cast< XmlIndexLookup * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "setNode" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "setNode" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "setNode" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "setNode" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->setNode((std::string const &)*arg2,(std::string const &)*arg3);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlIndexLookup_getParentURI(int argc, VALUE *argv, VALUE self) {
  XmlIndexLookup *arg1 = (XmlIndexLookup *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlIndexLookup, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getParentURI" "', argument " "1"" of type '" "XmlIndexLookup const *""'");
  }
  arg1 = reinterpret_cast< XmlIndexLookup * >(argp1);
  {
    try {
      {
        std::string const &_result_ref = ((XmlIndexLookup const *)arg1)->getParentURI();
        result = (std::string *) &_result_ref;
      }
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_std_string(static_cast< std::string >(*result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlIndexLookup_getParentName(int argc, VALUE *argv, VALUE self) {
  XmlIndexLookup *arg1 = (XmlIndexLookup *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlIndexLookup, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getParentName" "', argument " "1"" of type '" "XmlIndexLookup const *""'");
  }
  arg1 = reinterpret_cast< XmlIndexLookup * >(argp1);
  {
    try {
      {
        std::string const &_result_ref = ((XmlIndexLookup const *)arg1)->getParentName();
        result = (std::string *) &_result_ref;
      }
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_std_string(static_cast< std::string >(*result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlIndexLookup_setParent(int argc, VALUE *argv, VALUE self) {
  XmlIndexLookup *arg1 = (XmlIndexLookup *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;

  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlIndexLookup, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setParent" "', argument " "1"" of type '" "XmlIndexLookup *""'");
  }
  arg1 = reinterpret_cast< XmlIndexLookup * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "setParent" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "setParent" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "setParent" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "setParent" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->setParent((std::string const &)*arg2,(std::string const &)*arg3);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlIndexLookup_getLowBoundValue(int argc, VALUE *argv, VALUE self) {
  XmlIndexLookup *arg1 = (XmlIndexLookup *) 0 ;
  XmlValue *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlIndexLookup, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getLowBoundValue" "', argument " "1"" of type '" "XmlIndexLookup const *""'");
  }
  arg1 = reinterpret_cast< XmlIndexLookup * >(argp1);
  {
    try {
      {
        XmlValue const &_result_ref = ((XmlIndexLookup const *)arg1)->getLowBoundValue();
        result = (XmlValue *) &_result_ref;
      }
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlValue, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlIndexLookup_getLowBoundOperation(int argc, VALUE *argv, VALUE self) {
  XmlIndexLookup *arg1 = (XmlIndexLookup *) 0 ;
  enum XmlIndexLookup::Operation result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlIndexLookup, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getLowBoundOperation" "', argument " "1"" of type '" "XmlIndexLookup const *""'");
  }
  arg1 = reinterpret_cast< XmlIndexLookup * >(argp1);
  {
    try {
      result = (enum XmlIndexLookup::Operation)((XmlIndexLookup const *)arg1)->getLowBoundOperation();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlIndexLookup_setLowBound(int argc, VALUE *argv, VALUE self) {
  XmlIndexLookup *arg1 = (XmlIndexLookup *) 0 ;
  XmlValue *arg2 = 0 ;
  enum XmlIndexLookup::Operation arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;

  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlIndexLookup, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setLowBound" "', argument " "1"" of type '" "XmlIndexLookup *""'");
  }
  arg1 = reinterpret_cast< XmlIndexLookup * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlValue,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "setLowBound" "', argument " "2"" of type '" "XmlValue const &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "setLowBound" "', argument " "2"" of type '" "XmlValue const &""'");
  }
  arg2 = reinterpret_cast< XmlValue * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "setLowBound" "', argument " "3"" of type '" "enum XmlIndexLookup::Operation""'");
  }
  arg3 = static_cast< enum XmlIndexLookup::Operation >(val3);
  {
    try {
      (arg1)->setLowBound((XmlValue const &)*arg2,arg3);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlIndexLookup_getHighBoundValue(int argc, VALUE *argv, VALUE self) {
  XmlIndexLookup *arg1 = (XmlIndexLookup *) 0 ;
  XmlValue *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlIndexLookup, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getHighBoundValue" "', argument " "1"" of type '" "XmlIndexLookup const *""'");
  }
  arg1 = reinterpret_cast< XmlIndexLookup * >(argp1);
  {
    try {
      {
        XmlValue const &_result_ref = ((XmlIndexLookup const *)arg1)->getHighBoundValue();
        result = (XmlValue *) &_result_ref;
      }
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlValue, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlIndexLookup_getHighBoundOperation(int argc, VALUE *argv, VALUE self) {
  XmlIndexLookup *arg1 = (XmlIndexLookup *) 0 ;
  enum XmlIndexLookup::Operation result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlIndexLookup, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getHighBoundOperation" "', argument " "1"" of type '" "XmlIndexLookup const *""'");
  }
  arg1 = reinterpret_cast< XmlIndexLookup * >(argp1);
  {
    try {
      result = (enum XmlIndexLookup::Operation)((XmlIndexLookup const *)arg1)->getHighBoundOperation();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlIndexLookup_setHighBound(int argc, VALUE *argv, VALUE self) {
  XmlIndexLookup *arg1 = (XmlIndexLookup *) 0 ;
  XmlValue *arg2 = 0 ;
  enum XmlIndexLookup::Operation arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;

  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlIndexLookup, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setHighBound" "', argument " "1"" of type '" "XmlIndexLookup *""'");
  }
  arg1 = reinterpret_cast< XmlIndexLookup * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlValue,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "setHighBound" "', argument " "2"" of type '" "XmlValue const &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "setHighBound" "', argument " "2"" of type '" "XmlValue const &""'");
  }
  arg2 = reinterpret_cast< XmlValue * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "setHighBound" "', argument " "3"" of type '" "enum XmlIndexLookup::Operation""'");
  }
  arg3 = static_cast< enum XmlIndexLookup::Operation >(val3);
  {
    try {
      (arg1)->setHighBound((XmlValue const &)*arg2,arg3);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlIndexLookup_getContainer(int argc, VALUE *argv, VALUE self) {
  XmlIndexLookup *arg1 = (XmlIndexLookup *) 0 ;
  XmlContainer *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlIndexLookup, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getContainer" "', argument " "1"" of type '" "XmlIndexLookup const *""'");
  }
  arg1 = reinterpret_cast< XmlIndexLookup * >(argp1);
  {
    try {
      {
        XmlContainer const &_result_ref = ((XmlIndexLookup const *)arg1)->getContainer();
        result = (XmlContainer *) &_result_ref;
      }
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlContainer, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlIndexLookup_setContainer(int argc, VALUE *argv, VALUE self) {
  XmlIndexLookup *arg1 = (XmlIndexLookup *) 0 ;
  XmlContainer *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlIndexLookup, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setContainer" "', argument " "1"" of type '" "XmlIndexLookup *""'");
  }
  arg1 = reinterpret_cast< XmlIndexLookup * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlContainer,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "setContainer" "', argument " "2"" of type '" "XmlContainer &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "setContainer" "', argument " "2"" of type '" "XmlContainer &""'");
  }
  arg2 = reinterpret_cast< XmlContainer * >(argp2);
  {
    try {
      (arg1)->setContainer(*arg2);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlIndexLookup_execute__SWIG_0(int argc, VALUE *argv, VALUE self) {
  XmlIndexLookup *arg1 = (XmlIndexLookup *) 0 ;
  XmlQueryContext *arg2 = 0 ;
  u_int32_t arg3 ;
  XmlResults *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlIndexLookup, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "execute" "', argument " "1"" of type '" "XmlIndexLookup const *""'");
  }
  arg1 = reinterpret_cast< XmlIndexLookup * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlQueryContext,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "execute" "', argument " "2"" of type '" "XmlQueryContext &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "execute" "', argument " "2"" of type '" "XmlQueryContext &""'");
  }
  arg2 = reinterpret_cast< XmlQueryContext * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "execute" "', argument " "3"" of type '" "u_int32_t""'");
  }
  arg3 = static_cast< u_int32_t >(val3);
  {
    try {
      result = (XmlResults *)XmlIndexLookup_execute__SWIG_0((XmlIndexLookup const *)arg1,*arg2,arg3);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlResults, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlIndexLookup_execute__SWIG_1(int argc, VALUE *argv, VALUE self) {
  XmlIndexLookup *arg1 = (XmlIndexLookup *) 0 ;
  XmlQueryContext *arg2 = 0 ;
  XmlResults *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlIndexLookup, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "execute" "', argument " "1"" of type '" "XmlIndexLookup const *""'");
  }
  arg1 = reinterpret_cast< XmlIndexLookup * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlQueryContext,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "execute" "', argument " "2"" of type '" "XmlQueryContext &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "execute" "', argument " "2"" of type '" "XmlQueryContext &""'");
  }
  arg2 = reinterpret_cast< XmlQueryContext * >(argp2);
  {
    try {
      result = (XmlResults *)XmlIndexLookup_execute__SWIG_0((XmlIndexLookup const *)arg1,*arg2);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlResults, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlIndexLookup_execute__SWIG_2(int argc, VALUE *argv, VALUE self) {
  XmlIndexLookup *arg1 = (XmlIndexLookup *) 0 ;
  XmlTransaction *arg2 = 0 ;
  XmlQueryContext *arg3 = 0 ;
  u_int32_t arg4 ;
  XmlResults *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlIndexLookup, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "execute" "', argument " "1"" of type '" "XmlIndexLookup const *""'");
  }
  arg1 = reinterpret_cast< XmlIndexLookup * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlTransaction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "execute" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "execute" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  arg2 = reinterpret_cast< XmlTransaction * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_XmlQueryContext,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "execute" "', argument " "3"" of type '" "XmlQueryContext &""'");
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "execute" "', argument " "3"" of type '" "XmlQueryContext &""'");
  }
  arg3 = reinterpret_cast< XmlQueryContext * >(argp3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "execute" "', argument " "4"" of type '" "u_int32_t""'");
  }
  arg4 = static_cast< u_int32_t >(val4);
  {
    try {
      result = (XmlResults *)XmlIndexLookup_execute__SWIG_2((XmlIndexLookup const *)arg1,*arg2,*arg3,arg4);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlResults, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlIndexLookup_execute__SWIG_3(int argc, VALUE *argv, VALUE self) {
  XmlIndexLookup *arg1 = (XmlIndexLookup *) 0 ;
  XmlTransaction *arg2 = 0 ;
  XmlQueryContext *arg3 = 0 ;
  XmlResults *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlIndexLookup, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "execute" "', argument " "1"" of type '" "XmlIndexLookup const *""'");
  }
  arg1 = reinterpret_cast< XmlIndexLookup * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlTransaction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "execute" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "execute" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  arg2 = reinterpret_cast< XmlTransaction * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_XmlQueryContext,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "execute" "', argument " "3"" of type '" "XmlQueryContext &""'");
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "execute" "', argument " "3"" of type '" "XmlQueryContext &""'");
  }
  arg3 = reinterpret_cast< XmlQueryContext * >(argp3);
  {
    try {
      result = (XmlResults *)XmlIndexLookup_execute__SWIG_2((XmlIndexLookup const *)arg1,*arg2,*arg3);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlResults, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_XmlIndexLookup_execute(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;

  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlIndexLookup, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlQueryContext, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_XmlIndexLookup_execute__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlIndexLookup, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlQueryContext, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_XmlIndexLookup_execute__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlIndexLookup, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlTransaction, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_XmlQueryContext, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_XmlIndexLookup_execute__SWIG_3(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlIndexLookup, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlTransaction, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_XmlQueryContext, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_XmlIndexLookup_execute__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }

fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'XmlIndexLookup_execute'");
  return Qnil;
}


swig_class cXmlContainer;

SWIGINTERN VALUE
_wrap_new_XmlContainer__SWIG_0(int argc, VALUE *argv, VALUE self) {
  XmlContainer *result = 0 ;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (XmlContainer *)new XmlContainer();DATA_PTR(self) = result;

    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_XmlContainer_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_XmlContainer_allocate(int argc, VALUE *argv, VALUE self) {
#endif


    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_XmlContainer);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }


SWIGINTERN VALUE
_wrap_new_XmlContainer__SWIG_1(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = 0 ;
  XmlContainer *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_XmlContainer,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XmlContainer" "', argument " "1"" of type '" "XmlContainer const &""'");
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XmlContainer" "', argument " "1"" of type '" "XmlContainer const &""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  {
    try {
      result = (XmlContainer *)new XmlContainer((XmlContainer const &)*arg1);DATA_PTR(self) = result;

    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_XmlContainer(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;

  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ii++) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_XmlContainer__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_XmlContainer__SWIG_1(nargs, args, self);
    }
  }

fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'new_XmlContainer'");
  return Qnil;
}


SWIGINTERN void
free_XmlContainer(XmlContainer *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_XmlContainer_sync(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sync" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  {
    try {
      (arg1)->sync();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_close(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "close" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  {
    try {
      (arg1)->close();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_getFlags(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  u_int32_t result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getFlags" "', argument " "1"" of type '" "XmlContainer const *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  {
    try {
      result = ((XmlContainer const *)arg1)->getFlags();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_addAlias(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  VALUE vresult = Qnil;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "addAlias" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "addAlias" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "addAlias" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)(arg1)->addAlias((std::string const &)*arg2);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_removeAlias(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  VALUE vresult = Qnil;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "removeAlias" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "removeAlias" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "removeAlias" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)(arg1)->removeAlias((std::string const &)*arg2);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_getManager(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  XmlManager *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getManager" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  {
    try {
      {
        XmlManager &_result_ref = (arg1)->getManager();
        result = (XmlManager *) &_result_ref;
      }
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlManager, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_getName(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getName" "', argument " "1"" of type '" "XmlContainer const *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  {
    try {
      {
        std::string const &_result_ref = ((XmlContainer const *)arg1)->getName();
        result = (std::string *) &_result_ref;
      }
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_std_string(static_cast< std::string >(*result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_getContainerType(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  enum XmlContainer::ContainerType result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getContainerType" "', argument " "1"" of type '" "XmlContainer const *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  {
    try {
      result = (enum XmlContainer::ContainerType)((XmlContainer const *)arg1)->getContainerType();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_getIndexNodes(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getIndexNodes" "', argument " "1"" of type '" "XmlContainer const *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  {
    try {
      result = (bool)((XmlContainer const *)arg1)->getIndexNodes();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_getPageSize(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  u_int32_t result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getPageSize" "', argument " "1"" of type '" "XmlContainer const *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  {
    try {
      result = ((XmlContainer const *)arg1)->getPageSize();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_setIndexSpecification__SWIG_0(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  XmlIndexSpecification *arg2 = 0 ;
  XmlUpdateContext *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;

  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setIndexSpecification" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlIndexSpecification,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "setIndexSpecification" "', argument " "2"" of type '" "XmlIndexSpecification const &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "setIndexSpecification" "', argument " "2"" of type '" "XmlIndexSpecification const &""'");
  }
  arg2 = reinterpret_cast< XmlIndexSpecification * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_XmlUpdateContext,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "setIndexSpecification" "', argument " "3"" of type '" "XmlUpdateContext &""'");
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "setIndexSpecification" "', argument " "3"" of type '" "XmlUpdateContext &""'");
  }
  arg3 = reinterpret_cast< XmlUpdateContext * >(argp3);
  {
    try {
      (arg1)->setIndexSpecification((XmlIndexSpecification const &)*arg2,*arg3);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_addIndex__SWIG_0(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  XmlUpdateContext *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  void *argp5 = 0 ;
  int res5 = 0 ;

  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "addIndex" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "addIndex" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "addIndex" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "addIndex" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "addIndex" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "addIndex" "', argument " "4"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "addIndex" "', argument " "4"" of type '" "std::string const &""'");
    }
    arg4 = ptr;
  }
  res5 = SWIG_ConvertPtr(argv[3], &argp5, SWIGTYPE_p_XmlUpdateContext,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "addIndex" "', argument " "5"" of type '" "XmlUpdateContext &""'");
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "addIndex" "', argument " "5"" of type '" "XmlUpdateContext &""'");
  }
  arg5 = reinterpret_cast< XmlUpdateContext * >(argp5);
  {
    try {
      (arg1)->addIndex((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,*arg5);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_addIndex__SWIG_1(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  enum XmlIndexSpecification::Type arg4 ;
  enum XmlValue::Type arg5 ;
  XmlUpdateContext *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;

  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "addIndex" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "addIndex" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "addIndex" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "addIndex" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "addIndex" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "addIndex" "', argument " "4"" of type '" "enum XmlIndexSpecification::Type""'");
  }
  arg4 = static_cast< enum XmlIndexSpecification::Type >(val4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "addIndex" "', argument " "5"" of type '" "enum XmlValue::Type""'");
  }
  arg5 = static_cast< enum XmlValue::Type >(val5);
  res6 = SWIG_ConvertPtr(argv[4], &argp6, SWIGTYPE_p_XmlUpdateContext,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "addIndex" "', argument " "6"" of type '" "XmlUpdateContext &""'");
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "addIndex" "', argument " "6"" of type '" "XmlUpdateContext &""'");
  }
  arg6 = reinterpret_cast< XmlUpdateContext * >(argp6);
  {
    try {
      (arg1)->addIndex((std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5,*arg6);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_deleteIndex__SWIG_0(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  XmlUpdateContext *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  void *argp5 = 0 ;
  int res5 = 0 ;

  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "deleteIndex" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "deleteIndex" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "deleteIndex" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "deleteIndex" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "deleteIndex" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "deleteIndex" "', argument " "4"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "deleteIndex" "', argument " "4"" of type '" "std::string const &""'");
    }
    arg4 = ptr;
  }
  res5 = SWIG_ConvertPtr(argv[3], &argp5, SWIGTYPE_p_XmlUpdateContext,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "deleteIndex" "', argument " "5"" of type '" "XmlUpdateContext &""'");
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "deleteIndex" "', argument " "5"" of type '" "XmlUpdateContext &""'");
  }
  arg5 = reinterpret_cast< XmlUpdateContext * >(argp5);
  {
    try {
      (arg1)->deleteIndex((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,*arg5);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_replaceIndex__SWIG_0(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  XmlUpdateContext *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  void *argp5 = 0 ;
  int res5 = 0 ;

  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "replaceIndex" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "replaceIndex" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "replaceIndex" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "replaceIndex" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "replaceIndex" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "replaceIndex" "', argument " "4"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "replaceIndex" "', argument " "4"" of type '" "std::string const &""'");
    }
    arg4 = ptr;
  }
  res5 = SWIG_ConvertPtr(argv[3], &argp5, SWIGTYPE_p_XmlUpdateContext,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "replaceIndex" "', argument " "5"" of type '" "XmlUpdateContext &""'");
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "replaceIndex" "', argument " "5"" of type '" "XmlUpdateContext &""'");
  }
  arg5 = reinterpret_cast< XmlUpdateContext * >(argp5);
  {
    try {
      (arg1)->replaceIndex((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,*arg5);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_addDefaultIndex__SWIG_0(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  std::string *arg2 = 0 ;
  XmlUpdateContext *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;

  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "addDefaultIndex" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "addDefaultIndex" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "addDefaultIndex" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_XmlUpdateContext,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "addDefaultIndex" "', argument " "3"" of type '" "XmlUpdateContext &""'");
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "addDefaultIndex" "', argument " "3"" of type '" "XmlUpdateContext &""'");
  }
  arg3 = reinterpret_cast< XmlUpdateContext * >(argp3);
  {
    try {
      (arg1)->addDefaultIndex((std::string const &)*arg2,*arg3);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_deleteDefaultIndex__SWIG_0(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  std::string *arg2 = 0 ;
  XmlUpdateContext *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;

  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "deleteDefaultIndex" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "deleteDefaultIndex" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "deleteDefaultIndex" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_XmlUpdateContext,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "deleteDefaultIndex" "', argument " "3"" of type '" "XmlUpdateContext &""'");
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "deleteDefaultIndex" "', argument " "3"" of type '" "XmlUpdateContext &""'");
  }
  arg3 = reinterpret_cast< XmlUpdateContext * >(argp3);
  {
    try {
      (arg1)->deleteDefaultIndex((std::string const &)*arg2,*arg3);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_replaceDefaultIndex__SWIG_0(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  std::string *arg2 = 0 ;
  XmlUpdateContext *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;

  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "replaceDefaultIndex" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "replaceDefaultIndex" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "replaceDefaultIndex" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_XmlUpdateContext,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "replaceDefaultIndex" "', argument " "3"" of type '" "XmlUpdateContext &""'");
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "replaceDefaultIndex" "', argument " "3"" of type '" "XmlUpdateContext &""'");
  }
  arg3 = reinterpret_cast< XmlUpdateContext * >(argp3);
  {
    try {
      (arg1)->replaceDefaultIndex((std::string const &)*arg2,*arg3);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_setIndexSpecification__SWIG_1(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  XmlTransaction *arg2 = 0 ;
  XmlIndexSpecification *arg3 = 0 ;
  XmlUpdateContext *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;

  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setIndexSpecification" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlTransaction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "setIndexSpecification" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "setIndexSpecification" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  arg2 = reinterpret_cast< XmlTransaction * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_XmlIndexSpecification,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "setIndexSpecification" "', argument " "3"" of type '" "XmlIndexSpecification const &""'");
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "setIndexSpecification" "', argument " "3"" of type '" "XmlIndexSpecification const &""'");
  }
  arg3 = reinterpret_cast< XmlIndexSpecification * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_XmlUpdateContext,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "setIndexSpecification" "', argument " "4"" of type '" "XmlUpdateContext &""'");
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "setIndexSpecification" "', argument " "4"" of type '" "XmlUpdateContext &""'");
  }
  arg4 = reinterpret_cast< XmlUpdateContext * >(argp4);
  {
    try {
      (arg1)->setIndexSpecification(*arg2,(XmlIndexSpecification const &)*arg3,*arg4);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_XmlContainer_setIndexSpecification(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;

  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlIndexSpecification, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_XmlUpdateContext, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_XmlContainer_setIndexSpecification__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlTransaction, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_XmlIndexSpecification, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_XmlUpdateContext, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_XmlContainer_setIndexSpecification__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }

fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'XmlContainer_setIndexSpecification'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_addIndex__SWIG_2(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  XmlTransaction *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  XmlUpdateContext *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  int res5 = SWIG_OLDOBJ ;
  void *argp6 = 0 ;
  int res6 = 0 ;

  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "addIndex" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlTransaction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "addIndex" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "addIndex" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  arg2 = reinterpret_cast< XmlTransaction * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "addIndex" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "addIndex" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "addIndex" "', argument " "4"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "addIndex" "', argument " "4"" of type '" "std::string const &""'");
    }
    arg4 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(argv[3], &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "addIndex" "', argument " "5"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "addIndex" "', argument " "5"" of type '" "std::string const &""'");
    }
    arg5 = ptr;
  }
  res6 = SWIG_ConvertPtr(argv[4], &argp6, SWIGTYPE_p_XmlUpdateContext,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "addIndex" "', argument " "6"" of type '" "XmlUpdateContext &""'");
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "addIndex" "', argument " "6"" of type '" "XmlUpdateContext &""'");
  }
  arg6 = reinterpret_cast< XmlUpdateContext * >(argp6);
  {
    try {
      (arg1)->addIndex(*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,*arg6);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_addIndex__SWIG_3(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  XmlTransaction *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  enum XmlIndexSpecification::Type arg5 ;
  enum XmlValue::Type arg6 ;
  XmlUpdateContext *arg7 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;

  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "addIndex" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlTransaction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "addIndex" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "addIndex" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  arg2 = reinterpret_cast< XmlTransaction * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "addIndex" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "addIndex" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "addIndex" "', argument " "4"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "addIndex" "', argument " "4"" of type '" "std::string const &""'");
    }
    arg4 = ptr;
  }
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "addIndex" "', argument " "5"" of type '" "enum XmlIndexSpecification::Type""'");
  }
  arg5 = static_cast< enum XmlIndexSpecification::Type >(val5);
  ecode6 = SWIG_AsVal_int(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "addIndex" "', argument " "6"" of type '" "enum XmlValue::Type""'");
  }
  arg6 = static_cast< enum XmlValue::Type >(val6);
  res7 = SWIG_ConvertPtr(argv[5], &argp7, SWIGTYPE_p_XmlUpdateContext,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "addIndex" "', argument " "7"" of type '" "XmlUpdateContext &""'");
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "addIndex" "', argument " "7"" of type '" "XmlUpdateContext &""'");
  }
  arg7 = reinterpret_cast< XmlUpdateContext * >(argp7);
  {
    try {
      (arg1)->addIndex(*arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5,arg6,*arg7);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return Qnil;
}


SWIGINTERN VALUE _wrap_XmlContainer_addIndex(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[8];
  int ii;

  argc = nargs + 1;
  argv[0] = self;
  if (argc > 8) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_XmlUpdateContext, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_XmlContainer_addIndex__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlTransaction, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_XmlUpdateContext, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_XmlContainer_addIndex__SWIG_2(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_XmlUpdateContext, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_XmlContainer_addIndex__SWIG_1(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlTransaction, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_XmlUpdateContext, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_XmlContainer_addIndex__SWIG_3(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }

fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'XmlContainer_addIndex'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_deleteIndex__SWIG_1(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  XmlTransaction *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  XmlUpdateContext *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  int res5 = SWIG_OLDOBJ ;
  void *argp6 = 0 ;
  int res6 = 0 ;

  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "deleteIndex" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlTransaction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "deleteIndex" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "deleteIndex" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  arg2 = reinterpret_cast< XmlTransaction * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "deleteIndex" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "deleteIndex" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "deleteIndex" "', argument " "4"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "deleteIndex" "', argument " "4"" of type '" "std::string const &""'");
    }
    arg4 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(argv[3], &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "deleteIndex" "', argument " "5"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "deleteIndex" "', argument " "5"" of type '" "std::string const &""'");
    }
    arg5 = ptr;
  }
  res6 = SWIG_ConvertPtr(argv[4], &argp6, SWIGTYPE_p_XmlUpdateContext,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "deleteIndex" "', argument " "6"" of type '" "XmlUpdateContext &""'");
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "deleteIndex" "', argument " "6"" of type '" "XmlUpdateContext &""'");
  }
  arg6 = reinterpret_cast< XmlUpdateContext * >(argp6);
  {
    try {
      (arg1)->deleteIndex(*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,*arg6);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return Qnil;
}


SWIGINTERN VALUE _wrap_XmlContainer_deleteIndex(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[7];
  int ii;

  argc = nargs + 1;
  argv[0] = self;
  if (argc > 7) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_XmlUpdateContext, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_XmlContainer_deleteIndex__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlTransaction, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_XmlUpdateContext, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_XmlContainer_deleteIndex__SWIG_1(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }

fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'XmlContainer_deleteIndex'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_replaceIndex__SWIG_1(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  XmlTransaction *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  XmlUpdateContext *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  int res5 = SWIG_OLDOBJ ;
  void *argp6 = 0 ;
  int res6 = 0 ;

  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "replaceIndex" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlTransaction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "replaceIndex" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "replaceIndex" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  arg2 = reinterpret_cast< XmlTransaction * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "replaceIndex" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "replaceIndex" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "replaceIndex" "', argument " "4"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "replaceIndex" "', argument " "4"" of type '" "std::string const &""'");
    }
    arg4 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(argv[3], &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "replaceIndex" "', argument " "5"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "replaceIndex" "', argument " "5"" of type '" "std::string const &""'");
    }
    arg5 = ptr;
  }
  res6 = SWIG_ConvertPtr(argv[4], &argp6, SWIGTYPE_p_XmlUpdateContext,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "replaceIndex" "', argument " "6"" of type '" "XmlUpdateContext &""'");
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "replaceIndex" "', argument " "6"" of type '" "XmlUpdateContext &""'");
  }
  arg6 = reinterpret_cast< XmlUpdateContext * >(argp6);
  {
    try {
      (arg1)->replaceIndex(*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,*arg6);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return Qnil;
}


SWIGINTERN VALUE _wrap_XmlContainer_replaceIndex(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[7];
  int ii;

  argc = nargs + 1;
  argv[0] = self;
  if (argc > 7) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_XmlUpdateContext, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_XmlContainer_replaceIndex__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlTransaction, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_XmlUpdateContext, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_XmlContainer_replaceIndex__SWIG_1(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }

fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'XmlContainer_replaceIndex'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_addDefaultIndex__SWIG_1(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  XmlTransaction *arg2 = 0 ;
  std::string *arg3 = 0 ;
  XmlUpdateContext *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 = 0 ;
  int res4 = 0 ;

  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "addDefaultIndex" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlTransaction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "addDefaultIndex" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "addDefaultIndex" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  arg2 = reinterpret_cast< XmlTransaction * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "addDefaultIndex" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "addDefaultIndex" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_XmlUpdateContext,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "addDefaultIndex" "', argument " "4"" of type '" "XmlUpdateContext &""'");
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "addDefaultIndex" "', argument " "4"" of type '" "XmlUpdateContext &""'");
  }
  arg4 = reinterpret_cast< XmlUpdateContext * >(argp4);
  {
    try {
      (arg1)->addDefaultIndex(*arg2,(std::string const &)*arg3,*arg4);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
}


SWIGINTERN VALUE _wrap_XmlContainer_addDefaultIndex(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;

  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_XmlUpdateContext, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_XmlContainer_addDefaultIndex__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlTransaction, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_XmlUpdateContext, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_XmlContainer_addDefaultIndex__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }

fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'XmlContainer_addDefaultIndex'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_deleteDefaultIndex__SWIG_1(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  XmlTransaction *arg2 = 0 ;
  std::string *arg3 = 0 ;
  XmlUpdateContext *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 = 0 ;
  int res4 = 0 ;

  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "deleteDefaultIndex" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlTransaction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "deleteDefaultIndex" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "deleteDefaultIndex" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  arg2 = reinterpret_cast< XmlTransaction * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "deleteDefaultIndex" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "deleteDefaultIndex" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_XmlUpdateContext,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "deleteDefaultIndex" "', argument " "4"" of type '" "XmlUpdateContext &""'");
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "deleteDefaultIndex" "', argument " "4"" of type '" "XmlUpdateContext &""'");
  }
  arg4 = reinterpret_cast< XmlUpdateContext * >(argp4);
  {
    try {
      (arg1)->deleteDefaultIndex(*arg2,(std::string const &)*arg3,*arg4);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
}


SWIGINTERN VALUE _wrap_XmlContainer_deleteDefaultIndex(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;

  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_XmlUpdateContext, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_XmlContainer_deleteDefaultIndex__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlTransaction, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_XmlUpdateContext, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_XmlContainer_deleteDefaultIndex__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }

fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'XmlContainer_deleteDefaultIndex'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_replaceDefaultIndex__SWIG_1(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  XmlTransaction *arg2 = 0 ;
  std::string *arg3 = 0 ;
  XmlUpdateContext *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 = 0 ;
  int res4 = 0 ;

  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "replaceDefaultIndex" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlTransaction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "replaceDefaultIndex" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "replaceDefaultIndex" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  arg2 = reinterpret_cast< XmlTransaction * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "replaceDefaultIndex" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "replaceDefaultIndex" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_XmlUpdateContext,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "replaceDefaultIndex" "', argument " "4"" of type '" "XmlUpdateContext &""'");
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "replaceDefaultIndex" "', argument " "4"" of type '" "XmlUpdateContext &""'");
  }
  arg4 = reinterpret_cast< XmlUpdateContext * >(argp4);
  {
    try {
      (arg1)->replaceDefaultIndex(*arg2,(std::string const &)*arg3,*arg4);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
}


SWIGINTERN VALUE _wrap_XmlContainer_replaceDefaultIndex(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;

  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_XmlUpdateContext, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_XmlContainer_replaceDefaultIndex__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlTransaction, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_XmlUpdateContext, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_XmlContainer_replaceDefaultIndex__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }

fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'XmlContainer_replaceDefaultIndex'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_putDocument__SWIG_0(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  XmlDocument *arg2 = 0 ;
  XmlUpdateContext *arg3 = 0 ;
  u_int32_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;

  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "putDocument" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlDocument,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "putDocument" "', argument " "2"" of type '" "XmlDocument &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "putDocument" "', argument " "2"" of type '" "XmlDocument &""'");
  }
  arg2 = reinterpret_cast< XmlDocument * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_XmlUpdateContext,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "putDocument" "', argument " "3"" of type '" "XmlUpdateContext &""'");
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "putDocument" "', argument " "3"" of type '" "XmlUpdateContext &""'");
  }
  arg3 = reinterpret_cast< XmlUpdateContext * >(argp3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "putDocument" "', argument " "4"" of type '" "u_int32_t""'");
  }
  arg4 = static_cast< u_int32_t >(val4);
  {
    try {
      (arg1)->putDocument(*arg2,*arg3,arg4);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_putDocument__SWIG_1(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  XmlDocument *arg2 = 0 ;
  XmlUpdateContext *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;

  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "putDocument" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlDocument,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "putDocument" "', argument " "2"" of type '" "XmlDocument &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "putDocument" "', argument " "2"" of type '" "XmlDocument &""'");
  }
  arg2 = reinterpret_cast< XmlDocument * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_XmlUpdateContext,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "putDocument" "', argument " "3"" of type '" "XmlUpdateContext &""'");
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "putDocument" "', argument " "3"" of type '" "XmlUpdateContext &""'");
  }
  arg3 = reinterpret_cast< XmlUpdateContext * >(argp3);
  {
    try {
      (arg1)->putDocument(*arg2,*arg3);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_putDocument__SWIG_2(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  XmlUpdateContext *arg4 = 0 ;
  u_int32_t arg5 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "putDocument" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "putDocument" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "putDocument" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "putDocument" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "putDocument" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_XmlUpdateContext,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "putDocument" "', argument " "4"" of type '" "XmlUpdateContext &""'");
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "putDocument" "', argument " "4"" of type '" "XmlUpdateContext &""'");
  }
  arg4 = reinterpret_cast< XmlUpdateContext * >(argp4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "putDocument" "', argument " "5"" of type '" "u_int32_t""'");
  }
  arg5 = static_cast< u_int32_t >(val5);
  {
    try {
      result = (arg1)->putDocument((std::string const &)*arg2,(std::string const &)*arg3,*arg4,arg5);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_putDocument__SWIG_3(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  XmlUpdateContext *arg4 = 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "putDocument" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "putDocument" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "putDocument" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "putDocument" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "putDocument" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_XmlUpdateContext,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "putDocument" "', argument " "4"" of type '" "XmlUpdateContext &""'");
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "putDocument" "', argument " "4"" of type '" "XmlUpdateContext &""'");
  }
  arg4 = reinterpret_cast< XmlUpdateContext * >(argp4);
  {
    try {
      result = (arg1)->putDocument((std::string const &)*arg2,(std::string const &)*arg3,*arg4);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_putDocument__SWIG_4(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  std::string *arg2 = 0 ;
  XmlEventReader *arg3 = 0 ;
  XmlUpdateContext *arg4 = 0 ;
  u_int32_t arg5 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "putDocument" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "putDocument" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "putDocument" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_XmlEventReader,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "putDocument" "', argument " "3"" of type '" "XmlEventReader &""'");
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "putDocument" "', argument " "3"" of type '" "XmlEventReader &""'");
  }
  arg3 = reinterpret_cast< XmlEventReader * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_XmlUpdateContext,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "putDocument" "', argument " "4"" of type '" "XmlUpdateContext &""'");
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "putDocument" "', argument " "4"" of type '" "XmlUpdateContext &""'");
  }
  arg4 = reinterpret_cast< XmlUpdateContext * >(argp4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "putDocument" "', argument " "5"" of type '" "u_int32_t""'");
  }
  arg5 = static_cast< u_int32_t >(val5);
  {
    try {
      result = (arg1)->putDocument((std::string const &)*arg2,*arg3,*arg4,arg5);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_putDocument__SWIG_5(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  std::string *arg2 = 0 ;
  XmlEventReader *arg3 = 0 ;
  XmlUpdateContext *arg4 = 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "putDocument" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "putDocument" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "putDocument" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_XmlEventReader,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "putDocument" "', argument " "3"" of type '" "XmlEventReader &""'");
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "putDocument" "', argument " "3"" of type '" "XmlEventReader &""'");
  }
  arg3 = reinterpret_cast< XmlEventReader * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_XmlUpdateContext,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "putDocument" "', argument " "4"" of type '" "XmlUpdateContext &""'");
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "putDocument" "', argument " "4"" of type '" "XmlUpdateContext &""'");
  }
  arg4 = reinterpret_cast< XmlUpdateContext * >(argp4);
  {
    try {
      result = (arg1)->putDocument((std::string const &)*arg2,*arg3,*arg4);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_putDocumentAsEventWriter__SWIG_0(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  XmlDocument *arg2 = 0 ;
  XmlUpdateContext *arg3 = 0 ;
  u_int32_t arg4 ;
  XmlEventWriter *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "putDocumentAsEventWriter" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlDocument,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "putDocumentAsEventWriter" "', argument " "2"" of type '" "XmlDocument &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "putDocumentAsEventWriter" "', argument " "2"" of type '" "XmlDocument &""'");
  }
  arg2 = reinterpret_cast< XmlDocument * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_XmlUpdateContext,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "putDocumentAsEventWriter" "', argument " "3"" of type '" "XmlUpdateContext &""'");
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "putDocumentAsEventWriter" "', argument " "3"" of type '" "XmlUpdateContext &""'");
  }
  arg3 = reinterpret_cast< XmlUpdateContext * >(argp3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "putDocumentAsEventWriter" "', argument " "4"" of type '" "u_int32_t""'");
  }
  arg4 = static_cast< u_int32_t >(val4);
  {
    try {
      {
        XmlEventWriter &_result_ref = (arg1)->putDocumentAsEventWriter(*arg2,*arg3,arg4);
        result = (XmlEventWriter *) &_result_ref;
      }
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlEventWriter, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_putDocumentAsEventWriter__SWIG_1(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  XmlDocument *arg2 = 0 ;
  XmlUpdateContext *arg3 = 0 ;
  XmlEventWriter *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "putDocumentAsEventWriter" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlDocument,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "putDocumentAsEventWriter" "', argument " "2"" of type '" "XmlDocument &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "putDocumentAsEventWriter" "', argument " "2"" of type '" "XmlDocument &""'");
  }
  arg2 = reinterpret_cast< XmlDocument * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_XmlUpdateContext,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "putDocumentAsEventWriter" "', argument " "3"" of type '" "XmlUpdateContext &""'");
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "putDocumentAsEventWriter" "', argument " "3"" of type '" "XmlUpdateContext &""'");
  }
  arg3 = reinterpret_cast< XmlUpdateContext * >(argp3);
  {
    try {
      {
        XmlEventWriter &_result_ref = (arg1)->putDocumentAsEventWriter(*arg2,*arg3);
        result = (XmlEventWriter *) &_result_ref;
      }
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlEventWriter, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_deleteDocument__SWIG_0(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  XmlDocument *arg2 = 0 ;
  XmlUpdateContext *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;

  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "deleteDocument" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlDocument,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "deleteDocument" "', argument " "2"" of type '" "XmlDocument &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "deleteDocument" "', argument " "2"" of type '" "XmlDocument &""'");
  }
  arg2 = reinterpret_cast< XmlDocument * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_XmlUpdateContext,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "deleteDocument" "', argument " "3"" of type '" "XmlUpdateContext &""'");
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "deleteDocument" "', argument " "3"" of type '" "XmlUpdateContext &""'");
  }
  arg3 = reinterpret_cast< XmlUpdateContext * >(argp3);
  {
    try {
      (arg1)->deleteDocument(*arg2,*arg3);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_deleteDocument__SWIG_1(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  std::string *arg2 = 0 ;
  XmlUpdateContext *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;

  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "deleteDocument" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "deleteDocument" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "deleteDocument" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_XmlUpdateContext,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "deleteDocument" "', argument " "3"" of type '" "XmlUpdateContext &""'");
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "deleteDocument" "', argument " "3"" of type '" "XmlUpdateContext &""'");
  }
  arg3 = reinterpret_cast< XmlUpdateContext * >(argp3);
  {
    try {
      (arg1)->deleteDocument((std::string const &)*arg2,*arg3);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_updateDocument__SWIG_0(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  XmlDocument *arg2 = 0 ;
  XmlUpdateContext *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;

  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "updateDocument" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlDocument,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "updateDocument" "', argument " "2"" of type '" "XmlDocument &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "updateDocument" "', argument " "2"" of type '" "XmlDocument &""'");
  }
  arg2 = reinterpret_cast< XmlDocument * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_XmlUpdateContext,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "updateDocument" "', argument " "3"" of type '" "XmlUpdateContext &""'");
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "updateDocument" "', argument " "3"" of type '" "XmlUpdateContext &""'");
  }
  arg3 = reinterpret_cast< XmlUpdateContext * >(argp3);
  {
    try {
      (arg1)->updateDocument(*arg2,*arg3);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_putDocument__SWIG_6(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  std::string *arg2 = 0 ;
  XmlInputStream *arg3 = (XmlInputStream *) 0 ;
  XmlUpdateContext *arg4 = 0 ;
  u_int32_t arg5 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "putDocument" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "putDocument" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "putDocument" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_XmlInputStream, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "putDocument" "', argument " "3"" of type '" "XmlInputStream *""'");
  }
  arg3 = reinterpret_cast< XmlInputStream * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_XmlUpdateContext,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "putDocument" "', argument " "4"" of type '" "XmlUpdateContext &""'");
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "putDocument" "', argument " "4"" of type '" "XmlUpdateContext &""'");
  }
  arg4 = reinterpret_cast< XmlUpdateContext * >(argp4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "putDocument" "', argument " "5"" of type '" "u_int32_t""'");
  }
  arg5 = static_cast< u_int32_t >(val5);
  {
    try {
      result = (arg1)->putDocument((std::string const &)*arg2,arg3,*arg4,arg5);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_putDocument__SWIG_7(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  std::string *arg2 = 0 ;
  XmlInputStream *arg3 = (XmlInputStream *) 0 ;
  XmlUpdateContext *arg4 = 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "putDocument" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "putDocument" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "putDocument" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_XmlInputStream, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "putDocument" "', argument " "3"" of type '" "XmlInputStream *""'");
  }
  arg3 = reinterpret_cast< XmlInputStream * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_XmlUpdateContext,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "putDocument" "', argument " "4"" of type '" "XmlUpdateContext &""'");
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "putDocument" "', argument " "4"" of type '" "XmlUpdateContext &""'");
  }
  arg4 = reinterpret_cast< XmlUpdateContext * >(argp4);
  {
    try {
      result = (arg1)->putDocument((std::string const &)*arg2,arg3,*arg4);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_putDocument__SWIG_8(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  XmlTransaction *arg2 = 0 ;
  std::string *arg3 = 0 ;
  XmlInputStream *arg4 = (XmlInputStream *) 0 ;
  XmlUpdateContext *arg5 = 0 ;
  u_int32_t arg6 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "putDocument" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlTransaction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "putDocument" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "putDocument" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  arg2 = reinterpret_cast< XmlTransaction * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "putDocument" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "putDocument" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  res4 = SWIG_ConvertPtr(argv[2], &argp4,SWIGTYPE_p_XmlInputStream, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "putDocument" "', argument " "4"" of type '" "XmlInputStream *""'");
  }
  arg4 = reinterpret_cast< XmlInputStream * >(argp4);
  res5 = SWIG_ConvertPtr(argv[3], &argp5, SWIGTYPE_p_XmlUpdateContext,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "putDocument" "', argument " "5"" of type '" "XmlUpdateContext &""'");
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "putDocument" "', argument " "5"" of type '" "XmlUpdateContext &""'");
  }
  arg5 = reinterpret_cast< XmlUpdateContext * >(argp5);
  ecode6 = SWIG_AsVal_int(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "putDocument" "', argument " "6"" of type '" "u_int32_t""'");
  }
  arg6 = static_cast< u_int32_t >(val6);
  {
    try {
      result = (arg1)->putDocument(*arg2,(std::string const &)*arg3,arg4,*arg5,arg6);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  return vresult;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_putDocument__SWIG_9(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  XmlTransaction *arg2 = 0 ;
  std::string *arg3 = 0 ;
  XmlInputStream *arg4 = (XmlInputStream *) 0 ;
  XmlUpdateContext *arg5 = 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "putDocument" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlTransaction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "putDocument" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "putDocument" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  arg2 = reinterpret_cast< XmlTransaction * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "putDocument" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "putDocument" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  res4 = SWIG_ConvertPtr(argv[2], &argp4,SWIGTYPE_p_XmlInputStream, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "putDocument" "', argument " "4"" of type '" "XmlInputStream *""'");
  }
  arg4 = reinterpret_cast< XmlInputStream * >(argp4);
  res5 = SWIG_ConvertPtr(argv[3], &argp5, SWIGTYPE_p_XmlUpdateContext,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "putDocument" "', argument " "5"" of type '" "XmlUpdateContext &""'");
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "putDocument" "', argument " "5"" of type '" "XmlUpdateContext &""'");
  }
  arg5 = reinterpret_cast< XmlUpdateContext * >(argp5);
  {
    try {
      result = (arg1)->putDocument(*arg2,(std::string const &)*arg3,arg4,*arg5);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  return vresult;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_putDocument__SWIG_10(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  XmlTransaction *arg2 = 0 ;
  XmlDocument *arg3 = 0 ;
  XmlUpdateContext *arg4 = 0 ;
  u_int32_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;

  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "putDocument" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlTransaction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "putDocument" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "putDocument" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  arg2 = reinterpret_cast< XmlTransaction * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_XmlDocument,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "putDocument" "', argument " "3"" of type '" "XmlDocument &""'");
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "putDocument" "', argument " "3"" of type '" "XmlDocument &""'");
  }
  arg3 = reinterpret_cast< XmlDocument * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_XmlUpdateContext,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "putDocument" "', argument " "4"" of type '" "XmlUpdateContext &""'");
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "putDocument" "', argument " "4"" of type '" "XmlUpdateContext &""'");
  }
  arg4 = reinterpret_cast< XmlUpdateContext * >(argp4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "putDocument" "', argument " "5"" of type '" "u_int32_t""'");
  }
  arg5 = static_cast< u_int32_t >(val5);
  {
    try {
      (arg1)->putDocument(*arg2,*arg3,*arg4,arg5);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_putDocument__SWIG_11(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  XmlTransaction *arg2 = 0 ;
  XmlDocument *arg3 = 0 ;
  XmlUpdateContext *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;

  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "putDocument" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlTransaction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "putDocument" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "putDocument" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  arg2 = reinterpret_cast< XmlTransaction * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_XmlDocument,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "putDocument" "', argument " "3"" of type '" "XmlDocument &""'");
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "putDocument" "', argument " "3"" of type '" "XmlDocument &""'");
  }
  arg3 = reinterpret_cast< XmlDocument * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_XmlUpdateContext,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "putDocument" "', argument " "4"" of type '" "XmlUpdateContext &""'");
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "putDocument" "', argument " "4"" of type '" "XmlUpdateContext &""'");
  }
  arg4 = reinterpret_cast< XmlUpdateContext * >(argp4);
  {
    try {
      (arg1)->putDocument(*arg2,*arg3,*arg4);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_putDocument__SWIG_12(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  XmlTransaction *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  XmlUpdateContext *arg5 = 0 ;
  u_int32_t arg6 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "putDocument" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlTransaction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "putDocument" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "putDocument" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  arg2 = reinterpret_cast< XmlTransaction * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "putDocument" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "putDocument" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "putDocument" "', argument " "4"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "putDocument" "', argument " "4"" of type '" "std::string const &""'");
    }
    arg4 = ptr;
  }
  res5 = SWIG_ConvertPtr(argv[3], &argp5, SWIGTYPE_p_XmlUpdateContext,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "putDocument" "', argument " "5"" of type '" "XmlUpdateContext &""'");
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "putDocument" "', argument " "5"" of type '" "XmlUpdateContext &""'");
  }
  arg5 = reinterpret_cast< XmlUpdateContext * >(argp5);
  ecode6 = SWIG_AsVal_int(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "putDocument" "', argument " "6"" of type '" "u_int32_t""'");
  }
  arg6 = static_cast< u_int32_t >(val6);
  {
    try {
      result = (arg1)->putDocument(*arg2,(std::string const &)*arg3,(std::string const &)*arg4,*arg5,arg6);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return vresult;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_putDocument__SWIG_13(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  XmlTransaction *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  XmlUpdateContext *arg5 = 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "putDocument" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlTransaction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "putDocument" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "putDocument" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  arg2 = reinterpret_cast< XmlTransaction * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "putDocument" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "putDocument" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "putDocument" "', argument " "4"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "putDocument" "', argument " "4"" of type '" "std::string const &""'");
    }
    arg4 = ptr;
  }
  res5 = SWIG_ConvertPtr(argv[3], &argp5, SWIGTYPE_p_XmlUpdateContext,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "putDocument" "', argument " "5"" of type '" "XmlUpdateContext &""'");
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "putDocument" "', argument " "5"" of type '" "XmlUpdateContext &""'");
  }
  arg5 = reinterpret_cast< XmlUpdateContext * >(argp5);
  {
    try {
      result = (arg1)->putDocument(*arg2,(std::string const &)*arg3,(std::string const &)*arg4,*arg5);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return vresult;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_putDocument__SWIG_14(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  XmlTransaction *arg2 = 0 ;
  std::string *arg3 = 0 ;
  XmlEventReader *arg4 = 0 ;
  XmlUpdateContext *arg5 = 0 ;
  u_int32_t arg6 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "putDocument" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlTransaction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "putDocument" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "putDocument" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  arg2 = reinterpret_cast< XmlTransaction * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "putDocument" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "putDocument" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_XmlEventReader,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "putDocument" "', argument " "4"" of type '" "XmlEventReader &""'");
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "putDocument" "', argument " "4"" of type '" "XmlEventReader &""'");
  }
  arg4 = reinterpret_cast< XmlEventReader * >(argp4);
  res5 = SWIG_ConvertPtr(argv[3], &argp5, SWIGTYPE_p_XmlUpdateContext,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "putDocument" "', argument " "5"" of type '" "XmlUpdateContext &""'");
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "putDocument" "', argument " "5"" of type '" "XmlUpdateContext &""'");
  }
  arg5 = reinterpret_cast< XmlUpdateContext * >(argp5);
  ecode6 = SWIG_AsVal_int(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "putDocument" "', argument " "6"" of type '" "u_int32_t""'");
  }
  arg6 = static_cast< u_int32_t >(val6);
  {
    try {
      result = (arg1)->putDocument(*arg2,(std::string const &)*arg3,*arg4,*arg5,arg6);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  return vresult;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_putDocument__SWIG_15(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  XmlTransaction *arg2 = 0 ;
  std::string *arg3 = 0 ;
  XmlEventReader *arg4 = 0 ;
  XmlUpdateContext *arg5 = 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "putDocument" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlTransaction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "putDocument" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "putDocument" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  arg2 = reinterpret_cast< XmlTransaction * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "putDocument" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "putDocument" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_XmlEventReader,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "putDocument" "', argument " "4"" of type '" "XmlEventReader &""'");
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "putDocument" "', argument " "4"" of type '" "XmlEventReader &""'");
  }
  arg4 = reinterpret_cast< XmlEventReader * >(argp4);
  res5 = SWIG_ConvertPtr(argv[3], &argp5, SWIGTYPE_p_XmlUpdateContext,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "putDocument" "', argument " "5"" of type '" "XmlUpdateContext &""'");
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "putDocument" "', argument " "5"" of type '" "XmlUpdateContext &""'");
  }
  arg5 = reinterpret_cast< XmlUpdateContext * >(argp5);
  {
    try {
      result = (arg1)->putDocument(*arg2,(std::string const &)*arg3,*arg4,*arg5);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  return vresult;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
}


SWIGINTERN VALUE _wrap_XmlContainer_putDocument(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[7];
  int ii;

  argc = nargs + 1;
  argv[0] = self;
  if (argc > 7) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlDocument, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_XmlUpdateContext, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_XmlContainer_putDocument__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlDocument, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_XmlUpdateContext, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_XmlContainer_putDocument__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlTransaction, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_XmlDocument, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_XmlUpdateContext, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_XmlContainer_putDocument__SWIG_11(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_XmlInputStream, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_XmlUpdateContext, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_XmlContainer_putDocument__SWIG_7(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_XmlEventReader, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_XmlUpdateContext, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_XmlContainer_putDocument__SWIG_5(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_XmlUpdateContext, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_XmlContainer_putDocument__SWIG_3(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlTransaction, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_XmlDocument, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_XmlUpdateContext, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_XmlContainer_putDocument__SWIG_10(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlTransaction, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_XmlInputStream, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_XmlUpdateContext, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_XmlContainer_putDocument__SWIG_9(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlTransaction, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_XmlEventReader, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_XmlUpdateContext, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_XmlContainer_putDocument__SWIG_15(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlTransaction, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_XmlUpdateContext, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_XmlContainer_putDocument__SWIG_13(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_XmlInputStream, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_XmlUpdateContext, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_XmlContainer_putDocument__SWIG_6(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_XmlEventReader, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_XmlUpdateContext, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_XmlContainer_putDocument__SWIG_4(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_XmlUpdateContext, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_XmlContainer_putDocument__SWIG_2(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlTransaction, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_XmlInputStream, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_XmlUpdateContext, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_XmlContainer_putDocument__SWIG_8(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlTransaction, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_XmlEventReader, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_XmlUpdateContext, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_XmlContainer_putDocument__SWIG_14(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlTransaction, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_XmlUpdateContext, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_XmlContainer_putDocument__SWIG_12(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }

fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'XmlContainer_putDocument'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_putDocumentAsEventWriter__SWIG_2(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  XmlTransaction *arg2 = 0 ;
  XmlDocument *arg3 = 0 ;
  XmlUpdateContext *arg4 = 0 ;
  u_int32_t arg5 ;
  XmlEventWriter *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "putDocumentAsEventWriter" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlTransaction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "putDocumentAsEventWriter" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "putDocumentAsEventWriter" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  arg2 = reinterpret_cast< XmlTransaction * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_XmlDocument,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "putDocumentAsEventWriter" "', argument " "3"" of type '" "XmlDocument &""'");
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "putDocumentAsEventWriter" "', argument " "3"" of type '" "XmlDocument &""'");
  }
  arg3 = reinterpret_cast< XmlDocument * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_XmlUpdateContext,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "putDocumentAsEventWriter" "', argument " "4"" of type '" "XmlUpdateContext &""'");
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "putDocumentAsEventWriter" "', argument " "4"" of type '" "XmlUpdateContext &""'");
  }
  arg4 = reinterpret_cast< XmlUpdateContext * >(argp4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "putDocumentAsEventWriter" "', argument " "5"" of type '" "u_int32_t""'");
  }
  arg5 = static_cast< u_int32_t >(val5);
  {
    try {
      {
        XmlEventWriter &_result_ref = (arg1)->putDocumentAsEventWriter(*arg2,*arg3,*arg4,arg5);
        result = (XmlEventWriter *) &_result_ref;
      }
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlEventWriter, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_putDocumentAsEventWriter__SWIG_3(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  XmlTransaction *arg2 = 0 ;
  XmlDocument *arg3 = 0 ;
  XmlUpdateContext *arg4 = 0 ;
  XmlEventWriter *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "putDocumentAsEventWriter" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlTransaction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "putDocumentAsEventWriter" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "putDocumentAsEventWriter" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  arg2 = reinterpret_cast< XmlTransaction * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_XmlDocument,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "putDocumentAsEventWriter" "', argument " "3"" of type '" "XmlDocument &""'");
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "putDocumentAsEventWriter" "', argument " "3"" of type '" "XmlDocument &""'");
  }
  arg3 = reinterpret_cast< XmlDocument * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_XmlUpdateContext,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "putDocumentAsEventWriter" "', argument " "4"" of type '" "XmlUpdateContext &""'");
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "putDocumentAsEventWriter" "', argument " "4"" of type '" "XmlUpdateContext &""'");
  }
  arg4 = reinterpret_cast< XmlUpdateContext * >(argp4);
  {
    try {
      {
        XmlEventWriter &_result_ref = (arg1)->putDocumentAsEventWriter(*arg2,*arg3,*arg4);
        result = (XmlEventWriter *) &_result_ref;
      }
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlEventWriter, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_XmlContainer_putDocumentAsEventWriter(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;

  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlDocument, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_XmlUpdateContext, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_XmlContainer_putDocumentAsEventWriter__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlDocument, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_XmlUpdateContext, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_XmlContainer_putDocumentAsEventWriter__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlTransaction, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_XmlDocument, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_XmlUpdateContext, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_XmlContainer_putDocumentAsEventWriter__SWIG_3(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlTransaction, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_XmlDocument, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_XmlUpdateContext, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_XmlContainer_putDocumentAsEventWriter__SWIG_2(nargs, args, self);
            }
          }
        }
      }
    }
  }

fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'XmlContainer_putDocumentAsEventWriter'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_deleteDocument__SWIG_2(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  XmlTransaction *arg2 = 0 ;
  XmlDocument *arg3 = 0 ;
  XmlUpdateContext *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;

  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "deleteDocument" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlTransaction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "deleteDocument" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "deleteDocument" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  arg2 = reinterpret_cast< XmlTransaction * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_XmlDocument,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "deleteDocument" "', argument " "3"" of type '" "XmlDocument &""'");
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "deleteDocument" "', argument " "3"" of type '" "XmlDocument &""'");
  }
  arg3 = reinterpret_cast< XmlDocument * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_XmlUpdateContext,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "deleteDocument" "', argument " "4"" of type '" "XmlUpdateContext &""'");
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "deleteDocument" "', argument " "4"" of type '" "XmlUpdateContext &""'");
  }
  arg4 = reinterpret_cast< XmlUpdateContext * >(argp4);
  {
    try {
      (arg1)->deleteDocument(*arg2,*arg3,*arg4);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_deleteDocument__SWIG_3(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  XmlTransaction *arg2 = 0 ;
  std::string *arg3 = 0 ;
  XmlUpdateContext *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 = 0 ;
  int res4 = 0 ;

  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "deleteDocument" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlTransaction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "deleteDocument" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "deleteDocument" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  arg2 = reinterpret_cast< XmlTransaction * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "deleteDocument" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "deleteDocument" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_XmlUpdateContext,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "deleteDocument" "', argument " "4"" of type '" "XmlUpdateContext &""'");
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "deleteDocument" "', argument " "4"" of type '" "XmlUpdateContext &""'");
  }
  arg4 = reinterpret_cast< XmlUpdateContext * >(argp4);
  {
    try {
      (arg1)->deleteDocument(*arg2,(std::string const &)*arg3,*arg4);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
}


SWIGINTERN VALUE _wrap_XmlContainer_deleteDocument(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;

  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlDocument, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_XmlUpdateContext, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_XmlContainer_deleteDocument__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_XmlUpdateContext, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_XmlContainer_deleteDocument__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlTransaction, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_XmlDocument, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_XmlUpdateContext, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_XmlContainer_deleteDocument__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlTransaction, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_XmlUpdateContext, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_XmlContainer_deleteDocument__SWIG_3(nargs, args, self);
          }
        }
      }
    }
  }

fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'XmlContainer_deleteDocument'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_updateDocument__SWIG_1(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  XmlTransaction *arg2 = 0 ;
  XmlDocument *arg3 = 0 ;
  XmlUpdateContext *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;

  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "updateDocument" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlTransaction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "updateDocument" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "updateDocument" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  arg2 = reinterpret_cast< XmlTransaction * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_XmlDocument,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "updateDocument" "', argument " "3"" of type '" "XmlDocument &""'");
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "updateDocument" "', argument " "3"" of type '" "XmlDocument &""'");
  }
  arg3 = reinterpret_cast< XmlDocument * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_XmlUpdateContext,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "updateDocument" "', argument " "4"" of type '" "XmlUpdateContext &""'");
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "updateDocument" "', argument " "4"" of type '" "XmlUpdateContext &""'");
  }
  arg4 = reinterpret_cast< XmlUpdateContext * >(argp4);
  {
    try {
      (arg1)->updateDocument(*arg2,*arg3,*arg4);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_XmlContainer_updateDocument(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;

  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlDocument, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_XmlUpdateContext, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_XmlContainer_updateDocument__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlTransaction, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_XmlDocument, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_XmlUpdateContext, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_XmlContainer_updateDocument__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }

fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'XmlContainer_updateDocument'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_getNumDocuments__SWIG_0(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  size_t result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getNumDocuments" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  {
    try {
      result = (arg1)->getNumDocuments();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_getNumDocuments__SWIG_1(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  XmlTransaction *arg2 = 0 ;
  size_t result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getNumDocuments" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlTransaction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "getNumDocuments" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getNumDocuments" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  arg2 = reinterpret_cast< XmlTransaction * >(argp2);
  {
    try {
      result = (arg1)->getNumDocuments(*arg2);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_XmlContainer_getNumDocuments(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;

  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_XmlContainer_getNumDocuments__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlTransaction, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_XmlContainer_getNumDocuments__SWIG_1(nargs, args, self);
      }
    }
  }

fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'XmlContainer_getNumDocuments'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_getIndexSpecification__SWIG_0(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  XmlIndexSpecification *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getIndexSpecification" "', argument " "1"" of type '" "XmlContainer const *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  {
    try {
      result = (XmlIndexSpecification *)XmlContainer_getIndexSpecification__SWIG_0((XmlContainer const *)arg1);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlIndexSpecification, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_getIndexSpecification__SWIG_1(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  XmlTransaction *arg2 = 0 ;
  XmlIndexSpecification *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getIndexSpecification" "', argument " "1"" of type '" "XmlContainer const *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlTransaction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "getIndexSpecification" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getIndexSpecification" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  arg2 = reinterpret_cast< XmlTransaction * >(argp2);
  {
    try {
      result = (XmlIndexSpecification *)XmlContainer_getIndexSpecification__SWIG_1((XmlContainer const *)arg1,*arg2);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlIndexSpecification, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_getIndexSpecification__SWIG_2(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  XmlTransaction *arg2 = 0 ;
  u_int32_t arg3 ;
  XmlIndexSpecification *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getIndexSpecification" "', argument " "1"" of type '" "XmlContainer const *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlTransaction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "getIndexSpecification" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getIndexSpecification" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  arg2 = reinterpret_cast< XmlTransaction * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "getIndexSpecification" "', argument " "3"" of type '" "u_int32_t""'");
  }
  arg3 = static_cast< u_int32_t >(val3);
  {
    try {
      result = (XmlIndexSpecification *)XmlContainer_getIndexSpecification__SWIG_2((XmlContainer const *)arg1,*arg2,arg3);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlIndexSpecification, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_XmlContainer_getIndexSpecification(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;

  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_XmlContainer_getIndexSpecification__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlTransaction, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_XmlContainer_getIndexSpecification__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlTransaction, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_XmlContainer_getIndexSpecification__SWIG_2(nargs, args, self);
        }
      }
    }
  }

fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'XmlContainer_getIndexSpecification'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_getDocument__SWIG_0(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  std::string *arg2 = 0 ;
  XmlDocument *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  VALUE vresult = Qnil;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getDocument" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "getDocument" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getDocument" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  {
    try {
      result = (XmlDocument *)XmlContainer_getDocument__SWIG_0(arg1,(std::string const &)*arg2);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlDocument, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_getDocument__SWIG_1(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  XmlTransaction *arg2 = 0 ;
  std::string *arg3 = 0 ;
  XmlDocument *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  VALUE vresult = Qnil;

  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getDocument" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlTransaction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "getDocument" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getDocument" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  arg2 = reinterpret_cast< XmlTransaction * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "getDocument" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getDocument" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  {
    try {
      result = (XmlDocument *)XmlContainer_getDocument__SWIG_1(arg1,*arg2,(std::string const &)*arg3);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlDocument, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return vresult;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_getNode__SWIG_0(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  std::string *arg2 = 0 ;
  XmlValue *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  VALUE vresult = Qnil;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getNode" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "getNode" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getNode" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  {
    try {
      result = (XmlValue *)XmlContainer_getNode__SWIG_0(arg1,(std::string const &)*arg2);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlValue, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_getNode__SWIG_1(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  XmlTransaction *arg2 = 0 ;
  std::string *arg3 = 0 ;
  XmlValue *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  VALUE vresult = Qnil;

  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getNode" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlTransaction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "getNode" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getNode" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  arg2 = reinterpret_cast< XmlTransaction * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "getNode" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getNode" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  {
    try {
      result = (XmlValue *)XmlContainer_getNode__SWIG_1(arg1,*arg2,(std::string const &)*arg3);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlValue, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return vresult;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_getDocument__SWIG_2(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  std::string *arg2 = 0 ;
  u_int32_t arg3 ;
  XmlDocument *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getDocument" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "getDocument" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getDocument" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "getDocument" "', argument " "3"" of type '" "u_int32_t""'");
  }
  arg3 = static_cast< u_int32_t >(val3);
  {
    try {
      result = (XmlDocument *)XmlContainer_getDocument__SWIG_2(arg1,(std::string const &)*arg2,arg3);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlDocument, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_getDocument__SWIG_3(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  XmlTransaction *arg2 = 0 ;
  std::string *arg3 = 0 ;
  u_int32_t arg4 ;
  XmlDocument *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int val4 ;
  int ecode4 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getDocument" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlTransaction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "getDocument" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getDocument" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  arg2 = reinterpret_cast< XmlTransaction * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "getDocument" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getDocument" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "getDocument" "', argument " "4"" of type '" "u_int32_t""'");
  }
  arg4 = static_cast< u_int32_t >(val4);
  {
    try {
      result = (XmlDocument *)XmlContainer_getDocument__SWIG_3(arg1,*arg2,(std::string const &)*arg3,arg4);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlDocument, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return vresult;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
}


SWIGINTERN VALUE _wrap_XmlContainer_getDocument(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;

  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_XmlContainer_getDocument__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlTransaction, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_XmlContainer_getDocument__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_XmlContainer_getDocument__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlTransaction, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_XmlContainer_getDocument__SWIG_3(nargs, args, self);
          }
        }
      }
    }
  }

fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'XmlContainer_getDocument'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_getNode__SWIG_2(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  std::string *arg2 = 0 ;
  u_int32_t arg3 ;
  XmlValue *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getNode" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "getNode" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getNode" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "getNode" "', argument " "3"" of type '" "u_int32_t""'");
  }
  arg3 = static_cast< u_int32_t >(val3);
  {
    try {
      result = (XmlValue *)XmlContainer_getNode__SWIG_2(arg1,(std::string const &)*arg2,arg3);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlValue, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_getNode__SWIG_3(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  XmlTransaction *arg2 = 0 ;
  std::string *arg3 = 0 ;
  u_int32_t arg4 ;
  XmlValue *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int val4 ;
  int ecode4 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getNode" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlTransaction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "getNode" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getNode" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  arg2 = reinterpret_cast< XmlTransaction * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "getNode" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getNode" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "getNode" "', argument " "4"" of type '" "u_int32_t""'");
  }
  arg4 = static_cast< u_int32_t >(val4);
  {
    try {
      result = (XmlValue *)XmlContainer_getNode__SWIG_3(arg1,*arg2,(std::string const &)*arg3,arg4);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlValue, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return vresult;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
}


SWIGINTERN VALUE _wrap_XmlContainer_getNode(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;

  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_XmlContainer_getNode__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlTransaction, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_XmlContainer_getNode__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_XmlContainer_getNode__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlTransaction, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_XmlContainer_getNode__SWIG_3(nargs, args, self);
          }
        }
      }
    }
  }

fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'XmlContainer_getNode'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_getAllDocuments__SWIG_0(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  u_int32_t arg2 ;
  XmlResults *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getAllDocuments" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "getAllDocuments" "', argument " "2"" of type '" "u_int32_t""'");
  }
  arg2 = static_cast< u_int32_t >(val2);
  {
    try {
      result = (XmlResults *)XmlContainer_getAllDocuments__SWIG_0(arg1,arg2);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlResults, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_getAllDocuments__SWIG_1(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  XmlTransaction *arg2 = 0 ;
  u_int32_t arg3 ;
  XmlResults *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getAllDocuments" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlTransaction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "getAllDocuments" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getAllDocuments" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  arg2 = reinterpret_cast< XmlTransaction * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "getAllDocuments" "', argument " "3"" of type '" "u_int32_t""'");
  }
  arg3 = static_cast< u_int32_t >(val3);
  {
    try {
      result = (XmlResults *)XmlContainer_getAllDocuments__SWIG_1(arg1,*arg2,arg3);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlResults, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_XmlContainer_getAllDocuments(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;

  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_XmlContainer_getAllDocuments__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlTransaction, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_XmlContainer_getAllDocuments__SWIG_1(nargs, args, self);
        }
      }
    }
  }

fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'XmlContainer_getAllDocuments'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_lookupIndex__SWIG_0(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  XmlQueryContext *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  XmlValue *arg6 = 0 ;
  u_int32_t arg7 ;
  XmlResults *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  int res5 = SWIG_OLDOBJ ;
  void *argp6 ;
  int res6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lookupIndex" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlQueryContext,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lookupIndex" "', argument " "2"" of type '" "XmlQueryContext &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupIndex" "', argument " "2"" of type '" "XmlQueryContext &""'");
  }
  arg2 = reinterpret_cast< XmlQueryContext * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "lookupIndex" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupIndex" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "lookupIndex" "', argument " "4"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupIndex" "', argument " "4"" of type '" "std::string const &""'");
    }
    arg4 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(argv[3], &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "lookupIndex" "', argument " "5"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupIndex" "', argument " "5"" of type '" "std::string const &""'");
    }
    arg5 = ptr;
  }
  res6 = SWIG_ConvertPtr(argv[4], &argp6, SWIGTYPE_p_XmlValue,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "lookupIndex" "', argument " "6"" of type '" "XmlValue const &""'");
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupIndex" "', argument " "6"" of type '" "XmlValue const &""'");
  }
  arg6 = reinterpret_cast< XmlValue * >(argp6);
  ecode7 = SWIG_AsVal_int(argv[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "lookupIndex" "', argument " "7"" of type '" "u_int32_t""'");
  }
  arg7 = static_cast< u_int32_t >(val7);
  {
    try {
      result = (XmlResults *)XmlContainer_lookupIndex__SWIG_0(arg1,*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(XmlValue const &)*arg6,arg7);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlResults, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return vresult;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_lookupIndex__SWIG_1(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  XmlQueryContext *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  XmlValue *arg6 = 0 ;
  XmlResults *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  int res5 = SWIG_OLDOBJ ;
  void *argp6 ;
  int res6 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lookupIndex" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlQueryContext,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lookupIndex" "', argument " "2"" of type '" "XmlQueryContext &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupIndex" "', argument " "2"" of type '" "XmlQueryContext &""'");
  }
  arg2 = reinterpret_cast< XmlQueryContext * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "lookupIndex" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupIndex" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "lookupIndex" "', argument " "4"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupIndex" "', argument " "4"" of type '" "std::string const &""'");
    }
    arg4 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(argv[3], &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "lookupIndex" "', argument " "5"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupIndex" "', argument " "5"" of type '" "std::string const &""'");
    }
    arg5 = ptr;
  }
  res6 = SWIG_ConvertPtr(argv[4], &argp6, SWIGTYPE_p_XmlValue,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "lookupIndex" "', argument " "6"" of type '" "XmlValue const &""'");
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupIndex" "', argument " "6"" of type '" "XmlValue const &""'");
  }
  arg6 = reinterpret_cast< XmlValue * >(argp6);
  {
    try {
      result = (XmlResults *)XmlContainer_lookupIndex__SWIG_0(arg1,*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(XmlValue const &)*arg6);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlResults, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return vresult;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_lookupIndex__SWIG_2(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  XmlQueryContext *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  XmlResults *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  int res5 = SWIG_OLDOBJ ;
  VALUE vresult = Qnil;

  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lookupIndex" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlQueryContext,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lookupIndex" "', argument " "2"" of type '" "XmlQueryContext &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupIndex" "', argument " "2"" of type '" "XmlQueryContext &""'");
  }
  arg2 = reinterpret_cast< XmlQueryContext * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "lookupIndex" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupIndex" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "lookupIndex" "', argument " "4"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupIndex" "', argument " "4"" of type '" "std::string const &""'");
    }
    arg4 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(argv[3], &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "lookupIndex" "', argument " "5"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupIndex" "', argument " "5"" of type '" "std::string const &""'");
    }
    arg5 = ptr;
  }
  {
    try {
      result = (XmlResults *)XmlContainer_lookupIndex__SWIG_0(arg1,*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlResults, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return vresult;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_lookupIndex__SWIG_3(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  XmlQueryContext *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::string *arg7 = 0 ;
  XmlValue *arg8 = 0 ;
  u_int32_t arg9 ;
  XmlResults *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  int res5 = SWIG_OLDOBJ ;
  int res6 = SWIG_OLDOBJ ;
  int res7 = SWIG_OLDOBJ ;
  void *argp8 ;
  int res8 = 0 ;
  int val9 ;
  int ecode9 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 8) || (argc > 8)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 8)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lookupIndex" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlQueryContext,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lookupIndex" "', argument " "2"" of type '" "XmlQueryContext &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupIndex" "', argument " "2"" of type '" "XmlQueryContext &""'");
  }
  arg2 = reinterpret_cast< XmlQueryContext * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "lookupIndex" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupIndex" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "lookupIndex" "', argument " "4"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupIndex" "', argument " "4"" of type '" "std::string const &""'");
    }
    arg4 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(argv[3], &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "lookupIndex" "', argument " "5"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupIndex" "', argument " "5"" of type '" "std::string const &""'");
    }
    arg5 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res6 = SWIG_AsPtr_std_string(argv[4], &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "lookupIndex" "', argument " "6"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupIndex" "', argument " "6"" of type '" "std::string const &""'");
    }
    arg6 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res7 = SWIG_AsPtr_std_string(argv[5], &ptr);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "lookupIndex" "', argument " "7"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupIndex" "', argument " "7"" of type '" "std::string const &""'");
    }
    arg7 = ptr;
  }
  res8 = SWIG_ConvertPtr(argv[6], &argp8, SWIGTYPE_p_XmlValue,  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "lookupIndex" "', argument " "8"" of type '" "XmlValue const &""'");
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupIndex" "', argument " "8"" of type '" "XmlValue const &""'");
  }
  arg8 = reinterpret_cast< XmlValue * >(argp8);
  ecode9 = SWIG_AsVal_int(argv[7], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "lookupIndex" "', argument " "9"" of type '" "u_int32_t""'");
  }
  arg9 = static_cast< u_int32_t >(val9);
  {
    try {
      result = (XmlResults *)XmlContainer_lookupIndex__SWIG_3(arg1,*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6,(std::string const &)*arg7,(XmlValue const &)*arg8,arg9);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlResults, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  if (SWIG_IsNewObj(res7)) delete arg7;
  return vresult;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  if (SWIG_IsNewObj(res7)) delete arg7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_lookupIndex__SWIG_4(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  XmlQueryContext *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::string *arg7 = 0 ;
  XmlValue *arg8 = 0 ;
  XmlResults *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  int res5 = SWIG_OLDOBJ ;
  int res6 = SWIG_OLDOBJ ;
  int res7 = SWIG_OLDOBJ ;
  void *argp8 ;
  int res8 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 7) || (argc > 7)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 7)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lookupIndex" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlQueryContext,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lookupIndex" "', argument " "2"" of type '" "XmlQueryContext &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupIndex" "', argument " "2"" of type '" "XmlQueryContext &""'");
  }
  arg2 = reinterpret_cast< XmlQueryContext * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "lookupIndex" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupIndex" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "lookupIndex" "', argument " "4"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupIndex" "', argument " "4"" of type '" "std::string const &""'");
    }
    arg4 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(argv[3], &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "lookupIndex" "', argument " "5"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupIndex" "', argument " "5"" of type '" "std::string const &""'");
    }
    arg5 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res6 = SWIG_AsPtr_std_string(argv[4], &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "lookupIndex" "', argument " "6"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupIndex" "', argument " "6"" of type '" "std::string const &""'");
    }
    arg6 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res7 = SWIG_AsPtr_std_string(argv[5], &ptr);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "lookupIndex" "', argument " "7"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupIndex" "', argument " "7"" of type '" "std::string const &""'");
    }
    arg7 = ptr;
  }
  res8 = SWIG_ConvertPtr(argv[6], &argp8, SWIGTYPE_p_XmlValue,  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "lookupIndex" "', argument " "8"" of type '" "XmlValue const &""'");
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupIndex" "', argument " "8"" of type '" "XmlValue const &""'");
  }
  arg8 = reinterpret_cast< XmlValue * >(argp8);
  {
    try {
      result = (XmlResults *)XmlContainer_lookupIndex__SWIG_3(arg1,*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6,(std::string const &)*arg7,(XmlValue const &)*arg8);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlResults, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  if (SWIG_IsNewObj(res7)) delete arg7;
  return vresult;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  if (SWIG_IsNewObj(res7)) delete arg7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_lookupIndex__SWIG_5(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  XmlQueryContext *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::string *arg7 = 0 ;
  XmlResults *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  int res5 = SWIG_OLDOBJ ;
  int res6 = SWIG_OLDOBJ ;
  int res7 = SWIG_OLDOBJ ;
  VALUE vresult = Qnil;

  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lookupIndex" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlQueryContext,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lookupIndex" "', argument " "2"" of type '" "XmlQueryContext &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupIndex" "', argument " "2"" of type '" "XmlQueryContext &""'");
  }
  arg2 = reinterpret_cast< XmlQueryContext * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "lookupIndex" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupIndex" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "lookupIndex" "', argument " "4"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupIndex" "', argument " "4"" of type '" "std::string const &""'");
    }
    arg4 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(argv[3], &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "lookupIndex" "', argument " "5"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupIndex" "', argument " "5"" of type '" "std::string const &""'");
    }
    arg5 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res6 = SWIG_AsPtr_std_string(argv[4], &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "lookupIndex" "', argument " "6"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupIndex" "', argument " "6"" of type '" "std::string const &""'");
    }
    arg6 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res7 = SWIG_AsPtr_std_string(argv[5], &ptr);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "lookupIndex" "', argument " "7"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupIndex" "', argument " "7"" of type '" "std::string const &""'");
    }
    arg7 = ptr;
  }
  {
    try {
      result = (XmlResults *)XmlContainer_lookupIndex__SWIG_3(arg1,*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6,(std::string const &)*arg7);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlResults, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  if (SWIG_IsNewObj(res7)) delete arg7;
  return vresult;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  if (SWIG_IsNewObj(res7)) delete arg7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_lookupIndex__SWIG_6(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  XmlTransaction *arg2 = 0 ;
  XmlQueryContext *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  XmlValue *arg7 = 0 ;
  u_int32_t arg8 ;
  XmlResults *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  int res5 = SWIG_OLDOBJ ;
  int res6 = SWIG_OLDOBJ ;
  void *argp7 ;
  int res7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 7) || (argc > 7)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 7)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lookupIndex" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlTransaction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lookupIndex" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupIndex" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  arg2 = reinterpret_cast< XmlTransaction * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_XmlQueryContext,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "lookupIndex" "', argument " "3"" of type '" "XmlQueryContext &""'");
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupIndex" "', argument " "3"" of type '" "XmlQueryContext &""'");
  }
  arg3 = reinterpret_cast< XmlQueryContext * >(argp3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "lookupIndex" "', argument " "4"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupIndex" "', argument " "4"" of type '" "std::string const &""'");
    }
    arg4 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(argv[3], &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "lookupIndex" "', argument " "5"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupIndex" "', argument " "5"" of type '" "std::string const &""'");
    }
    arg5 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res6 = SWIG_AsPtr_std_string(argv[4], &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "lookupIndex" "', argument " "6"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupIndex" "', argument " "6"" of type '" "std::string const &""'");
    }
    arg6 = ptr;
  }
  res7 = SWIG_ConvertPtr(argv[5], &argp7, SWIGTYPE_p_XmlValue,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "lookupIndex" "', argument " "7"" of type '" "XmlValue const &""'");
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupIndex" "', argument " "7"" of type '" "XmlValue const &""'");
  }
  arg7 = reinterpret_cast< XmlValue * >(argp7);
  ecode8 = SWIG_AsVal_int(argv[6], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "lookupIndex" "', argument " "8"" of type '" "u_int32_t""'");
  }
  arg8 = static_cast< u_int32_t >(val8);
  {
    try {
      result = (XmlResults *)XmlContainer_lookupIndex__SWIG_6(arg1,*arg2,*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6,(XmlValue const &)*arg7,arg8);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlResults, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  return vresult;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_lookupIndex__SWIG_7(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  XmlTransaction *arg2 = 0 ;
  XmlQueryContext *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  XmlValue *arg7 = 0 ;
  XmlResults *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  int res5 = SWIG_OLDOBJ ;
  int res6 = SWIG_OLDOBJ ;
  void *argp7 ;
  int res7 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lookupIndex" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlTransaction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lookupIndex" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupIndex" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  arg2 = reinterpret_cast< XmlTransaction * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_XmlQueryContext,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "lookupIndex" "', argument " "3"" of type '" "XmlQueryContext &""'");
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupIndex" "', argument " "3"" of type '" "XmlQueryContext &""'");
  }
  arg3 = reinterpret_cast< XmlQueryContext * >(argp3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "lookupIndex" "', argument " "4"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupIndex" "', argument " "4"" of type '" "std::string const &""'");
    }
    arg4 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(argv[3], &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "lookupIndex" "', argument " "5"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupIndex" "', argument " "5"" of type '" "std::string const &""'");
    }
    arg5 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res6 = SWIG_AsPtr_std_string(argv[4], &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "lookupIndex" "', argument " "6"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupIndex" "', argument " "6"" of type '" "std::string const &""'");
    }
    arg6 = ptr;
  }
  res7 = SWIG_ConvertPtr(argv[5], &argp7, SWIGTYPE_p_XmlValue,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "lookupIndex" "', argument " "7"" of type '" "XmlValue const &""'");
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupIndex" "', argument " "7"" of type '" "XmlValue const &""'");
  }
  arg7 = reinterpret_cast< XmlValue * >(argp7);
  {
    try {
      result = (XmlResults *)XmlContainer_lookupIndex__SWIG_6(arg1,*arg2,*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6,(XmlValue const &)*arg7);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlResults, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  return vresult;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_lookupIndex__SWIG_8(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  XmlTransaction *arg2 = 0 ;
  XmlQueryContext *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  XmlResults *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  int res5 = SWIG_OLDOBJ ;
  int res6 = SWIG_OLDOBJ ;
  VALUE vresult = Qnil;

  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lookupIndex" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlTransaction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lookupIndex" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupIndex" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  arg2 = reinterpret_cast< XmlTransaction * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_XmlQueryContext,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "lookupIndex" "', argument " "3"" of type '" "XmlQueryContext &""'");
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupIndex" "', argument " "3"" of type '" "XmlQueryContext &""'");
  }
  arg3 = reinterpret_cast< XmlQueryContext * >(argp3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "lookupIndex" "', argument " "4"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupIndex" "', argument " "4"" of type '" "std::string const &""'");
    }
    arg4 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(argv[3], &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "lookupIndex" "', argument " "5"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupIndex" "', argument " "5"" of type '" "std::string const &""'");
    }
    arg5 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res6 = SWIG_AsPtr_std_string(argv[4], &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "lookupIndex" "', argument " "6"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupIndex" "', argument " "6"" of type '" "std::string const &""'");
    }
    arg6 = ptr;
  }
  {
    try {
      result = (XmlResults *)XmlContainer_lookupIndex__SWIG_6(arg1,*arg2,*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlResults, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  return vresult;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_lookupIndex__SWIG_9(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  XmlTransaction *arg2 = 0 ;
  XmlQueryContext *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::string *arg7 = 0 ;
  std::string *arg8 = 0 ;
  XmlValue *arg9 = 0 ;
  u_int32_t arg10 ;
  XmlResults *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  int res5 = SWIG_OLDOBJ ;
  int res6 = SWIG_OLDOBJ ;
  int res7 = SWIG_OLDOBJ ;
  int res8 = SWIG_OLDOBJ ;
  void *argp9 ;
  int res9 = 0 ;
  int val10 ;
  int ecode10 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 9) || (argc > 9)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 9)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lookupIndex" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlTransaction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lookupIndex" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupIndex" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  arg2 = reinterpret_cast< XmlTransaction * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_XmlQueryContext,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "lookupIndex" "', argument " "3"" of type '" "XmlQueryContext &""'");
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupIndex" "', argument " "3"" of type '" "XmlQueryContext &""'");
  }
  arg3 = reinterpret_cast< XmlQueryContext * >(argp3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "lookupIndex" "', argument " "4"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupIndex" "', argument " "4"" of type '" "std::string const &""'");
    }
    arg4 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(argv[3], &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "lookupIndex" "', argument " "5"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupIndex" "', argument " "5"" of type '" "std::string const &""'");
    }
    arg5 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res6 = SWIG_AsPtr_std_string(argv[4], &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "lookupIndex" "', argument " "6"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupIndex" "', argument " "6"" of type '" "std::string const &""'");
    }
    arg6 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res7 = SWIG_AsPtr_std_string(argv[5], &ptr);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "lookupIndex" "', argument " "7"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupIndex" "', argument " "7"" of type '" "std::string const &""'");
    }
    arg7 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res8 = SWIG_AsPtr_std_string(argv[6], &ptr);
    if (!SWIG_IsOK(res8)) {
      SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "lookupIndex" "', argument " "8"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupIndex" "', argument " "8"" of type '" "std::string const &""'");
    }
    arg8 = ptr;
  }
  res9 = SWIG_ConvertPtr(argv[7], &argp9, SWIGTYPE_p_XmlValue,  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "lookupIndex" "', argument " "9"" of type '" "XmlValue const &""'");
  }
  if (!argp9) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupIndex" "', argument " "9"" of type '" "XmlValue const &""'");
  }
  arg9 = reinterpret_cast< XmlValue * >(argp9);
  ecode10 = SWIG_AsVal_int(argv[8], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "lookupIndex" "', argument " "10"" of type '" "u_int32_t""'");
  }
  arg10 = static_cast< u_int32_t >(val10);
  {
    try {
      result = (XmlResults *)XmlContainer_lookupIndex__SWIG_9(arg1,*arg2,*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6,(std::string const &)*arg7,(std::string const &)*arg8,(XmlValue const &)*arg9,arg10);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlResults, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  if (SWIG_IsNewObj(res7)) delete arg7;
  if (SWIG_IsNewObj(res8)) delete arg8;
  return vresult;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  if (SWIG_IsNewObj(res7)) delete arg7;
  if (SWIG_IsNewObj(res8)) delete arg8;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_lookupIndex__SWIG_10(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  XmlTransaction *arg2 = 0 ;
  XmlQueryContext *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::string *arg7 = 0 ;
  std::string *arg8 = 0 ;
  XmlValue *arg9 = 0 ;
  XmlResults *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  int res5 = SWIG_OLDOBJ ;
  int res6 = SWIG_OLDOBJ ;
  int res7 = SWIG_OLDOBJ ;
  int res8 = SWIG_OLDOBJ ;
  void *argp9 ;
  int res9 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 8) || (argc > 8)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 8)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lookupIndex" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlTransaction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lookupIndex" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupIndex" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  arg2 = reinterpret_cast< XmlTransaction * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_XmlQueryContext,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "lookupIndex" "', argument " "3"" of type '" "XmlQueryContext &""'");
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupIndex" "', argument " "3"" of type '" "XmlQueryContext &""'");
  }
  arg3 = reinterpret_cast< XmlQueryContext * >(argp3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "lookupIndex" "', argument " "4"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupIndex" "', argument " "4"" of type '" "std::string const &""'");
    }
    arg4 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(argv[3], &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "lookupIndex" "', argument " "5"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupIndex" "', argument " "5"" of type '" "std::string const &""'");
    }
    arg5 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res6 = SWIG_AsPtr_std_string(argv[4], &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "lookupIndex" "', argument " "6"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupIndex" "', argument " "6"" of type '" "std::string const &""'");
    }
    arg6 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res7 = SWIG_AsPtr_std_string(argv[5], &ptr);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "lookupIndex" "', argument " "7"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupIndex" "', argument " "7"" of type '" "std::string const &""'");
    }
    arg7 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res8 = SWIG_AsPtr_std_string(argv[6], &ptr);
    if (!SWIG_IsOK(res8)) {
      SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "lookupIndex" "', argument " "8"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupIndex" "', argument " "8"" of type '" "std::string const &""'");
    }
    arg8 = ptr;
  }
  res9 = SWIG_ConvertPtr(argv[7], &argp9, SWIGTYPE_p_XmlValue,  0 );
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "lookupIndex" "', argument " "9"" of type '" "XmlValue const &""'");
  }
  if (!argp9) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupIndex" "', argument " "9"" of type '" "XmlValue const &""'");
  }
  arg9 = reinterpret_cast< XmlValue * >(argp9);
  {
    try {
      result = (XmlResults *)XmlContainer_lookupIndex__SWIG_9(arg1,*arg2,*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6,(std::string const &)*arg7,(std::string const &)*arg8,(XmlValue const &)*arg9);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlResults, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  if (SWIG_IsNewObj(res7)) delete arg7;
  if (SWIG_IsNewObj(res8)) delete arg8;
  return vresult;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  if (SWIG_IsNewObj(res7)) delete arg7;
  if (SWIG_IsNewObj(res8)) delete arg8;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_lookupIndex__SWIG_11(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  XmlTransaction *arg2 = 0 ;
  XmlQueryContext *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::string *arg7 = 0 ;
  std::string *arg8 = 0 ;
  XmlResults *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  int res5 = SWIG_OLDOBJ ;
  int res6 = SWIG_OLDOBJ ;
  int res7 = SWIG_OLDOBJ ;
  int res8 = SWIG_OLDOBJ ;
  VALUE vresult = Qnil;

  if ((argc < 7) || (argc > 7)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 7)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lookupIndex" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlTransaction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lookupIndex" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupIndex" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  arg2 = reinterpret_cast< XmlTransaction * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_XmlQueryContext,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "lookupIndex" "', argument " "3"" of type '" "XmlQueryContext &""'");
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupIndex" "', argument " "3"" of type '" "XmlQueryContext &""'");
  }
  arg3 = reinterpret_cast< XmlQueryContext * >(argp3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "lookupIndex" "', argument " "4"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupIndex" "', argument " "4"" of type '" "std::string const &""'");
    }
    arg4 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(argv[3], &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "lookupIndex" "', argument " "5"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupIndex" "', argument " "5"" of type '" "std::string const &""'");
    }
    arg5 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res6 = SWIG_AsPtr_std_string(argv[4], &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "lookupIndex" "', argument " "6"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupIndex" "', argument " "6"" of type '" "std::string const &""'");
    }
    arg6 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res7 = SWIG_AsPtr_std_string(argv[5], &ptr);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "lookupIndex" "', argument " "7"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupIndex" "', argument " "7"" of type '" "std::string const &""'");
    }
    arg7 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res8 = SWIG_AsPtr_std_string(argv[6], &ptr);
    if (!SWIG_IsOK(res8)) {
      SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "lookupIndex" "', argument " "8"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupIndex" "', argument " "8"" of type '" "std::string const &""'");
    }
    arg8 = ptr;
  }
  {
    try {
      result = (XmlResults *)XmlContainer_lookupIndex__SWIG_9(arg1,*arg2,*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6,(std::string const &)*arg7,(std::string const &)*arg8);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlResults, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  if (SWIG_IsNewObj(res7)) delete arg7;
  if (SWIG_IsNewObj(res8)) delete arg8;
  return vresult;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  if (SWIG_IsNewObj(res7)) delete arg7;
  if (SWIG_IsNewObj(res8)) delete arg8;
  return Qnil;
}


SWIGINTERN VALUE _wrap_XmlContainer_lookupIndex(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[11];
  int ii;

  argc = nargs + 1;
  argv[0] = self;
  if (argc > 11) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlQueryContext, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_XmlContainer_lookupIndex__SWIG_2(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlQueryContext, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_XmlValue, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_XmlContainer_lookupIndex__SWIG_1(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlTransaction, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_XmlQueryContext, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsPtr_std_string(argv[5], (std::string**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_XmlContainer_lookupIndex__SWIG_8(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlQueryContext, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_XmlValue, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                {
                  int res = SWIG_AsVal_int(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_XmlContainer_lookupIndex__SWIG_0(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlTransaction, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_XmlQueryContext, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsPtr_std_string(argv[5], (std::string**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_XmlValue, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_XmlContainer_lookupIndex__SWIG_7(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlQueryContext, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsPtr_std_string(argv[5], (std::string**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_AsPtr_std_string(argv[6], (std::string**)(0));
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_XmlContainer_lookupIndex__SWIG_5(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlQueryContext, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsPtr_std_string(argv[5], (std::string**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_AsPtr_std_string(argv[6], (std::string**)(0));
                _v = SWIG_CheckState(res);
                if (_v) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_XmlValue, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_XmlContainer_lookupIndex__SWIG_4(nargs, args, self);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlTransaction, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_XmlQueryContext, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsPtr_std_string(argv[5], (std::string**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_XmlValue, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  {
                    int res = SWIG_AsVal_int(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    return _wrap_XmlContainer_lookupIndex__SWIG_6(nargs, args, self);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlTransaction, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_XmlQueryContext, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsPtr_std_string(argv[5], (std::string**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_AsPtr_std_string(argv[6], (std::string**)(0));
                _v = SWIG_CheckState(res);
                if (_v) {
                  int res = SWIG_AsPtr_std_string(argv[7], (std::string**)(0));
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_XmlContainer_lookupIndex__SWIG_11(nargs, args, self);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlTransaction, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_XmlQueryContext, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsPtr_std_string(argv[5], (std::string**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_AsPtr_std_string(argv[6], (std::string**)(0));
                _v = SWIG_CheckState(res);
                if (_v) {
                  int res = SWIG_AsPtr_std_string(argv[7], (std::string**)(0));
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[8], &vptr, SWIGTYPE_p_XmlValue, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      return _wrap_XmlContainer_lookupIndex__SWIG_10(nargs, args, self);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlQueryContext, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsPtr_std_string(argv[5], (std::string**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_AsPtr_std_string(argv[6], (std::string**)(0));
                _v = SWIG_CheckState(res);
                if (_v) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_XmlValue, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    {
                      int res = SWIG_AsVal_int(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      return _wrap_XmlContainer_lookupIndex__SWIG_3(nargs, args, self);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 10) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlTransaction, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_XmlQueryContext, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsPtr_std_string(argv[5], (std::string**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_AsPtr_std_string(argv[6], (std::string**)(0));
                _v = SWIG_CheckState(res);
                if (_v) {
                  int res = SWIG_AsPtr_std_string(argv[7], (std::string**)(0));
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    void *vptr = 0;
                    int res = SWIG_ConvertPtr(argv[8], &vptr, SWIGTYPE_p_XmlValue, 0);
                    _v = SWIG_CheckState(res);
                    if (_v) {
                      {
                        int res = SWIG_AsVal_int(argv[9], NULL);
                        _v = SWIG_CheckState(res);
                      }
                      if (_v) {
                        return _wrap_XmlContainer_lookupIndex__SWIG_9(nargs, args, self);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'XmlContainer_lookupIndex'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_lookupStatistics__SWIG_0(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  XmlValue *arg5 = 0 ;
  XmlStatistics *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  void *argp5 ;
  int res5 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lookupStatistics" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lookupStatistics" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupStatistics" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "lookupStatistics" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupStatistics" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "lookupStatistics" "', argument " "4"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupStatistics" "', argument " "4"" of type '" "std::string const &""'");
    }
    arg4 = ptr;
  }
  res5 = SWIG_ConvertPtr(argv[3], &argp5, SWIGTYPE_p_XmlValue,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "lookupStatistics" "', argument " "5"" of type '" "XmlValue const &""'");
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupStatistics" "', argument " "5"" of type '" "XmlValue const &""'");
  }
  arg5 = reinterpret_cast< XmlValue * >(argp5);
  {
    try {
      result = (XmlStatistics *)XmlContainer_lookupStatistics__SWIG_0(arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(XmlValue const &)*arg5);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlStatistics, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_lookupStatistics__SWIG_1(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  XmlStatistics *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  VALUE vresult = Qnil;

  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lookupStatistics" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lookupStatistics" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupStatistics" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "lookupStatistics" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupStatistics" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "lookupStatistics" "', argument " "4"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupStatistics" "', argument " "4"" of type '" "std::string const &""'");
    }
    arg4 = ptr;
  }
  {
    try {
      result = (XmlStatistics *)XmlContainer_lookupStatistics__SWIG_0(arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlStatistics, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_lookupStatistics__SWIG_2(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  XmlValue *arg7 = 0 ;
  XmlStatistics *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  int res5 = SWIG_OLDOBJ ;
  int res6 = SWIG_OLDOBJ ;
  void *argp7 ;
  int res7 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lookupStatistics" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lookupStatistics" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupStatistics" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "lookupStatistics" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupStatistics" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "lookupStatistics" "', argument " "4"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupStatistics" "', argument " "4"" of type '" "std::string const &""'");
    }
    arg4 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(argv[3], &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "lookupStatistics" "', argument " "5"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupStatistics" "', argument " "5"" of type '" "std::string const &""'");
    }
    arg5 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res6 = SWIG_AsPtr_std_string(argv[4], &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "lookupStatistics" "', argument " "6"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupStatistics" "', argument " "6"" of type '" "std::string const &""'");
    }
    arg6 = ptr;
  }
  res7 = SWIG_ConvertPtr(argv[5], &argp7, SWIGTYPE_p_XmlValue,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "lookupStatistics" "', argument " "7"" of type '" "XmlValue const &""'");
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupStatistics" "', argument " "7"" of type '" "XmlValue const &""'");
  }
  arg7 = reinterpret_cast< XmlValue * >(argp7);
  {
    try {
      result = (XmlStatistics *)XmlContainer_lookupStatistics__SWIG_2(arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6,(XmlValue const &)*arg7);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlStatistics, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_lookupStatistics__SWIG_3(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  XmlStatistics *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  int res5 = SWIG_OLDOBJ ;
  int res6 = SWIG_OLDOBJ ;
  VALUE vresult = Qnil;

  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lookupStatistics" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lookupStatistics" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupStatistics" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "lookupStatistics" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupStatistics" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "lookupStatistics" "', argument " "4"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupStatistics" "', argument " "4"" of type '" "std::string const &""'");
    }
    arg4 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(argv[3], &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "lookupStatistics" "', argument " "5"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupStatistics" "', argument " "5"" of type '" "std::string const &""'");
    }
    arg5 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res6 = SWIG_AsPtr_std_string(argv[4], &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "lookupStatistics" "', argument " "6"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupStatistics" "', argument " "6"" of type '" "std::string const &""'");
    }
    arg6 = ptr;
  }
  {
    try {
      result = (XmlStatistics *)XmlContainer_lookupStatistics__SWIG_2(arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlStatistics, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_lookupStatistics__SWIG_4(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  XmlTransaction *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  XmlValue *arg6 = 0 ;
  XmlStatistics *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  int res5 = SWIG_OLDOBJ ;
  void *argp6 ;
  int res6 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lookupStatistics" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlTransaction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lookupStatistics" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupStatistics" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  arg2 = reinterpret_cast< XmlTransaction * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "lookupStatistics" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupStatistics" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "lookupStatistics" "', argument " "4"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupStatistics" "', argument " "4"" of type '" "std::string const &""'");
    }
    arg4 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(argv[3], &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "lookupStatistics" "', argument " "5"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupStatistics" "', argument " "5"" of type '" "std::string const &""'");
    }
    arg5 = ptr;
  }
  res6 = SWIG_ConvertPtr(argv[4], &argp6, SWIGTYPE_p_XmlValue,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "lookupStatistics" "', argument " "6"" of type '" "XmlValue const &""'");
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupStatistics" "', argument " "6"" of type '" "XmlValue const &""'");
  }
  arg6 = reinterpret_cast< XmlValue * >(argp6);
  {
    try {
      result = (XmlStatistics *)XmlContainer_lookupStatistics__SWIG_4(arg1,*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(XmlValue const &)*arg6);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlStatistics, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return vresult;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_lookupStatistics__SWIG_5(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  XmlTransaction *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  XmlStatistics *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  int res5 = SWIG_OLDOBJ ;
  VALUE vresult = Qnil;

  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lookupStatistics" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlTransaction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lookupStatistics" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupStatistics" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  arg2 = reinterpret_cast< XmlTransaction * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "lookupStatistics" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupStatistics" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "lookupStatistics" "', argument " "4"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupStatistics" "', argument " "4"" of type '" "std::string const &""'");
    }
    arg4 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(argv[3], &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "lookupStatistics" "', argument " "5"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupStatistics" "', argument " "5"" of type '" "std::string const &""'");
    }
    arg5 = ptr;
  }
  {
    try {
      result = (XmlStatistics *)XmlContainer_lookupStatistics__SWIG_4(arg1,*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlStatistics, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return vresult;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_lookupStatistics__SWIG_6(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  XmlTransaction *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::string *arg7 = 0 ;
  XmlValue *arg8 = 0 ;
  XmlStatistics *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  int res5 = SWIG_OLDOBJ ;
  int res6 = SWIG_OLDOBJ ;
  int res7 = SWIG_OLDOBJ ;
  void *argp8 ;
  int res8 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 7) || (argc > 7)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 7)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lookupStatistics" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlTransaction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lookupStatistics" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupStatistics" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  arg2 = reinterpret_cast< XmlTransaction * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "lookupStatistics" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupStatistics" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "lookupStatistics" "', argument " "4"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupStatistics" "', argument " "4"" of type '" "std::string const &""'");
    }
    arg4 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(argv[3], &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "lookupStatistics" "', argument " "5"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupStatistics" "', argument " "5"" of type '" "std::string const &""'");
    }
    arg5 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res6 = SWIG_AsPtr_std_string(argv[4], &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "lookupStatistics" "', argument " "6"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupStatistics" "', argument " "6"" of type '" "std::string const &""'");
    }
    arg6 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res7 = SWIG_AsPtr_std_string(argv[5], &ptr);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "lookupStatistics" "', argument " "7"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupStatistics" "', argument " "7"" of type '" "std::string const &""'");
    }
    arg7 = ptr;
  }
  res8 = SWIG_ConvertPtr(argv[6], &argp8, SWIGTYPE_p_XmlValue,  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "lookupStatistics" "', argument " "8"" of type '" "XmlValue const &""'");
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupStatistics" "', argument " "8"" of type '" "XmlValue const &""'");
  }
  arg8 = reinterpret_cast< XmlValue * >(argp8);
  {
    try {
      result = (XmlStatistics *)XmlContainer_lookupStatistics__SWIG_6(arg1,*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6,(std::string const &)*arg7,(XmlValue const &)*arg8);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlStatistics, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  if (SWIG_IsNewObj(res7)) delete arg7;
  return vresult;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  if (SWIG_IsNewObj(res7)) delete arg7;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlContainer_lookupStatistics__SWIG_7(int argc, VALUE *argv, VALUE self) {
  XmlContainer *arg1 = (XmlContainer *) 0 ;
  XmlTransaction *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::string *arg7 = 0 ;
  XmlStatistics *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  int res5 = SWIG_OLDOBJ ;
  int res6 = SWIG_OLDOBJ ;
  int res7 = SWIG_OLDOBJ ;
  VALUE vresult = Qnil;

  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "lookupStatistics" "', argument " "1"" of type '" "XmlContainer *""'");
  }
  arg1 = reinterpret_cast< XmlContainer * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlTransaction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "lookupStatistics" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupStatistics" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  arg2 = reinterpret_cast< XmlTransaction * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "lookupStatistics" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupStatistics" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "lookupStatistics" "', argument " "4"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupStatistics" "', argument " "4"" of type '" "std::string const &""'");
    }
    arg4 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(argv[3], &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "lookupStatistics" "', argument " "5"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupStatistics" "', argument " "5"" of type '" "std::string const &""'");
    }
    arg5 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res6 = SWIG_AsPtr_std_string(argv[4], &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "lookupStatistics" "', argument " "6"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupStatistics" "', argument " "6"" of type '" "std::string const &""'");
    }
    arg6 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res7 = SWIG_AsPtr_std_string(argv[5], &ptr);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "lookupStatistics" "', argument " "7"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "lookupStatistics" "', argument " "7"" of type '" "std::string const &""'");
    }
    arg7 = ptr;
  }
  {
    try {
      result = (XmlStatistics *)XmlContainer_lookupStatistics__SWIG_6(arg1,*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6,(std::string const &)*arg7);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlStatistics, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  if (SWIG_IsNewObj(res7)) delete arg7;
  return vresult;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  if (SWIG_IsNewObj(res7)) delete arg7;
  return Qnil;
}


SWIGINTERN VALUE _wrap_XmlContainer_lookupStatistics(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[9];
  int ii;

  argc = nargs + 1;
  argv[0] = self;
  if (argc > 9) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_XmlContainer_lookupStatistics__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlTransaction, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_XmlContainer_lookupStatistics__SWIG_5(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_XmlValue, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_XmlContainer_lookupStatistics__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlTransaction, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_XmlValue, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_XmlContainer_lookupStatistics__SWIG_4(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsPtr_std_string(argv[5], (std::string**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_XmlContainer_lookupStatistics__SWIG_3(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlTransaction, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsPtr_std_string(argv[5], (std::string**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_AsPtr_std_string(argv[6], (std::string**)(0));
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_XmlContainer_lookupStatistics__SWIG_7(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsPtr_std_string(argv[5], (std::string**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_XmlValue, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_XmlContainer_lookupStatistics__SWIG_2(nargs, args, self);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlTransaction, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsPtr_std_string(argv[5], (std::string**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                int res = SWIG_AsPtr_std_string(argv[6], (std::string**)(0));
                _v = SWIG_CheckState(res);
                if (_v) {
                  void *vptr = 0;
                  int res = SWIG_ConvertPtr(argv[7], &vptr, SWIGTYPE_p_XmlValue, 0);
                  _v = SWIG_CheckState(res);
                  if (_v) {
                    return _wrap_XmlContainer_lookupStatistics__SWIG_6(nargs, args, self);
                  }
                }
              }
            }
          }
        }
      }
    }
  }

fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'XmlContainer_lookupStatistics'");
  return Qnil;
}


swig_class cXmlDocument;

SWIGINTERN VALUE
_wrap_new_XmlDocument__SWIG_0(int argc, VALUE *argv, VALUE self) {
  XmlDocument *result = 0 ;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (XmlDocument *)new XmlDocument();DATA_PTR(self) = result;

    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_XmlDocument_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_XmlDocument_allocate(int argc, VALUE *argv, VALUE self) {
#endif


    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_XmlDocument);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }


SWIGINTERN VALUE
_wrap_new_XmlDocument__SWIG_1(int argc, VALUE *argv, VALUE self) {
  XmlDocument *arg1 = 0 ;
  XmlDocument *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_XmlDocument,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XmlDocument" "', argument " "1"" of type '" "XmlDocument const &""'");
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XmlDocument" "', argument " "1"" of type '" "XmlDocument const &""'");
  }
  arg1 = reinterpret_cast< XmlDocument * >(argp1);
  {
    try {
      result = (XmlDocument *)new XmlDocument((XmlDocument const &)*arg1);DATA_PTR(self) = result;

    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_XmlDocument(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;

  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ii++) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_XmlDocument__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlDocument, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_XmlDocument__SWIG_1(nargs, args, self);
    }
  }

fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'new_XmlDocument'");
  return Qnil;
}


SWIGINTERN void
free_XmlDocument(XmlDocument *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_XmlDocument_setName(int argc, VALUE *argv, VALUE self) {
  XmlDocument *arg1 = (XmlDocument *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlDocument, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setName" "', argument " "1"" of type '" "XmlDocument *""'");
  }
  arg1 = reinterpret_cast< XmlDocument * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "setName" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "setName" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->setName((std::string const &)*arg2);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlDocument_getName(int argc, VALUE *argv, VALUE self) {
  XmlDocument *arg1 = (XmlDocument *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlDocument, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getName" "', argument " "1"" of type '" "XmlDocument const *""'");
  }
  arg1 = reinterpret_cast< XmlDocument * >(argp1);
  {
    try {
      result = ((XmlDocument const *)arg1)->getName();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlDocument_setContent__SWIG_0(int argc, VALUE *argv, VALUE self) {
  XmlDocument *arg1 = (XmlDocument *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlDocument, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setContent" "', argument " "1"" of type '" "XmlDocument *""'");
  }
  arg1 = reinterpret_cast< XmlDocument * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "setContent" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "setContent" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->setContent((std::string const &)*arg2);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlDocument_setContent__SWIG_1(int argc, VALUE *argv, VALUE self) {
  XmlDocument *arg1 = (XmlDocument *) 0 ;
  XmlData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlDocument, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setContent" "', argument " "1"" of type '" "XmlDocument *""'");
  }
  arg1 = reinterpret_cast< XmlDocument * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "setContent" "', argument " "2"" of type '" "XmlData const &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "setContent" "', argument " "2"" of type '" "XmlData const &""'");
  }
  arg2 = reinterpret_cast< XmlData * >(argp2);
  {
    try {
      (arg1)->setContent((XmlData const &)*arg2);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_XmlDocument_setContent(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;

  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlDocument, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_XmlDocument_setContent__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlDocument, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_XmlDocument_setContent__SWIG_0(nargs, args, self);
      }
    }
  }

fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'XmlDocument_setContent'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlDocument_getContentAsXmlInputStream(int argc, VALUE *argv, VALUE self) {
  XmlDocument *arg1 = (XmlDocument *) 0 ;
  XmlInputStream *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlDocument, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getContentAsXmlInputStream" "', argument " "1"" of type '" "XmlDocument const *""'");
  }
  arg1 = reinterpret_cast< XmlDocument * >(argp1);
  {
    try {
      result = (XmlInputStream *)((XmlDocument const *)arg1)->getContentAsXmlInputStream();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlInputStream, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlDocument_setContentAsXmlInputStream(int argc, VALUE *argv, VALUE self) {
  XmlDocument *arg1 = (XmlDocument *) 0 ;
  XmlInputStream *arg2 = (XmlInputStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlDocument, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setContentAsXmlInputStream" "', argument " "1"" of type '" "XmlDocument *""'");
  }
  arg1 = reinterpret_cast< XmlDocument * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_XmlInputStream, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "setContentAsXmlInputStream" "', argument " "2"" of type '" "XmlInputStream *""'");
  }
  arg2 = reinterpret_cast< XmlInputStream * >(argp2);
  {
    try {
      (arg1)->setContentAsXmlInputStream(arg2);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlDocument_getContentAsEventReader(int argc, VALUE *argv, VALUE self) {
  XmlDocument *arg1 = (XmlDocument *) 0 ;
  XmlEventReader *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlDocument, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getContentAsEventReader" "', argument " "1"" of type '" "XmlDocument const *""'");
  }
  arg1 = reinterpret_cast< XmlDocument * >(argp1);
  {
    try {
      {
        XmlEventReader &_result_ref = ((XmlDocument const *)arg1)->getContentAsEventReader();
        result = (XmlEventReader *) &_result_ref;
      }
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlEventReader, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlDocument_setContentAsEventReader(int argc, VALUE *argv, VALUE self) {
  XmlDocument *arg1 = (XmlDocument *) 0 ;
  XmlEventReader *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlDocument, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setContentAsEventReader" "', argument " "1"" of type '" "XmlDocument *""'");
  }
  arg1 = reinterpret_cast< XmlDocument * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlEventReader,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "setContentAsEventReader" "', argument " "2"" of type '" "XmlEventReader &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "setContentAsEventReader" "', argument " "2"" of type '" "XmlEventReader &""'");
  }
  arg2 = reinterpret_cast< XmlEventReader * >(argp2);
  {
    try {
      (arg1)->setContentAsEventReader(*arg2);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlDocument_getContentAsEventWriter(int argc, VALUE *argv, VALUE self) {
  XmlDocument *arg1 = (XmlDocument *) 0 ;
  XmlEventWriter *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlDocument, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getContentAsEventWriter" "', argument " "1"" of type '" "XmlDocument *""'");
  }
  arg1 = reinterpret_cast< XmlDocument * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlEventWriter,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "getContentAsEventWriter" "', argument " "2"" of type '" "XmlEventWriter &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getContentAsEventWriter" "', argument " "2"" of type '" "XmlEventWriter &""'");
  }
  arg2 = reinterpret_cast< XmlEventWriter * >(argp2);
  {
    try {
      (arg1)->getContentAsEventWriter(*arg2);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlDocument_fetchAllData(int argc, VALUE *argv, VALUE self) {
  XmlDocument *arg1 = (XmlDocument *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlDocument, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fetchAllData" "', argument " "1"" of type '" "XmlDocument *""'");
  }
  arg1 = reinterpret_cast< XmlDocument * >(argp1);
  {
    try {
      (arg1)->fetchAllData();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlDocument_setMetaData__SWIG_0(int argc, VALUE *argv, VALUE self) {
  XmlDocument *arg1 = (XmlDocument *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  XmlValue *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 ;
  int res4 = 0 ;

  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlDocument, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setMetaData" "', argument " "1"" of type '" "XmlDocument *""'");
  }
  arg1 = reinterpret_cast< XmlDocument * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "setMetaData" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "setMetaData" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "setMetaData" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "setMetaData" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_XmlValue,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "setMetaData" "', argument " "4"" of type '" "XmlValue const &""'");
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "setMetaData" "', argument " "4"" of type '" "XmlValue const &""'");
  }
  arg4 = reinterpret_cast< XmlValue * >(argp4);
  {
    try {
      (arg1)->setMetaData((std::string const &)*arg2,(std::string const &)*arg3,(XmlValue const &)*arg4);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlDocument_getMetaData__SWIG_0(int argc, VALUE *argv, VALUE self) {
  XmlDocument *arg1 = (XmlDocument *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  XmlValue *arg4 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlDocument, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getMetaData" "', argument " "1"" of type '" "XmlDocument *""'");
  }
  arg1 = reinterpret_cast< XmlDocument * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "getMetaData" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getMetaData" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "getMetaData" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getMetaData" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_XmlValue,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "getMetaData" "', argument " "4"" of type '" "XmlValue &""'");
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getMetaData" "', argument " "4"" of type '" "XmlValue &""'");
  }
  arg4 = reinterpret_cast< XmlValue * >(argp4);
  {
    try {
      result = (bool)(arg1)->getMetaData((std::string const &)*arg2,(std::string const &)*arg3,*arg4);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlDocument_removeMetaData(int argc, VALUE *argv, VALUE self) {
  XmlDocument *arg1 = (XmlDocument *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;

  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlDocument, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "removeMetaData" "', argument " "1"" of type '" "XmlDocument *""'");
  }
  arg1 = reinterpret_cast< XmlDocument * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "removeMetaData" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "removeMetaData" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "removeMetaData" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "removeMetaData" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->removeMetaData((std::string const &)*arg2,(std::string const &)*arg3);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlDocument_setMetaData__SWIG_1(int argc, VALUE *argv, VALUE self) {
  XmlDocument *arg1 = (XmlDocument *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  XmlData *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 ;
  int res4 = 0 ;

  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlDocument, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setMetaData" "', argument " "1"" of type '" "XmlDocument *""'");
  }
  arg1 = reinterpret_cast< XmlDocument * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "setMetaData" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "setMetaData" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "setMetaData" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "setMetaData" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_XmlData,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "setMetaData" "', argument " "4"" of type '" "XmlData const &""'");
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "setMetaData" "', argument " "4"" of type '" "XmlData const &""'");
  }
  arg4 = reinterpret_cast< XmlData * >(argp4);
  {
    try {
      (arg1)->setMetaData((std::string const &)*arg2,(std::string const &)*arg3,(XmlData const &)*arg4);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
}


SWIGINTERN VALUE _wrap_XmlDocument_setMetaData(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;

  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlDocument, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_XmlValue, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_XmlDocument_setMetaData__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlDocument, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_XmlData, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_XmlDocument_setMetaData__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }

fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'XmlDocument_setMetaData'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlDocument_getMetaData__SWIG_1(int argc, VALUE *argv, VALUE self) {
  XmlDocument *arg1 = (XmlDocument *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  XmlData *arg4 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlDocument, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getMetaData" "', argument " "1"" of type '" "XmlDocument *""'");
  }
  arg1 = reinterpret_cast< XmlDocument * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "getMetaData" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getMetaData" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "getMetaData" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getMetaData" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_XmlData,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "getMetaData" "', argument " "4"" of type '" "XmlData &""'");
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getMetaData" "', argument " "4"" of type '" "XmlData &""'");
  }
  arg4 = reinterpret_cast< XmlData * >(argp4);
  {
    try {
      result = (bool)(arg1)->getMetaData((std::string const &)*arg2,(std::string const &)*arg3,*arg4);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlDocument_getContentAsString(int argc, VALUE *argv, VALUE self) {
  XmlDocument *arg1 = (XmlDocument *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlDocument, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getContentAsString" "', argument " "1"" of type '" "XmlDocument const *""'");
  }
  arg1 = reinterpret_cast< XmlDocument * >(argp1);
  {
    try {
      result = XmlDocument_getContentAsString((XmlDocument const *)arg1);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlDocument_getContent(int argc, VALUE *argv, VALUE self) {
  XmlDocument *arg1 = (XmlDocument *) 0 ;
  XmlData *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlDocument, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getContent" "', argument " "1"" of type '" "XmlDocument const *""'");
  }
  arg1 = reinterpret_cast< XmlDocument * >(argp1);
  {
    try {
      result = (XmlData *)XmlDocument_getContent((XmlDocument const *)arg1);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlData, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlDocument_getMetaData__SWIG_2(int argc, VALUE *argv, VALUE self) {
  XmlDocument *arg1 = (XmlDocument *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  XmlData *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  VALUE vresult = Qnil;

  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlDocument, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getMetaData" "', argument " "1"" of type '" "XmlDocument *""'");
  }
  arg1 = reinterpret_cast< XmlDocument * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "getMetaData" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getMetaData" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "getMetaData" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getMetaData" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  {
    try {
      result = (XmlData *)XmlDocument_getMetaData__SWIG_2(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlData, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
}


SWIGINTERN VALUE _wrap_XmlDocument_getMetaData(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;

  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlDocument, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_XmlDocument_getMetaData__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlDocument, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_XmlData, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_XmlDocument_getMetaData__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlDocument, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_XmlValue, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_XmlDocument_getMetaData__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }

fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'XmlDocument_getMetaData'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlDocument_getMetaDataIterator(int argc, VALUE *argv, VALUE self) {
  XmlDocument *arg1 = (XmlDocument *) 0 ;
  XmlMetaDataIterator *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlDocument, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getMetaDataIterator" "', argument " "1"" of type '" "XmlDocument const *""'");
  }
  arg1 = reinterpret_cast< XmlDocument * >(argp1);
  {
    try {
      result = (XmlMetaDataIterator *)XmlDocument_getMetaDataIterator((XmlDocument const *)arg1);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlMetaDataIterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlDocument_equals(int argc, VALUE *argv, VALUE self) {
  XmlDocument *arg1 = (XmlDocument *) 0 ;
  XmlDocument *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlDocument, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "equals" "', argument " "1"" of type '" "XmlDocument const *""'");
  }
  arg1 = reinterpret_cast< XmlDocument * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlDocument,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "equals" "', argument " "2"" of type '" "XmlDocument const &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "equals" "', argument " "2"" of type '" "XmlDocument const &""'");
  }
  arg2 = reinterpret_cast< XmlDocument * >(argp2);
  {
    try {
      result = (bool)XmlDocument_equals((XmlDocument const *)arg1,(XmlDocument const &)*arg2);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


swig_class cXmlMetaDataIterator;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_XmlMetaDataIterator_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_XmlMetaDataIterator_allocate(int argc, VALUE *argv, VALUE self) {
#endif


    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_XmlMetaDataIterator);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }


SWIGINTERN VALUE
_wrap_new_XmlMetaDataIterator(int argc, VALUE *argv, VALUE self) {
  XmlMetaDataIterator *arg1 = 0 ;
  XmlMetaDataIterator *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_XmlMetaDataIterator,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XmlMetaDataIterator" "', argument " "1"" of type '" "XmlMetaDataIterator const &""'");
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XmlMetaDataIterator" "', argument " "1"" of type '" "XmlMetaDataIterator const &""'");
  }
  arg1 = reinterpret_cast< XmlMetaDataIterator * >(argp1);
  {
    try {
      result = (XmlMetaDataIterator *)new XmlMetaDataIterator((XmlMetaDataIterator const &)*arg1);DATA_PTR(self) = result;

    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_XmlMetaDataIterator(XmlMetaDataIterator *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_XmlMetaDataIterator_reset(int argc, VALUE *argv, VALUE self) {
  XmlMetaDataIterator *arg1 = (XmlMetaDataIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlMetaDataIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "reset" "', argument " "1"" of type '" "XmlMetaDataIterator *""'");
  }
  arg1 = reinterpret_cast< XmlMetaDataIterator * >(argp1);
  {
    try {
      (arg1)->reset();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlMetaDataIterator_next(int argc, VALUE *argv, VALUE self) {
  XmlMetaDataIterator *arg1 = (XmlMetaDataIterator *) 0 ;
  XmlMetaData *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlMetaDataIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "next" "', argument " "1"" of type '" "XmlMetaDataIterator *""'");
  }
  arg1 = reinterpret_cast< XmlMetaDataIterator * >(argp1);
  {
    try {
      result = (XmlMetaData *)XmlMetaDataIterator_next(arg1);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlMetaData, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


swig_class cXmlMetaData;

SWIGINTERN void
free_XmlMetaData(XmlMetaData *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_XmlMetaData_get_uri(int argc, VALUE *argv, VALUE self) {
  XmlMetaData *arg1 = (XmlMetaData *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_uri" "', argument " "1"" of type '" "XmlMetaData const *""'");
  }
  arg1 = reinterpret_cast< XmlMetaData * >(argp1);
  {
    try {
      {
        std::string const &_result_ref = ((XmlMetaData const *)arg1)->get_uri();
        result = (std::string *) &_result_ref;
      }
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_std_string(static_cast< std::string >(*result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlMetaData_get_name(int argc, VALUE *argv, VALUE self) {
  XmlMetaData *arg1 = (XmlMetaData *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_name" "', argument " "1"" of type '" "XmlMetaData const *""'");
  }
  arg1 = reinterpret_cast< XmlMetaData * >(argp1);
  {
    try {
      {
        std::string const &_result_ref = ((XmlMetaData const *)arg1)->get_name();
        result = (std::string *) &_result_ref;
      }
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_std_string(static_cast< std::string >(*result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlMetaData_get_value(int argc, VALUE *argv, VALUE self) {
  XmlMetaData *arg1 = (XmlMetaData *) 0 ;
  XmlValue *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlMetaData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_value" "', argument " "1"" of type '" "XmlMetaData const *""'");
  }
  arg1 = reinterpret_cast< XmlMetaData * >(argp1);
  {
    try {
      {
        XmlValue const &_result_ref = ((XmlMetaData const *)arg1)->get_value();
        result = (XmlValue *) &_result_ref;
      }
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlValue, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_XmlMetaData_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_XmlMetaData_allocate(int argc, VALUE *argv, VALUE self) {
#endif


    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_XmlMetaData);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }


SWIGINTERN VALUE
_wrap_new_XmlMetaData(int argc, VALUE *argv, VALUE self) {
  XmlMetaData *result = 0 ;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (XmlMetaData *)new XmlMetaData();DATA_PTR(self) = result;

    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return self;
fail:
  return Qnil;
}


swig_class cXmlQueryContext;

SWIGINTERN VALUE
_wrap_new_XmlQueryContext__SWIG_0(int argc, VALUE *argv, VALUE self) {
  XmlQueryContext *result = 0 ;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (XmlQueryContext *)new XmlQueryContext();DATA_PTR(self) = result;

    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_XmlQueryContext_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_XmlQueryContext_allocate(int argc, VALUE *argv, VALUE self) {
#endif


    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_XmlQueryContext);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }


SWIGINTERN VALUE
_wrap_new_XmlQueryContext__SWIG_1(int argc, VALUE *argv, VALUE self) {
  XmlQueryContext *arg1 = 0 ;
  XmlQueryContext *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_XmlQueryContext,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XmlQueryContext" "', argument " "1"" of type '" "XmlQueryContext const &""'");
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XmlQueryContext" "', argument " "1"" of type '" "XmlQueryContext const &""'");
  }
  arg1 = reinterpret_cast< XmlQueryContext * >(argp1);
  {
    try {
      result = (XmlQueryContext *)new XmlQueryContext((XmlQueryContext const &)*arg1);DATA_PTR(self) = result;

    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_XmlQueryContext(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;

  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ii++) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_XmlQueryContext__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlQueryContext, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_XmlQueryContext__SWIG_1(nargs, args, self);
    }
  }

fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'new_XmlQueryContext'");
  return Qnil;
}


SWIGINTERN void
free_XmlQueryContext(XmlQueryContext *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_XmlQueryContext_setNamespace(int argc, VALUE *argv, VALUE self) {
  XmlQueryContext *arg1 = (XmlQueryContext *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;

  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlQueryContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setNamespace" "', argument " "1"" of type '" "XmlQueryContext *""'");
  }
  arg1 = reinterpret_cast< XmlQueryContext * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "setNamespace" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "setNamespace" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "setNamespace" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "setNamespace" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->setNamespace((std::string const &)*arg2,(std::string const &)*arg3);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlQueryContext_getNamespace(int argc, VALUE *argv, VALUE self) {
  XmlQueryContext *arg1 = (XmlQueryContext *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  VALUE vresult = Qnil;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlQueryContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getNamespace" "', argument " "1"" of type '" "XmlQueryContext *""'");
  }
  arg1 = reinterpret_cast< XmlQueryContext * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "getNamespace" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getNamespace" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  {
    try {
      result = (arg1)->getNamespace((std::string const &)*arg2);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlQueryContext_removeNamespace(int argc, VALUE *argv, VALUE self) {
  XmlQueryContext *arg1 = (XmlQueryContext *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlQueryContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "removeNamespace" "', argument " "1"" of type '" "XmlQueryContext *""'");
  }
  arg1 = reinterpret_cast< XmlQueryContext * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "removeNamespace" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "removeNamespace" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->removeNamespace((std::string const &)*arg2);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlQueryContext_clearNamespaces(int argc, VALUE *argv, VALUE self) {
  XmlQueryContext *arg1 = (XmlQueryContext *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlQueryContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "clearNamespaces" "', argument " "1"" of type '" "XmlQueryContext *""'");
  }
  arg1 = reinterpret_cast< XmlQueryContext * >(argp1);
  {
    try {
      (arg1)->clearNamespaces();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlQueryContext_setVariableValue__SWIG_0(int argc, VALUE *argv, VALUE self) {
  XmlQueryContext *arg1 = (XmlQueryContext *) 0 ;
  std::string *arg2 = 0 ;
  XmlValue *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;

  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlQueryContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setVariableValue" "', argument " "1"" of type '" "XmlQueryContext *""'");
  }
  arg1 = reinterpret_cast< XmlQueryContext * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "setVariableValue" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "setVariableValue" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_XmlValue,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "setVariableValue" "', argument " "3"" of type '" "XmlValue const &""'");
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "setVariableValue" "', argument " "3"" of type '" "XmlValue const &""'");
  }
  arg3 = reinterpret_cast< XmlValue * >(argp3);
  {
    try {
      (arg1)->setVariableValue((std::string const &)*arg2,(XmlValue const &)*arg3);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlQueryContext_setVariableValue__SWIG_1(int argc, VALUE *argv, VALUE self) {
  XmlQueryContext *arg1 = (XmlQueryContext *) 0 ;
  std::string *arg2 = 0 ;
  XmlResults *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;

  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlQueryContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setVariableValue" "', argument " "1"" of type '" "XmlQueryContext *""'");
  }
  arg1 = reinterpret_cast< XmlQueryContext * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "setVariableValue" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "setVariableValue" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_XmlResults,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "setVariableValue" "', argument " "3"" of type '" "XmlResults &""'");
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "setVariableValue" "', argument " "3"" of type '" "XmlResults &""'");
  }
  arg3 = reinterpret_cast< XmlResults * >(argp3);
  {
    try {
      (arg1)->setVariableValue((std::string const &)*arg2,*arg3);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_XmlQueryContext_setVariableValue(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;

  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlQueryContext, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_XmlValue, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_XmlQueryContext_setVariableValue__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlQueryContext, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_XmlResults, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_XmlQueryContext_setVariableValue__SWIG_1(nargs, args, self);
        }
      }
    }
  }

fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'XmlQueryContext_setVariableValue'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlQueryContext_setBaseURI(int argc, VALUE *argv, VALUE self) {
  XmlQueryContext *arg1 = (XmlQueryContext *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlQueryContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setBaseURI" "', argument " "1"" of type '" "XmlQueryContext *""'");
  }
  arg1 = reinterpret_cast< XmlQueryContext * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "setBaseURI" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "setBaseURI" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->setBaseURI((std::string const &)*arg2);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlQueryContext_getBaseURI(int argc, VALUE *argv, VALUE self) {
  XmlQueryContext *arg1 = (XmlQueryContext *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlQueryContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getBaseURI" "', argument " "1"" of type '" "XmlQueryContext const *""'");
  }
  arg1 = reinterpret_cast< XmlQueryContext * >(argp1);
  {
    try {
      result = ((XmlQueryContext const *)arg1)->getBaseURI();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlQueryContext_setReturnType(int argc, VALUE *argv, VALUE self) {
  XmlQueryContext *arg1 = (XmlQueryContext *) 0 ;
  enum XmlQueryContext::ReturnType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlQueryContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setReturnType" "', argument " "1"" of type '" "XmlQueryContext *""'");
  }
  arg1 = reinterpret_cast< XmlQueryContext * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "setReturnType" "', argument " "2"" of type '" "enum XmlQueryContext::ReturnType""'");
  }
  arg2 = static_cast< enum XmlQueryContext::ReturnType >(val2);
  {
    try {
      (arg1)->setReturnType(arg2);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlQueryContext_getReturnType(int argc, VALUE *argv, VALUE self) {
  XmlQueryContext *arg1 = (XmlQueryContext *) 0 ;
  enum XmlQueryContext::ReturnType result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlQueryContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getReturnType" "', argument " "1"" of type '" "XmlQueryContext const *""'");
  }
  arg1 = reinterpret_cast< XmlQueryContext * >(argp1);
  {
    try {
      result = (enum XmlQueryContext::ReturnType)((XmlQueryContext const *)arg1)->getReturnType();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlQueryContext_setEvaluationType(int argc, VALUE *argv, VALUE self) {
  XmlQueryContext *arg1 = (XmlQueryContext *) 0 ;
  enum XmlQueryContext::EvaluationType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlQueryContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setEvaluationType" "', argument " "1"" of type '" "XmlQueryContext *""'");
  }
  arg1 = reinterpret_cast< XmlQueryContext * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "setEvaluationType" "', argument " "2"" of type '" "enum XmlQueryContext::EvaluationType""'");
  }
  arg2 = static_cast< enum XmlQueryContext::EvaluationType >(val2);
  {
    try {
      (arg1)->setEvaluationType(arg2);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlQueryContext_getEvaluationType(int argc, VALUE *argv, VALUE self) {
  XmlQueryContext *arg1 = (XmlQueryContext *) 0 ;
  enum XmlQueryContext::EvaluationType result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlQueryContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getEvaluationType" "', argument " "1"" of type '" "XmlQueryContext const *""'");
  }
  arg1 = reinterpret_cast< XmlQueryContext * >(argp1);
  {
    try {
      result = (enum XmlQueryContext::EvaluationType)((XmlQueryContext const *)arg1)->getEvaluationType();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlQueryContext_setDefaultCollection(int argc, VALUE *argv, VALUE self) {
  XmlQueryContext *arg1 = (XmlQueryContext *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlQueryContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setDefaultCollection" "', argument " "1"" of type '" "XmlQueryContext *""'");
  }
  arg1 = reinterpret_cast< XmlQueryContext * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "setDefaultCollection" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "setDefaultCollection" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->setDefaultCollection((std::string const &)*arg2);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlQueryContext_getDefaultCollection(int argc, VALUE *argv, VALUE self) {
  XmlQueryContext *arg1 = (XmlQueryContext *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlQueryContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getDefaultCollection" "', argument " "1"" of type '" "XmlQueryContext const *""'");
  }
  arg1 = reinterpret_cast< XmlQueryContext * >(argp1);
  {
    try {
      result = ((XmlQueryContext const *)arg1)->getDefaultCollection();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlQueryContext_interruptQuery(int argc, VALUE *argv, VALUE self) {
  XmlQueryContext *arg1 = (XmlQueryContext *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlQueryContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "interruptQuery" "', argument " "1"" of type '" "XmlQueryContext *""'");
  }
  arg1 = reinterpret_cast< XmlQueryContext * >(argp1);
  {
    try {
      (arg1)->interruptQuery();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlQueryContext_setQueryTimeoutSeconds(int argc, VALUE *argv, VALUE self) {
  XmlQueryContext *arg1 = (XmlQueryContext *) 0 ;
  u_int32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlQueryContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setQueryTimeoutSeconds" "', argument " "1"" of type '" "XmlQueryContext *""'");
  }
  arg1 = reinterpret_cast< XmlQueryContext * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "setQueryTimeoutSeconds" "', argument " "2"" of type '" "u_int32_t""'");
  }
  arg2 = static_cast< u_int32_t >(val2);
  {
    try {
      (arg1)->setQueryTimeoutSeconds(arg2);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlQueryContext_getQueryTimeoutSeconds(int argc, VALUE *argv, VALUE self) {
  XmlQueryContext *arg1 = (XmlQueryContext *) 0 ;
  u_int32_t result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlQueryContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getQueryTimeoutSeconds" "', argument " "1"" of type '" "XmlQueryContext const *""'");
  }
  arg1 = reinterpret_cast< XmlQueryContext * >(argp1);
  {
    try {
      result = ((XmlQueryContext const *)arg1)->getQueryTimeoutSeconds();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlQueryContext_getVariableValue(int argc, VALUE *argv, VALUE self) {
  XmlQueryContext *arg1 = (XmlQueryContext *) 0 ;
  std::string *arg2 = 0 ;
  XmlValue *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  VALUE vresult = Qnil;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlQueryContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getVariableValue" "', argument " "1"" of type '" "XmlQueryContext const *""'");
  }
  arg1 = reinterpret_cast< XmlQueryContext * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "getVariableValue" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getVariableValue" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  {
    try {
      result = (XmlValue *)XmlQueryContext_getVariableValue((XmlQueryContext const *)arg1,(std::string const &)*arg2);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlValue, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlQueryContext_getVariableValues(int argc, VALUE *argv, VALUE self) {
  XmlQueryContext *arg1 = (XmlQueryContext *) 0 ;
  std::string *arg2 = 0 ;
  XmlResults *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  VALUE vresult = Qnil;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlQueryContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getVariableValues" "', argument " "1"" of type '" "XmlQueryContext const *""'");
  }
  arg1 = reinterpret_cast< XmlQueryContext * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "getVariableValues" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getVariableValues" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  {
    try {
      result = (XmlResults *)XmlQueryContext_getVariableValues((XmlQueryContext const *)arg1,(std::string const &)*arg2);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlResults, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


swig_class cXmlResults;

SWIGINTERN VALUE
_wrap_new_XmlResults__SWIG_0(int argc, VALUE *argv, VALUE self) {
  XmlResults *result = 0 ;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (XmlResults *)new XmlResults();DATA_PTR(self) = result;

    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_XmlResults(XmlResults *arg1) {
    delete arg1;
}

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_XmlResults_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_XmlResults_allocate(int argc, VALUE *argv, VALUE self) {
#endif


    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_XmlResults);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }


SWIGINTERN VALUE
_wrap_new_XmlResults__SWIG_1(int argc, VALUE *argv, VALUE self) {
  XmlResults *arg1 = 0 ;
  XmlResults *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_XmlResults,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XmlResults" "', argument " "1"" of type '" "XmlResults const &""'");
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XmlResults" "', argument " "1"" of type '" "XmlResults const &""'");
  }
  arg1 = reinterpret_cast< XmlResults * >(argp1);
  {
    try {
      result = (XmlResults *)new XmlResults((XmlResults const &)*arg1);DATA_PTR(self) = result;

    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_XmlResults(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;

  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ii++) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_XmlResults__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlResults, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_XmlResults__SWIG_1(nargs, args, self);
    }
  }

fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'new_XmlResults'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlResults_hasNext(int argc, VALUE *argv, VALUE self) {
  XmlResults *arg1 = (XmlResults *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlResults, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hasNext" "', argument " "1"" of type '" "XmlResults *""'");
  }
  arg1 = reinterpret_cast< XmlResults * >(argp1);
  {
    try {
      result = (bool)(arg1)->hasNext();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlResults_hasPrevious(int argc, VALUE *argv, VALUE self) {
  XmlResults *arg1 = (XmlResults *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlResults, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hasPrevious" "', argument " "1"" of type '" "XmlResults *""'");
  }
  arg1 = reinterpret_cast< XmlResults * >(argp1);
  {
    try {
      result = (bool)(arg1)->hasPrevious();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlResults_next__SWIG_0(int argc, VALUE *argv, VALUE self) {
  XmlResults *arg1 = (XmlResults *) 0 ;
  XmlValue *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlResults, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "next" "', argument " "1"" of type '" "XmlResults *""'");
  }
  arg1 = reinterpret_cast< XmlResults * >(argp1);
  {
    try {
      result = (XmlValue *)XmlResults_next__SWIG_0(arg1);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlResults_previous__SWIG_0(int argc, VALUE *argv, VALUE self) {
  XmlResults *arg1 = (XmlResults *) 0 ;
  XmlValue *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlResults, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "previous" "', argument " "1"" of type '" "XmlResults *""'");
  }
  arg1 = reinterpret_cast< XmlResults * >(argp1);
  {
    try {
      result = (XmlValue *)XmlResults_previous__SWIG_0(arg1);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlResults_peek__SWIG_0(int argc, VALUE *argv, VALUE self) {
  XmlResults *arg1 = (XmlResults *) 0 ;
  XmlValue *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlResults, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peek" "', argument " "1"" of type '" "XmlResults *""'");
  }
  arg1 = reinterpret_cast< XmlResults * >(argp1);
  {
    try {
      result = (XmlValue *)XmlResults_peek__SWIG_0(arg1);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlResults_getEvaluationType(int argc, VALUE *argv, VALUE self) {
  XmlResults *arg1 = (XmlResults *) 0 ;
  enum XmlQueryContext::EvaluationType result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlResults, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getEvaluationType" "', argument " "1"" of type '" "XmlResults const *""'");
  }
  arg1 = reinterpret_cast< XmlResults * >(argp1);
  {
    try {
      result = (enum XmlQueryContext::EvaluationType)((XmlResults const *)arg1)->getEvaluationType();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlResults_next__SWIG_1(int argc, VALUE *argv, VALUE self) {
  XmlResults *arg1 = (XmlResults *) 0 ;
  XmlDocument *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlResults, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "next" "', argument " "1"" of type '" "XmlResults *""'");
  }
  arg1 = reinterpret_cast< XmlResults * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlDocument,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "next" "', argument " "2"" of type '" "XmlDocument &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "next" "', argument " "2"" of type '" "XmlDocument &""'");
  }
  arg2 = reinterpret_cast< XmlDocument * >(argp2);
  {
    try {
      result = (bool)(arg1)->next(*arg2);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_XmlResults_next(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;

  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlResults, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_XmlResults_next__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlResults, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlDocument, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_XmlResults_next__SWIG_1(nargs, args, self);
      }
    }
  }

fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'XmlResults_next'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlResults_previous__SWIG_1(int argc, VALUE *argv, VALUE self) {
  XmlResults *arg1 = (XmlResults *) 0 ;
  XmlDocument *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlResults, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "previous" "', argument " "1"" of type '" "XmlResults *""'");
  }
  arg1 = reinterpret_cast< XmlResults * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlDocument,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "previous" "', argument " "2"" of type '" "XmlDocument &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "previous" "', argument " "2"" of type '" "XmlDocument &""'");
  }
  arg2 = reinterpret_cast< XmlDocument * >(argp2);
  {
    try {
      result = (bool)(arg1)->previous(*arg2);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_XmlResults_previous(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;

  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlResults, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_XmlResults_previous__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlResults, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlDocument, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_XmlResults_previous__SWIG_1(nargs, args, self);
      }
    }
  }

fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'XmlResults_previous'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlResults_peek__SWIG_1(int argc, VALUE *argv, VALUE self) {
  XmlResults *arg1 = (XmlResults *) 0 ;
  XmlDocument *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlResults, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "peek" "', argument " "1"" of type '" "XmlResults *""'");
  }
  arg1 = reinterpret_cast< XmlResults * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlDocument,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "peek" "', argument " "2"" of type '" "XmlDocument &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "peek" "', argument " "2"" of type '" "XmlDocument &""'");
  }
  arg2 = reinterpret_cast< XmlDocument * >(argp2);
  {
    try {
      result = (bool)(arg1)->peek(*arg2);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_XmlResults_peek(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;

  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlResults, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_XmlResults_peek__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlResults, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlDocument, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_XmlResults_peek__SWIG_1(nargs, args, self);
      }
    }
  }

fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'XmlResults_peek'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlResults_reset(int argc, VALUE *argv, VALUE self) {
  XmlResults *arg1 = (XmlResults *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlResults, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "reset" "', argument " "1"" of type '" "XmlResults *""'");
  }
  arg1 = reinterpret_cast< XmlResults * >(argp1);
  {
    try {
      (arg1)->reset();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlResults_size(int argc, VALUE *argv, VALUE self) {
  XmlResults *arg1 = (XmlResults *) 0 ;
  size_t result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlResults, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "size" "', argument " "1"" of type '" "XmlResults const *""'");
  }
  arg1 = reinterpret_cast< XmlResults * >(argp1);
  {
    try {
      result = ((XmlResults const *)arg1)->size();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlResults_add(int argc, VALUE *argv, VALUE self) {
  XmlResults *arg1 = (XmlResults *) 0 ;
  XmlValue *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlResults, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add" "', argument " "1"" of type '" "XmlResults *""'");
  }
  arg1 = reinterpret_cast< XmlResults * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlValue,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "add" "', argument " "2"" of type '" "XmlValue const &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "add" "', argument " "2"" of type '" "XmlValue const &""'");
  }
  arg2 = reinterpret_cast< XmlValue * >(argp2);
  {
    try {
      (arg1)->add((XmlValue const &)*arg2);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return Qnil;
fail:
  return Qnil;
}


swig_class cXmlUpdateContext;

SWIGINTERN VALUE
_wrap_new_XmlUpdateContext__SWIG_0(int argc, VALUE *argv, VALUE self) {
  XmlUpdateContext *result = 0 ;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (XmlUpdateContext *)new XmlUpdateContext();DATA_PTR(self) = result;

    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_XmlUpdateContext_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_XmlUpdateContext_allocate(int argc, VALUE *argv, VALUE self) {
#endif


    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_XmlUpdateContext);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }


SWIGINTERN VALUE
_wrap_new_XmlUpdateContext__SWIG_1(int argc, VALUE *argv, VALUE self) {
  XmlUpdateContext *arg1 = 0 ;
  XmlUpdateContext *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_XmlUpdateContext,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XmlUpdateContext" "', argument " "1"" of type '" "XmlUpdateContext const &""'");
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XmlUpdateContext" "', argument " "1"" of type '" "XmlUpdateContext const &""'");
  }
  arg1 = reinterpret_cast< XmlUpdateContext * >(argp1);
  {
    try {
      result = (XmlUpdateContext *)new XmlUpdateContext((XmlUpdateContext const &)*arg1);DATA_PTR(self) = result;

    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_XmlUpdateContext(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;

  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ii++) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_XmlUpdateContext__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlUpdateContext, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_XmlUpdateContext__SWIG_1(nargs, args, self);
    }
  }

fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'new_XmlUpdateContext'");
  return Qnil;
}


SWIGINTERN void
free_XmlUpdateContext(XmlUpdateContext *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_XmlUpdateContext_setApplyChangesToContainers(int argc, VALUE *argv, VALUE self) {
  XmlUpdateContext *arg1 = (XmlUpdateContext *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlUpdateContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setApplyChangesToContainers" "', argument " "1"" of type '" "XmlUpdateContext *""'");
  }
  arg1 = reinterpret_cast< XmlUpdateContext * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "setApplyChangesToContainers" "', argument " "2"" of type '" "bool""'");
  }
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->setApplyChangesToContainers(arg2);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlUpdateContext_getApplyChangesToContainers(int argc, VALUE *argv, VALUE self) {
  XmlUpdateContext *arg1 = (XmlUpdateContext *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlUpdateContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getApplyChangesToContainers" "', argument " "1"" of type '" "XmlUpdateContext const *""'");
  }
  arg1 = reinterpret_cast< XmlUpdateContext * >(argp1);
  {
    try {
      result = (bool)((XmlUpdateContext const *)arg1)->getApplyChangesToContainers();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


swig_class cXmlValue;

SWIGINTERN VALUE
_wrap_new_XmlValue__SWIG_0(int argc, VALUE *argv, VALUE self) {
  XmlValue *result = 0 ;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (XmlValue *)new XmlValue();DATA_PTR(self) = result;

    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_XmlValue__SWIG_1(int argc, VALUE *argv, VALUE self) {
  XmlValue *arg1 = 0 ;
  XmlValue *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_XmlValue,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XmlValue" "', argument " "1"" of type '" "XmlValue const &""'");
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XmlValue" "', argument " "1"" of type '" "XmlValue const &""'");
  }
  arg1 = reinterpret_cast< XmlValue * >(argp1);
  {
    try {
      result = (XmlValue *)new XmlValue((XmlValue const &)*arg1);DATA_PTR(self) = result;

    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_XmlValue__SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::string *arg1 = 0 ;
  XmlValue *result = 0 ;
  int res1 = SWIG_OLDOBJ ;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XmlValue" "', argument " "1"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XmlValue" "', argument " "1"" of type '" "std::string const &""'");
    }
    arg1 = ptr;
  }
  {
    try {
      result = (XmlValue *)new XmlValue((std::string const &)*arg1);DATA_PTR(self) = result;

    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return self;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_XmlValue__SWIG_3(int argc, VALUE *argv, VALUE self) {
  double arg1 ;
  XmlValue *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "XmlValue" "', argument " "1"" of type '" "double""'");
  }
  arg1 = static_cast< double >(val1);
  {
    try {
      result = (XmlValue *)new XmlValue(arg1);DATA_PTR(self) = result;

    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_XmlValue__SWIG_4(int argc, VALUE *argv, VALUE self) {
  bool arg1 ;
  XmlValue *result = 0 ;
  bool val1 ;
  int ecode1 = 0 ;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_bool(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "XmlValue" "', argument " "1"" of type '" "bool""'");
  }
  arg1 = static_cast< bool >(val1);
  {
    try {
      result = (XmlValue *)new XmlValue(arg1);DATA_PTR(self) = result;

    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_XmlValue__SWIG_5(int argc, VALUE *argv, VALUE self) {
  XmlDocument *arg1 = 0 ;
  XmlValue *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_XmlDocument,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XmlValue" "', argument " "1"" of type '" "XmlDocument const &""'");
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XmlValue" "', argument " "1"" of type '" "XmlDocument const &""'");
  }
  arg1 = reinterpret_cast< XmlDocument * >(argp1);
  {
    try {
      result = (XmlValue *)new XmlValue((XmlDocument const &)*arg1);DATA_PTR(self) = result;

    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_XmlValue__SWIG_6(int argc, VALUE *argv, VALUE self) {
  enum XmlValue::Type arg1 ;
  std::string *arg2 = 0 ;
  XmlValue *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;

  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "XmlValue" "', argument " "1"" of type '" "enum XmlValue::Type""'");
  }
  arg1 = static_cast< enum XmlValue::Type >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XmlValue" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XmlValue" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  {
    try {
      result = (XmlValue *)new XmlValue(arg1,(std::string const &)*arg2);DATA_PTR(self) = result;

    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return self;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_XmlValue_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_XmlValue_allocate(int argc, VALUE *argv, VALUE self) {
#endif


    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_XmlValue);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }


SWIGINTERN VALUE
_wrap_new_XmlValue__SWIG_7(int argc, VALUE *argv, VALUE self) {
  enum XmlValue::Type arg1 ;
  XmlData *arg2 = 0 ;
  XmlValue *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;

  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "XmlValue" "', argument " "1"" of type '" "enum XmlValue::Type""'");
  }
  arg1 = static_cast< enum XmlValue::Type >(val1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_XmlData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XmlValue" "', argument " "2"" of type '" "XmlData const &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XmlValue" "', argument " "2"" of type '" "XmlData const &""'");
  }
  arg2 = reinterpret_cast< XmlData * >(argp2);
  {
    try {
      result = (XmlValue *)new XmlValue(arg1,(XmlData const &)*arg2);DATA_PTR(self) = result;

    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_XmlValue(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;

  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ii++) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_XmlValue__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlValue, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_XmlValue__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlDocument, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_XmlValue__SWIG_5(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_XmlValue__SWIG_3(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_XmlValue__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_bool(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_XmlValue__SWIG_4(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_XmlValue__SWIG_7(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_XmlValue__SWIG_6(nargs, args, self);
      }
    }
  }

fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'new_XmlValue'");
  return Qnil;
}


SWIGINTERN void
free_XmlValue(XmlValue *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_XmlValue_getType(int argc, VALUE *argv, VALUE self) {
  XmlValue *arg1 = (XmlValue *) 0 ;
  enum XmlValue::Type result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getType" "', argument " "1"" of type '" "XmlValue const *""'");
  }
  arg1 = reinterpret_cast< XmlValue * >(argp1);
  {
    try {
      result = (enum XmlValue::Type)((XmlValue const *)arg1)->getType();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlValue_getTypeURI(int argc, VALUE *argv, VALUE self) {
  XmlValue *arg1 = (XmlValue *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getTypeURI" "', argument " "1"" of type '" "XmlValue const *""'");
  }
  arg1 = reinterpret_cast< XmlValue * >(argp1);
  {
    try {
      result = ((XmlValue const *)arg1)->getTypeURI();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlValue_getTypeName(int argc, VALUE *argv, VALUE self) {
  XmlValue *arg1 = (XmlValue *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getTypeName" "', argument " "1"" of type '" "XmlValue const *""'");
  }
  arg1 = reinterpret_cast< XmlValue * >(argp1);
  {
    try {
      result = ((XmlValue const *)arg1)->getTypeName();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlValue_isNull(int argc, VALUE *argv, VALUE self) {
  XmlValue *arg1 = (XmlValue *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "isNull" "', argument " "1"" of type '" "XmlValue const *""'");
  }
  arg1 = reinterpret_cast< XmlValue * >(argp1);
  {
    try {
      result = (bool)((XmlValue const *)arg1)->isNull();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlValue_isType(int argc, VALUE *argv, VALUE self) {
  XmlValue *arg1 = (XmlValue *) 0 ;
  enum XmlValue::Type arg2 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "isType" "', argument " "1"" of type '" "XmlValue const *""'");
  }
  arg1 = reinterpret_cast< XmlValue * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "isType" "', argument " "2"" of type '" "enum XmlValue::Type""'");
  }
  arg2 = static_cast< enum XmlValue::Type >(val2);
  {
    try {
      result = (bool)((XmlValue const *)arg1)->isType(arg2);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlValue_isNumber(int argc, VALUE *argv, VALUE self) {
  XmlValue *arg1 = (XmlValue *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "isNumber" "', argument " "1"" of type '" "XmlValue const *""'");
  }
  arg1 = reinterpret_cast< XmlValue * >(argp1);
  {
    try {
      result = (bool)((XmlValue const *)arg1)->isNumber();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlValue_isString(int argc, VALUE *argv, VALUE self) {
  XmlValue *arg1 = (XmlValue *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "isString" "', argument " "1"" of type '" "XmlValue const *""'");
  }
  arg1 = reinterpret_cast< XmlValue * >(argp1);
  {
    try {
      result = (bool)((XmlValue const *)arg1)->isString();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlValue_isBoolean(int argc, VALUE *argv, VALUE self) {
  XmlValue *arg1 = (XmlValue *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "isBoolean" "', argument " "1"" of type '" "XmlValue const *""'");
  }
  arg1 = reinterpret_cast< XmlValue * >(argp1);
  {
    try {
      result = (bool)((XmlValue const *)arg1)->isBoolean();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlValue_isBinary(int argc, VALUE *argv, VALUE self) {
  XmlValue *arg1 = (XmlValue *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "isBinary" "', argument " "1"" of type '" "XmlValue const *""'");
  }
  arg1 = reinterpret_cast< XmlValue * >(argp1);
  {
    try {
      result = (bool)((XmlValue const *)arg1)->isBinary();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlValue_isNode(int argc, VALUE *argv, VALUE self) {
  XmlValue *arg1 = (XmlValue *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "isNode" "', argument " "1"" of type '" "XmlValue const *""'");
  }
  arg1 = reinterpret_cast< XmlValue * >(argp1);
  {
    try {
      result = (bool)((XmlValue const *)arg1)->isNode();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlValue_asNumber(int argc, VALUE *argv, VALUE self) {
  XmlValue *arg1 = (XmlValue *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "asNumber" "', argument " "1"" of type '" "XmlValue const *""'");
  }
  arg1 = reinterpret_cast< XmlValue * >(argp1);
  {
    try {
      result = (double)((XmlValue const *)arg1)->asNumber();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlValue_asString__SWIG_0(int argc, VALUE *argv, VALUE self) {
  XmlValue *arg1 = (XmlValue *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "asString" "', argument " "1"" of type '" "XmlValue const *""'");
  }
  arg1 = reinterpret_cast< XmlValue * >(argp1);
  {
    try {
      result = ((XmlValue const *)arg1)->asString();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlValue_asString__SWIG_1(int argc, VALUE *argv, VALUE self) {
  XmlValue *arg1 = (XmlValue *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  VALUE vresult = Qnil;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "asString" "', argument " "1"" of type '" "XmlValue const *""'");
  }
  arg1 = reinterpret_cast< XmlValue * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "asString" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "asString" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  {
    try {
      result = ((XmlValue const *)arg1)->asString((std::string const &)*arg2);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_XmlValue_asString(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;

  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlValue, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_XmlValue_asString__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlValue, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_XmlValue_asString__SWIG_1(nargs, args, self);
      }
    }
  }

fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'XmlValue_asString'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlValue_asBoolean(int argc, VALUE *argv, VALUE self) {
  XmlValue *arg1 = (XmlValue *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "asBoolean" "', argument " "1"" of type '" "XmlValue const *""'");
  }
  arg1 = reinterpret_cast< XmlValue * >(argp1);
  {
    try {
      result = (bool)((XmlValue const *)arg1)->asBoolean();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlValue_asBinary(int argc, VALUE *argv, VALUE self) {
  XmlValue *arg1 = (XmlValue *) 0 ;
  XmlData *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "asBinary" "', argument " "1"" of type '" "XmlValue const *""'");
  }
  arg1 = reinterpret_cast< XmlValue * >(argp1);
  {
    try {
      result = (XmlData *)XmlValue_asBinary((XmlValue const *)arg1);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlData, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlValue_asDocument(int argc, VALUE *argv, VALUE self) {
  XmlValue *arg1 = (XmlValue *) 0 ;
  XmlDocument result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "asDocument" "', argument " "1"" of type '" "XmlValue const *""'");
  }
  arg1 = reinterpret_cast< XmlValue * >(argp1);
  {
    try {
      result = ((XmlValue const *)arg1)->asDocument();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj((new XmlDocument(static_cast< const XmlDocument& >(result))), SWIGTYPE_p_XmlDocument, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlValue_asEventReader(int argc, VALUE *argv, VALUE self) {
  XmlValue *arg1 = (XmlValue *) 0 ;
  XmlEventReader *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "asEventReader" "', argument " "1"" of type '" "XmlValue const *""'");
  }
  arg1 = reinterpret_cast< XmlValue * >(argp1);
  {
    try {
      {
        XmlEventReader &_result_ref = ((XmlValue const *)arg1)->asEventReader();
        result = (XmlEventReader *) &_result_ref;
      }
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlEventReader, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlValue_getNodeHandle(int argc, VALUE *argv, VALUE self) {
  XmlValue *arg1 = (XmlValue *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getNodeHandle" "', argument " "1"" of type '" "XmlValue const *""'");
  }
  arg1 = reinterpret_cast< XmlValue * >(argp1);
  {
    try {
      result = ((XmlValue const *)arg1)->getNodeHandle();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlValue_equals(int argc, VALUE *argv, VALUE self) {
  XmlValue *arg1 = (XmlValue *) 0 ;
  XmlValue *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "equals" "', argument " "1"" of type '" "XmlValue const *""'");
  }
  arg1 = reinterpret_cast< XmlValue * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlValue,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "equals" "', argument " "2"" of type '" "XmlValue const &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "equals" "', argument " "2"" of type '" "XmlValue const &""'");
  }
  arg2 = reinterpret_cast< XmlValue * >(argp2);
  {
    try {
      result = (bool)((XmlValue const *)arg1)->equals((XmlValue const &)*arg2);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlValue_getNodeName(int argc, VALUE *argv, VALUE self) {
  XmlValue *arg1 = (XmlValue *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getNodeName" "', argument " "1"" of type '" "XmlValue const *""'");
  }
  arg1 = reinterpret_cast< XmlValue * >(argp1);
  {
    try {
      result = ((XmlValue const *)arg1)->getNodeName();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlValue_getNodeValue(int argc, VALUE *argv, VALUE self) {
  XmlValue *arg1 = (XmlValue *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getNodeValue" "', argument " "1"" of type '" "XmlValue const *""'");
  }
  arg1 = reinterpret_cast< XmlValue * >(argp1);
  {
    try {
      result = ((XmlValue const *)arg1)->getNodeValue();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlValue_getNamespaceURI(int argc, VALUE *argv, VALUE self) {
  XmlValue *arg1 = (XmlValue *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getNamespaceURI" "', argument " "1"" of type '" "XmlValue const *""'");
  }
  arg1 = reinterpret_cast< XmlValue * >(argp1);
  {
    try {
      result = ((XmlValue const *)arg1)->getNamespaceURI();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlValue_getPrefix(int argc, VALUE *argv, VALUE self) {
  XmlValue *arg1 = (XmlValue *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getPrefix" "', argument " "1"" of type '" "XmlValue const *""'");
  }
  arg1 = reinterpret_cast< XmlValue * >(argp1);
  {
    try {
      result = ((XmlValue const *)arg1)->getPrefix();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlValue_getLocalName(int argc, VALUE *argv, VALUE self) {
  XmlValue *arg1 = (XmlValue *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getLocalName" "', argument " "1"" of type '" "XmlValue const *""'");
  }
  arg1 = reinterpret_cast< XmlValue * >(argp1);
  {
    try {
      result = ((XmlValue const *)arg1)->getLocalName();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlValue_getNodeType(int argc, VALUE *argv, VALUE self) {
  XmlValue *arg1 = (XmlValue *) 0 ;
  short result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getNodeType" "', argument " "1"" of type '" "XmlValue const *""'");
  }
  arg1 = reinterpret_cast< XmlValue * >(argp1);
  {
    try {
      result = (short)((XmlValue const *)arg1)->getNodeType();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_short(static_cast< short >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlValue_getParentNode(int argc, VALUE *argv, VALUE self) {
  XmlValue *arg1 = (XmlValue *) 0 ;
  XmlValue *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getParentNode" "', argument " "1"" of type '" "XmlValue const *""'");
  }
  arg1 = reinterpret_cast< XmlValue * >(argp1);
  {
    try {
      result = (XmlValue *)XmlValue_getParentNode((XmlValue const *)arg1);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlValue_getFirstChild(int argc, VALUE *argv, VALUE self) {
  XmlValue *arg1 = (XmlValue *) 0 ;
  XmlValue *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getFirstChild" "', argument " "1"" of type '" "XmlValue const *""'");
  }
  arg1 = reinterpret_cast< XmlValue * >(argp1);
  {
    try {
      result = (XmlValue *)XmlValue_getFirstChild((XmlValue const *)arg1);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlValue_getLastChild(int argc, VALUE *argv, VALUE self) {
  XmlValue *arg1 = (XmlValue *) 0 ;
  XmlValue *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getLastChild" "', argument " "1"" of type '" "XmlValue const *""'");
  }
  arg1 = reinterpret_cast< XmlValue * >(argp1);
  {
    try {
      result = (XmlValue *)XmlValue_getLastChild((XmlValue const *)arg1);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlValue_getPreviousSibling(int argc, VALUE *argv, VALUE self) {
  XmlValue *arg1 = (XmlValue *) 0 ;
  XmlValue *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getPreviousSibling" "', argument " "1"" of type '" "XmlValue const *""'");
  }
  arg1 = reinterpret_cast< XmlValue * >(argp1);
  {
    try {
      result = (XmlValue *)XmlValue_getPreviousSibling((XmlValue const *)arg1);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlValue_getNextSibling(int argc, VALUE *argv, VALUE self) {
  XmlValue *arg1 = (XmlValue *) 0 ;
  XmlValue *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getNextSibling" "', argument " "1"" of type '" "XmlValue const *""'");
  }
  arg1 = reinterpret_cast< XmlValue * >(argp1);
  {
    try {
      result = (XmlValue *)XmlValue_getNextSibling((XmlValue const *)arg1);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlValue_getAttributes(int argc, VALUE *argv, VALUE self) {
  XmlValue *arg1 = (XmlValue *) 0 ;
  XmlResults *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getAttributes" "', argument " "1"" of type '" "XmlValue const *""'");
  }
  arg1 = reinterpret_cast< XmlValue * >(argp1);
  {
    try {
      result = (XmlResults *)XmlValue_getAttributes((XmlValue const *)arg1);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlResults, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlValue_getOwnerElement(int argc, VALUE *argv, VALUE self) {
  XmlValue *arg1 = (XmlValue *) 0 ;
  XmlValue *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getOwnerElement" "', argument " "1"" of type '" "XmlValue const *""'");
  }
  arg1 = reinterpret_cast< XmlValue * >(argp1);
  {
    try {
      result = (XmlValue *)XmlValue_getOwnerElement((XmlValue const *)arg1);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlValue_setValue(int argc, VALUE *argv, VALUE self) {
  XmlValue *arg1 = 0 ;
  XmlValue *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;

  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_XmlValue,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XmlValue_setValue" "', argument " "1"" of type '" "XmlValue &""'");
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XmlValue_setValue" "', argument " "1"" of type '" "XmlValue &""'");
  }
  arg1 = reinterpret_cast< XmlValue * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_XmlValue,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XmlValue_setValue" "', argument " "2"" of type '" "XmlValue const &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XmlValue_setValue" "', argument " "2"" of type '" "XmlValue const &""'");
  }
  arg2 = reinterpret_cast< XmlValue * >(argp2);
  {
    try {
      XmlValue_setValue(*arg1,(XmlValue const &)*arg2);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return Qnil;
fail:
  return Qnil;
}


swig_class cXmlIndexSpecification;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_XmlIndexSpecification_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_XmlIndexSpecification_allocate(int argc, VALUE *argv, VALUE self) {
#endif


    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_XmlIndexSpecification);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }


SWIGINTERN VALUE
_wrap_new_XmlIndexSpecification(int argc, VALUE *argv, VALUE self) {
  XmlIndexSpecification *result = 0 ;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (XmlIndexSpecification *)new XmlIndexSpecification();DATA_PTR(self) = result;

    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_XmlIndexSpecification(XmlIndexSpecification *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_XmlIndexSpecification_addIndex__SWIG_0(int argc, VALUE *argv, VALUE self) {
  XmlIndexSpecification *arg1 = (XmlIndexSpecification *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  enum XmlIndexSpecification::Type arg4 ;
  enum XmlValue::Type arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;

  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlIndexSpecification, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "addIndex" "', argument " "1"" of type '" "XmlIndexSpecification *""'");
  }
  arg1 = reinterpret_cast< XmlIndexSpecification * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "addIndex" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "addIndex" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "addIndex" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "addIndex" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "addIndex" "', argument " "4"" of type '" "enum XmlIndexSpecification::Type""'");
  }
  arg4 = static_cast< enum XmlIndexSpecification::Type >(val4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "addIndex" "', argument " "5"" of type '" "enum XmlValue::Type""'");
  }
  arg5 = static_cast< enum XmlValue::Type >(val5);
  {
    try {
      (arg1)->addIndex((std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlIndexSpecification_addIndex__SWIG_1(int argc, VALUE *argv, VALUE self) {
  XmlIndexSpecification *arg1 = (XmlIndexSpecification *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;

  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlIndexSpecification, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "addIndex" "', argument " "1"" of type '" "XmlIndexSpecification *""'");
  }
  arg1 = reinterpret_cast< XmlIndexSpecification * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "addIndex" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "addIndex" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "addIndex" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "addIndex" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "addIndex" "', argument " "4"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "addIndex" "', argument " "4"" of type '" "std::string const &""'");
    }
    arg4 = ptr;
  }
  {
    try {
      (arg1)->addIndex((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return Qnil;
}


SWIGINTERN VALUE _wrap_XmlIndexSpecification_addIndex(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;

  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlIndexSpecification, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_XmlIndexSpecification_addIndex__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlIndexSpecification, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_XmlIndexSpecification_addIndex__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }

fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'XmlIndexSpecification_addIndex'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlIndexSpecification_deleteIndex__SWIG_0(int argc, VALUE *argv, VALUE self) {
  XmlIndexSpecification *arg1 = (XmlIndexSpecification *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  enum XmlIndexSpecification::Type arg4 ;
  enum XmlValue::Type arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;

  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlIndexSpecification, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "deleteIndex" "', argument " "1"" of type '" "XmlIndexSpecification *""'");
  }
  arg1 = reinterpret_cast< XmlIndexSpecification * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "deleteIndex" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "deleteIndex" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "deleteIndex" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "deleteIndex" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "deleteIndex" "', argument " "4"" of type '" "enum XmlIndexSpecification::Type""'");
  }
  arg4 = static_cast< enum XmlIndexSpecification::Type >(val4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "deleteIndex" "', argument " "5"" of type '" "enum XmlValue::Type""'");
  }
  arg5 = static_cast< enum XmlValue::Type >(val5);
  {
    try {
      (arg1)->deleteIndex((std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlIndexSpecification_deleteIndex__SWIG_1(int argc, VALUE *argv, VALUE self) {
  XmlIndexSpecification *arg1 = (XmlIndexSpecification *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;

  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlIndexSpecification, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "deleteIndex" "', argument " "1"" of type '" "XmlIndexSpecification *""'");
  }
  arg1 = reinterpret_cast< XmlIndexSpecification * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "deleteIndex" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "deleteIndex" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "deleteIndex" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "deleteIndex" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "deleteIndex" "', argument " "4"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "deleteIndex" "', argument " "4"" of type '" "std::string const &""'");
    }
    arg4 = ptr;
  }
  {
    try {
      (arg1)->deleteIndex((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return Qnil;
}


SWIGINTERN VALUE _wrap_XmlIndexSpecification_deleteIndex(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;

  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlIndexSpecification, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_XmlIndexSpecification_deleteIndex__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlIndexSpecification, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_XmlIndexSpecification_deleteIndex__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }

fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'XmlIndexSpecification_deleteIndex'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlIndexSpecification_replaceIndex__SWIG_0(int argc, VALUE *argv, VALUE self) {
  XmlIndexSpecification *arg1 = (XmlIndexSpecification *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  enum XmlIndexSpecification::Type arg4 ;
  enum XmlValue::Type arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;

  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlIndexSpecification, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "replaceIndex" "', argument " "1"" of type '" "XmlIndexSpecification *""'");
  }
  arg1 = reinterpret_cast< XmlIndexSpecification * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "replaceIndex" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "replaceIndex" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "replaceIndex" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "replaceIndex" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "replaceIndex" "', argument " "4"" of type '" "enum XmlIndexSpecification::Type""'");
  }
  arg4 = static_cast< enum XmlIndexSpecification::Type >(val4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "replaceIndex" "', argument " "5"" of type '" "enum XmlValue::Type""'");
  }
  arg5 = static_cast< enum XmlValue::Type >(val5);
  {
    try {
      (arg1)->replaceIndex((std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlIndexSpecification_replaceIndex__SWIG_1(int argc, VALUE *argv, VALUE self) {
  XmlIndexSpecification *arg1 = (XmlIndexSpecification *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;

  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlIndexSpecification, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "replaceIndex" "', argument " "1"" of type '" "XmlIndexSpecification *""'");
  }
  arg1 = reinterpret_cast< XmlIndexSpecification * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "replaceIndex" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "replaceIndex" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "replaceIndex" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "replaceIndex" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "replaceIndex" "', argument " "4"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "replaceIndex" "', argument " "4"" of type '" "std::string const &""'");
    }
    arg4 = ptr;
  }
  {
    try {
      (arg1)->replaceIndex((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return Qnil;
}


SWIGINTERN VALUE _wrap_XmlIndexSpecification_replaceIndex(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;

  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlIndexSpecification, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_XmlIndexSpecification_replaceIndex__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlIndexSpecification, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_XmlIndexSpecification_replaceIndex__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }

fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'XmlIndexSpecification_replaceIndex'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlIndexSpecification_addDefaultIndex__SWIG_0(int argc, VALUE *argv, VALUE self) {
  XmlIndexSpecification *arg1 = (XmlIndexSpecification *) 0 ;
  enum XmlIndexSpecification::Type arg2 ;
  enum XmlValue::Type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;

  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlIndexSpecification, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "addDefaultIndex" "', argument " "1"" of type '" "XmlIndexSpecification *""'");
  }
  arg1 = reinterpret_cast< XmlIndexSpecification * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "addDefaultIndex" "', argument " "2"" of type '" "enum XmlIndexSpecification::Type""'");
  }
  arg2 = static_cast< enum XmlIndexSpecification::Type >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "addDefaultIndex" "', argument " "3"" of type '" "enum XmlValue::Type""'");
  }
  arg3 = static_cast< enum XmlValue::Type >(val3);
  {
    try {
      (arg1)->addDefaultIndex(arg2,arg3);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlIndexSpecification_addDefaultIndex__SWIG_1(int argc, VALUE *argv, VALUE self) {
  XmlIndexSpecification *arg1 = (XmlIndexSpecification *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlIndexSpecification, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "addDefaultIndex" "', argument " "1"" of type '" "XmlIndexSpecification *""'");
  }
  arg1 = reinterpret_cast< XmlIndexSpecification * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "addDefaultIndex" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "addDefaultIndex" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->addDefaultIndex((std::string const &)*arg2);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_XmlIndexSpecification_addDefaultIndex(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;

  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlIndexSpecification, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_XmlIndexSpecification_addDefaultIndex__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlIndexSpecification, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_XmlIndexSpecification_addDefaultIndex__SWIG_0(nargs, args, self);
        }
      }
    }
  }

fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'XmlIndexSpecification_addDefaultIndex'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlIndexSpecification_deleteDefaultIndex__SWIG_0(int argc, VALUE *argv, VALUE self) {
  XmlIndexSpecification *arg1 = (XmlIndexSpecification *) 0 ;
  enum XmlIndexSpecification::Type arg2 ;
  enum XmlValue::Type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;

  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlIndexSpecification, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "deleteDefaultIndex" "', argument " "1"" of type '" "XmlIndexSpecification *""'");
  }
  arg1 = reinterpret_cast< XmlIndexSpecification * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "deleteDefaultIndex" "', argument " "2"" of type '" "enum XmlIndexSpecification::Type""'");
  }
  arg2 = static_cast< enum XmlIndexSpecification::Type >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "deleteDefaultIndex" "', argument " "3"" of type '" "enum XmlValue::Type""'");
  }
  arg3 = static_cast< enum XmlValue::Type >(val3);
  {
    try {
      (arg1)->deleteDefaultIndex(arg2,arg3);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlIndexSpecification_deleteDefaultIndex__SWIG_1(int argc, VALUE *argv, VALUE self) {
  XmlIndexSpecification *arg1 = (XmlIndexSpecification *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlIndexSpecification, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "deleteDefaultIndex" "', argument " "1"" of type '" "XmlIndexSpecification *""'");
  }
  arg1 = reinterpret_cast< XmlIndexSpecification * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "deleteDefaultIndex" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "deleteDefaultIndex" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->deleteDefaultIndex((std::string const &)*arg2);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_XmlIndexSpecification_deleteDefaultIndex(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;

  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlIndexSpecification, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_XmlIndexSpecification_deleteDefaultIndex__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlIndexSpecification, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_XmlIndexSpecification_deleteDefaultIndex__SWIG_0(nargs, args, self);
        }
      }
    }
  }

fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'XmlIndexSpecification_deleteDefaultIndex'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlIndexSpecification_replaceDefaultIndex__SWIG_0(int argc, VALUE *argv, VALUE self) {
  XmlIndexSpecification *arg1 = (XmlIndexSpecification *) 0 ;
  enum XmlIndexSpecification::Type arg2 ;
  enum XmlValue::Type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;

  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlIndexSpecification, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "replaceDefaultIndex" "', argument " "1"" of type '" "XmlIndexSpecification *""'");
  }
  arg1 = reinterpret_cast< XmlIndexSpecification * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "replaceDefaultIndex" "', argument " "2"" of type '" "enum XmlIndexSpecification::Type""'");
  }
  arg2 = static_cast< enum XmlIndexSpecification::Type >(val2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "replaceDefaultIndex" "', argument " "3"" of type '" "enum XmlValue::Type""'");
  }
  arg3 = static_cast< enum XmlValue::Type >(val3);
  {
    try {
      (arg1)->replaceDefaultIndex(arg2,arg3);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlIndexSpecification_replaceDefaultIndex__SWIG_1(int argc, VALUE *argv, VALUE self) {
  XmlIndexSpecification *arg1 = (XmlIndexSpecification *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlIndexSpecification, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "replaceDefaultIndex" "', argument " "1"" of type '" "XmlIndexSpecification *""'");
  }
  arg1 = reinterpret_cast< XmlIndexSpecification * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "replaceDefaultIndex" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "replaceDefaultIndex" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->replaceDefaultIndex((std::string const &)*arg2);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_XmlIndexSpecification_replaceDefaultIndex(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;

  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlIndexSpecification, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_XmlIndexSpecification_replaceDefaultIndex__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlIndexSpecification, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_XmlIndexSpecification_replaceDefaultIndex__SWIG_0(nargs, args, self);
        }
      }
    }
  }

fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'XmlIndexSpecification_replaceDefaultIndex'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlIndexSpecification_reset(int argc, VALUE *argv, VALUE self) {
  XmlIndexSpecification *arg1 = (XmlIndexSpecification *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlIndexSpecification, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "reset" "', argument " "1"" of type '" "XmlIndexSpecification *""'");
  }
  arg1 = reinterpret_cast< XmlIndexSpecification * >(argp1);
  {
    try {
      (arg1)->reset();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlIndexSpecification_find(int argc, VALUE *argv, VALUE self) {
  XmlIndexSpecification *arg1 = (XmlIndexSpecification *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  XmlIndexDeclaration *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  VALUE vresult = Qnil;

  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlIndexSpecification, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "find" "', argument " "1"" of type '" "XmlIndexSpecification *""'");
  }
  arg1 = reinterpret_cast< XmlIndexSpecification * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "find" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "find" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "find" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "find" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  {
    try {
      result = (XmlIndexDeclaration *)XmlIndexSpecification_find(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlIndexDeclaration, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlIndexSpecification_next(int argc, VALUE *argv, VALUE self) {
  XmlIndexSpecification *arg1 = (XmlIndexSpecification *) 0 ;
  XmlIndexDeclaration *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlIndexSpecification, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "next" "', argument " "1"" of type '" "XmlIndexSpecification *""'");
  }
  arg1 = reinterpret_cast< XmlIndexSpecification * >(argp1);
  {
    try {
      result = (XmlIndexDeclaration *)XmlIndexSpecification_next(arg1);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlIndexDeclaration, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlIndexSpecification_getDefaultIndex(int argc, VALUE *argv, VALUE self) {
  XmlIndexSpecification *arg1 = (XmlIndexSpecification *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlIndexSpecification, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getDefaultIndex" "', argument " "1"" of type '" "XmlIndexSpecification const *""'");
  }
  arg1 = reinterpret_cast< XmlIndexSpecification * >(argp1);
  {
    try {
      result = ((XmlIndexSpecification const *)arg1)->getDefaultIndex();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlIndexSpecification_getValueType(int argc, VALUE *argv, VALUE self) {
  std::string *arg1 = 0 ;
  enum XmlValue::Type result;
  int res1 = SWIG_OLDOBJ ;
  VALUE vresult = Qnil;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XmlIndexSpecification::getValueType" "', argument " "1"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XmlIndexSpecification::getValueType" "', argument " "1"" of type '" "std::string const &""'");
    }
    arg1 = ptr;
  }
  {
    try {
      result = (enum XmlValue::Type)XmlIndexSpecification::getValueType((std::string const &)*arg1);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return vresult;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return Qnil;
}


swig_class cXmlIndexDeclaration;

SWIGINTERN void
free_XmlIndexDeclaration(XmlIndexDeclaration *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_XmlIndexDeclaration_get_uri(int argc, VALUE *argv, VALUE self) {
  XmlIndexDeclaration *arg1 = (XmlIndexDeclaration *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlIndexDeclaration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_uri" "', argument " "1"" of type '" "XmlIndexDeclaration const *""'");
  }
  arg1 = reinterpret_cast< XmlIndexDeclaration * >(argp1);
  {
    try {
      {
        std::string const &_result_ref = ((XmlIndexDeclaration const *)arg1)->get_uri();
        result = (std::string *) &_result_ref;
      }
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_std_string(static_cast< std::string >(*result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlIndexDeclaration_get_name(int argc, VALUE *argv, VALUE self) {
  XmlIndexDeclaration *arg1 = (XmlIndexDeclaration *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlIndexDeclaration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_name" "', argument " "1"" of type '" "XmlIndexDeclaration const *""'");
  }
  arg1 = reinterpret_cast< XmlIndexDeclaration * >(argp1);
  {
    try {
      {
        std::string const &_result_ref = ((XmlIndexDeclaration const *)arg1)->get_name();
        result = (std::string *) &_result_ref;
      }
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_std_string(static_cast< std::string >(*result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlIndexDeclaration_get_index(int argc, VALUE *argv, VALUE self) {
  XmlIndexDeclaration *arg1 = (XmlIndexDeclaration *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlIndexDeclaration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_index" "', argument " "1"" of type '" "XmlIndexDeclaration const *""'");
  }
  arg1 = reinterpret_cast< XmlIndexDeclaration * >(argp1);
  {
    try {
      {
        std::string const &_result_ref = ((XmlIndexDeclaration const *)arg1)->get_index();
        result = (std::string *) &_result_ref;
      }
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_std_string(static_cast< std::string >(*result));
  return vresult;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_XmlIndexDeclaration_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_XmlIndexDeclaration_allocate(int argc, VALUE *argv, VALUE self) {
#endif


    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_XmlIndexDeclaration);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }


SWIGINTERN VALUE
_wrap_new_XmlIndexDeclaration(int argc, VALUE *argv, VALUE self) {
  XmlIndexDeclaration *result = 0 ;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (XmlIndexDeclaration *)new XmlIndexDeclaration();DATA_PTR(self) = result;

    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return self;
fail:
  return Qnil;
}


swig_class cXmlQueryExpression;

SWIGINTERN VALUE
_wrap_new_XmlQueryExpression__SWIG_0(int argc, VALUE *argv, VALUE self) {
  XmlQueryExpression *result = 0 ;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (XmlQueryExpression *)new XmlQueryExpression();DATA_PTR(self) = result;

    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_XmlQueryExpression_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_XmlQueryExpression_allocate(int argc, VALUE *argv, VALUE self) {
#endif


    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_XmlQueryExpression);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }


SWIGINTERN VALUE
_wrap_new_XmlQueryExpression__SWIG_1(int argc, VALUE *argv, VALUE self) {
  XmlQueryExpression *arg1 = 0 ;
  XmlQueryExpression *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_XmlQueryExpression,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XmlQueryExpression" "', argument " "1"" of type '" "XmlQueryExpression const &""'");
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XmlQueryExpression" "', argument " "1"" of type '" "XmlQueryExpression const &""'");
  }
  arg1 = reinterpret_cast< XmlQueryExpression * >(argp1);
  {
    try {
      result = (XmlQueryExpression *)new XmlQueryExpression((XmlQueryExpression const &)*arg1);DATA_PTR(self) = result;

    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_XmlQueryExpression(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;

  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ii++) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_XmlQueryExpression__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlQueryExpression, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_XmlQueryExpression__SWIG_1(nargs, args, self);
    }
  }

fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'new_XmlQueryExpression'");
  return Qnil;
}


SWIGINTERN void
free_XmlQueryExpression(XmlQueryExpression *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_XmlQueryExpression_getQuery(int argc, VALUE *argv, VALUE self) {
  XmlQueryExpression *arg1 = (XmlQueryExpression *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlQueryExpression, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getQuery" "', argument " "1"" of type '" "XmlQueryExpression const *""'");
  }
  arg1 = reinterpret_cast< XmlQueryExpression * >(argp1);
  {
    try {
      {
        std::string const &_result_ref = ((XmlQueryExpression const *)arg1)->getQuery();
        result = (std::string *) &_result_ref;
      }
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_std_string(static_cast< std::string >(*result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlQueryExpression_getQueryPlan(int argc, VALUE *argv, VALUE self) {
  XmlQueryExpression *arg1 = (XmlQueryExpression *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlQueryExpression, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getQueryPlan" "', argument " "1"" of type '" "XmlQueryExpression const *""'");
  }
  arg1 = reinterpret_cast< XmlQueryExpression * >(argp1);
  {
    try {
      result = ((XmlQueryExpression const *)arg1)->getQueryPlan();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlQueryExpression_execute__SWIG_0(int argc, VALUE *argv, VALUE self) {
  XmlQueryExpression *arg1 = (XmlQueryExpression *) 0 ;
  XmlQueryContext *arg2 = 0 ;
  u_int32_t arg3 ;
  XmlResults *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlQueryExpression, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "execute" "', argument " "1"" of type '" "XmlQueryExpression const *""'");
  }
  arg1 = reinterpret_cast< XmlQueryExpression * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlQueryContext,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "execute" "', argument " "2"" of type '" "XmlQueryContext &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "execute" "', argument " "2"" of type '" "XmlQueryContext &""'");
  }
  arg2 = reinterpret_cast< XmlQueryContext * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "execute" "', argument " "3"" of type '" "u_int32_t""'");
  }
  arg3 = static_cast< u_int32_t >(val3);
  {
    try {
      result = (XmlResults *)XmlQueryExpression_execute__SWIG_0((XmlQueryExpression const *)arg1,*arg2,arg3);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlResults, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlQueryExpression_execute__SWIG_1(int argc, VALUE *argv, VALUE self) {
  XmlQueryExpression *arg1 = (XmlQueryExpression *) 0 ;
  XmlQueryContext *arg2 = 0 ;
  XmlResults *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlQueryExpression, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "execute" "', argument " "1"" of type '" "XmlQueryExpression const *""'");
  }
  arg1 = reinterpret_cast< XmlQueryExpression * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlQueryContext,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "execute" "', argument " "2"" of type '" "XmlQueryContext &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "execute" "', argument " "2"" of type '" "XmlQueryContext &""'");
  }
  arg2 = reinterpret_cast< XmlQueryContext * >(argp2);
  {
    try {
      result = (XmlResults *)XmlQueryExpression_execute__SWIG_0((XmlQueryExpression const *)arg1,*arg2);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlResults, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlQueryExpression_execute__SWIG_2(int argc, VALUE *argv, VALUE self) {
  XmlQueryExpression *arg1 = (XmlQueryExpression *) 0 ;
  XmlValue *arg2 = 0 ;
  XmlQueryContext *arg3 = 0 ;
  u_int32_t arg4 ;
  XmlResults *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlQueryExpression, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "execute" "', argument " "1"" of type '" "XmlQueryExpression const *""'");
  }
  arg1 = reinterpret_cast< XmlQueryExpression * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlValue,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "execute" "', argument " "2"" of type '" "XmlValue const &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "execute" "', argument " "2"" of type '" "XmlValue const &""'");
  }
  arg2 = reinterpret_cast< XmlValue * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_XmlQueryContext,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "execute" "', argument " "3"" of type '" "XmlQueryContext &""'");
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "execute" "', argument " "3"" of type '" "XmlQueryContext &""'");
  }
  arg3 = reinterpret_cast< XmlQueryContext * >(argp3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "execute" "', argument " "4"" of type '" "u_int32_t""'");
  }
  arg4 = static_cast< u_int32_t >(val4);
  {
    try {
      result = (XmlResults *)XmlQueryExpression_execute__SWIG_2((XmlQueryExpression const *)arg1,(XmlValue const &)*arg2,*arg3,arg4);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlResults, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlQueryExpression_execute__SWIG_3(int argc, VALUE *argv, VALUE self) {
  XmlQueryExpression *arg1 = (XmlQueryExpression *) 0 ;
  XmlValue *arg2 = 0 ;
  XmlQueryContext *arg3 = 0 ;
  XmlResults *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlQueryExpression, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "execute" "', argument " "1"" of type '" "XmlQueryExpression const *""'");
  }
  arg1 = reinterpret_cast< XmlQueryExpression * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlValue,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "execute" "', argument " "2"" of type '" "XmlValue const &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "execute" "', argument " "2"" of type '" "XmlValue const &""'");
  }
  arg2 = reinterpret_cast< XmlValue * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_XmlQueryContext,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "execute" "', argument " "3"" of type '" "XmlQueryContext &""'");
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "execute" "', argument " "3"" of type '" "XmlQueryContext &""'");
  }
  arg3 = reinterpret_cast< XmlQueryContext * >(argp3);
  {
    try {
      result = (XmlResults *)XmlQueryExpression_execute__SWIG_2((XmlQueryExpression const *)arg1,(XmlValue const &)*arg2,*arg3);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlResults, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlQueryExpression_execute__SWIG_4(int argc, VALUE *argv, VALUE self) {
  XmlQueryExpression *arg1 = (XmlQueryExpression *) 0 ;
  XmlTransaction *arg2 = 0 ;
  XmlQueryContext *arg3 = 0 ;
  u_int32_t arg4 ;
  XmlResults *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlQueryExpression, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "execute" "', argument " "1"" of type '" "XmlQueryExpression const *""'");
  }
  arg1 = reinterpret_cast< XmlQueryExpression * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlTransaction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "execute" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "execute" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  arg2 = reinterpret_cast< XmlTransaction * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_XmlQueryContext,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "execute" "', argument " "3"" of type '" "XmlQueryContext &""'");
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "execute" "', argument " "3"" of type '" "XmlQueryContext &""'");
  }
  arg3 = reinterpret_cast< XmlQueryContext * >(argp3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "execute" "', argument " "4"" of type '" "u_int32_t""'");
  }
  arg4 = static_cast< u_int32_t >(val4);
  {
    try {
      result = (XmlResults *)XmlQueryExpression_execute__SWIG_4((XmlQueryExpression const *)arg1,*arg2,*arg3,arg4);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlResults, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlQueryExpression_execute__SWIG_5(int argc, VALUE *argv, VALUE self) {
  XmlQueryExpression *arg1 = (XmlQueryExpression *) 0 ;
  XmlTransaction *arg2 = 0 ;
  XmlQueryContext *arg3 = 0 ;
  XmlResults *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlQueryExpression, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "execute" "', argument " "1"" of type '" "XmlQueryExpression const *""'");
  }
  arg1 = reinterpret_cast< XmlQueryExpression * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlTransaction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "execute" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "execute" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  arg2 = reinterpret_cast< XmlTransaction * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_XmlQueryContext,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "execute" "', argument " "3"" of type '" "XmlQueryContext &""'");
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "execute" "', argument " "3"" of type '" "XmlQueryContext &""'");
  }
  arg3 = reinterpret_cast< XmlQueryContext * >(argp3);
  {
    try {
      result = (XmlResults *)XmlQueryExpression_execute__SWIG_4((XmlQueryExpression const *)arg1,*arg2,*arg3);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlResults, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlQueryExpression_execute__SWIG_6(int argc, VALUE *argv, VALUE self) {
  XmlQueryExpression *arg1 = (XmlQueryExpression *) 0 ;
  XmlTransaction *arg2 = 0 ;
  XmlValue *arg3 = 0 ;
  XmlQueryContext *arg4 = 0 ;
  u_int32_t arg5 ;
  XmlResults *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlQueryExpression, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "execute" "', argument " "1"" of type '" "XmlQueryExpression const *""'");
  }
  arg1 = reinterpret_cast< XmlQueryExpression * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlTransaction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "execute" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "execute" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  arg2 = reinterpret_cast< XmlTransaction * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_XmlValue,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "execute" "', argument " "3"" of type '" "XmlValue const &""'");
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "execute" "', argument " "3"" of type '" "XmlValue const &""'");
  }
  arg3 = reinterpret_cast< XmlValue * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_XmlQueryContext,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "execute" "', argument " "4"" of type '" "XmlQueryContext &""'");
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "execute" "', argument " "4"" of type '" "XmlQueryContext &""'");
  }
  arg4 = reinterpret_cast< XmlQueryContext * >(argp4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "execute" "', argument " "5"" of type '" "u_int32_t""'");
  }
  arg5 = static_cast< u_int32_t >(val5);
  {
    try {
      result = (XmlResults *)XmlQueryExpression_execute__SWIG_6((XmlQueryExpression const *)arg1,*arg2,(XmlValue const &)*arg3,*arg4,arg5);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlResults, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlQueryExpression_execute__SWIG_7(int argc, VALUE *argv, VALUE self) {
  XmlQueryExpression *arg1 = (XmlQueryExpression *) 0 ;
  XmlTransaction *arg2 = 0 ;
  XmlValue *arg3 = 0 ;
  XmlQueryContext *arg4 = 0 ;
  XmlResults *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlQueryExpression, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "execute" "', argument " "1"" of type '" "XmlQueryExpression const *""'");
  }
  arg1 = reinterpret_cast< XmlQueryExpression * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlTransaction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "execute" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "execute" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  arg2 = reinterpret_cast< XmlTransaction * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_XmlValue,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "execute" "', argument " "3"" of type '" "XmlValue const &""'");
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "execute" "', argument " "3"" of type '" "XmlValue const &""'");
  }
  arg3 = reinterpret_cast< XmlValue * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_XmlQueryContext,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "execute" "', argument " "4"" of type '" "XmlQueryContext &""'");
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "execute" "', argument " "4"" of type '" "XmlQueryContext &""'");
  }
  arg4 = reinterpret_cast< XmlQueryContext * >(argp4);
  {
    try {
      result = (XmlResults *)XmlQueryExpression_execute__SWIG_6((XmlQueryExpression const *)arg1,*arg2,(XmlValue const &)*arg3,*arg4);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlResults, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_XmlQueryExpression_execute(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;

  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlQueryExpression, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlQueryContext, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_XmlQueryExpression_execute__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlQueryExpression, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlQueryContext, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_XmlQueryExpression_execute__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlQueryExpression, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlValue, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_XmlQueryContext, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_XmlQueryExpression_execute__SWIG_3(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlQueryExpression, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlTransaction, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_XmlQueryContext, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_XmlQueryExpression_execute__SWIG_5(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlQueryExpression, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlTransaction, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_XmlQueryContext, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_XmlQueryExpression_execute__SWIG_4(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlQueryExpression, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlValue, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_XmlQueryContext, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_XmlQueryExpression_execute__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlQueryExpression, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlTransaction, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_XmlValue, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_XmlQueryContext, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_XmlQueryExpression_execute__SWIG_7(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlQueryExpression, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlTransaction, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_XmlValue, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_XmlQueryContext, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_XmlQueryExpression_execute__SWIG_6(nargs, args, self);
            }
          }
        }
      }
    }
  }

fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'XmlQueryExpression_execute'");
  return Qnil;
}


swig_class cXmlInputStream;

SWIGINTERN void
free_XmlInputStream(XmlInputStream *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_XmlInputStream_curPos(int argc, VALUE *argv, VALUE self) {
  XmlInputStream *arg1 = (XmlInputStream *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlInputStream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "curPos" "', argument " "1"" of type '" "XmlInputStream const *""'");
  }
  arg1 = reinterpret_cast< XmlInputStream * >(argp1);
  {
    try {
      result = (unsigned int)((XmlInputStream const *)arg1)->curPos();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlInputStream_readBytes(int argc, VALUE *argv, VALUE self) {
  XmlInputStream *arg1 = (XmlInputStream *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlInputStream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "readBytes" "', argument " "1"" of type '" "XmlInputStream *""'");
  }
  arg1 = reinterpret_cast< XmlInputStream * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "readBytes" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "readBytes" "', argument " "3"" of type '" "unsigned int""'");
  }
  arg3 = static_cast< unsigned int >(val3);
  {
    try {
      result = (unsigned int)(arg1)->readBytes(arg2,arg3);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlInputStream_freeMemory(int argc, VALUE *argv, VALUE self) {
  XmlInputStream *arg1 = (XmlInputStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlInputStream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "freeMemory" "', argument " "1"" of type '" "XmlInputStream *""'");
  }
  arg1 = reinterpret_cast< XmlInputStream * >(argp1);
  {
    try {
      XmlInputStream_freeMemory(arg1);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return Qnil;
fail:
  return Qnil;
}


swig_class cXmlModify;

SWIGINTERN VALUE
_wrap_new_XmlModify__SWIG_0(int argc, VALUE *argv, VALUE self) {
  XmlModify *result = 0 ;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (XmlModify *)new XmlModify();DATA_PTR(self) = result;

    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_XmlModify_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_XmlModify_allocate(int argc, VALUE *argv, VALUE self) {
#endif


    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_XmlModify);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }


SWIGINTERN VALUE
_wrap_new_XmlModify__SWIG_1(int argc, VALUE *argv, VALUE self) {
  XmlModify *arg1 = 0 ;
  XmlModify *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_XmlModify,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XmlModify" "', argument " "1"" of type '" "XmlModify const &""'");
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XmlModify" "', argument " "1"" of type '" "XmlModify const &""'");
  }
  arg1 = reinterpret_cast< XmlModify * >(argp1);
  {
    try {
      result = (XmlModify *)new XmlModify((XmlModify const &)*arg1);DATA_PTR(self) = result;

    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_XmlModify(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;

  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ii++) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_XmlModify__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlModify, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_XmlModify__SWIG_1(nargs, args, self);
    }
  }

fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'new_XmlModify'");
  return Qnil;
}


SWIGINTERN void
free_XmlModify(XmlModify *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_XmlModify_addInsertBeforeStep__SWIG_0(int argc, VALUE *argv, VALUE self) {
  XmlModify *arg1 = (XmlModify *) 0 ;
  XmlQueryExpression *arg2 = 0 ;
  enum XmlModify::XmlObject arg3 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  int res5 = SWIG_OLDOBJ ;

  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlModify, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "addInsertBeforeStep" "', argument " "1"" of type '" "XmlModify *""'");
  }
  arg1 = reinterpret_cast< XmlModify * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlQueryExpression,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "addInsertBeforeStep" "', argument " "2"" of type '" "XmlQueryExpression const &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "addInsertBeforeStep" "', argument " "2"" of type '" "XmlQueryExpression const &""'");
  }
  arg2 = reinterpret_cast< XmlQueryExpression * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "addInsertBeforeStep" "', argument " "3"" of type '" "enum XmlModify::XmlObject""'");
  }
  arg3 = static_cast< enum XmlModify::XmlObject >(val3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "addInsertBeforeStep" "', argument " "4"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "addInsertBeforeStep" "', argument " "4"" of type '" "std::string const &""'");
    }
    arg4 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(argv[3], &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "addInsertBeforeStep" "', argument " "5"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "addInsertBeforeStep" "', argument " "5"" of type '" "std::string const &""'");
    }
    arg5 = ptr;
  }
  {
    try {
      (arg1)->addInsertBeforeStep((XmlQueryExpression const &)*arg2,arg3,(std::string const &)*arg4,(std::string const &)*arg5);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlModify_addInsertBeforeStep__SWIG_1(int argc, VALUE *argv, VALUE self) {
  XmlModify *arg1 = (XmlModify *) 0 ;
  XmlQueryExpression *arg2 = 0 ;
  enum XmlModify::XmlObject arg3 ;
  std::string *arg4 = 0 ;
  XmlResults *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  void *argp5 = 0 ;
  int res5 = 0 ;

  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlModify, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "addInsertBeforeStep" "', argument " "1"" of type '" "XmlModify *""'");
  }
  arg1 = reinterpret_cast< XmlModify * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlQueryExpression,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "addInsertBeforeStep" "', argument " "2"" of type '" "XmlQueryExpression const &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "addInsertBeforeStep" "', argument " "2"" of type '" "XmlQueryExpression const &""'");
  }
  arg2 = reinterpret_cast< XmlQueryExpression * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "addInsertBeforeStep" "', argument " "3"" of type '" "enum XmlModify::XmlObject""'");
  }
  arg3 = static_cast< enum XmlModify::XmlObject >(val3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "addInsertBeforeStep" "', argument " "4"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "addInsertBeforeStep" "', argument " "4"" of type '" "std::string const &""'");
    }
    arg4 = ptr;
  }
  res5 = SWIG_ConvertPtr(argv[3], &argp5, SWIGTYPE_p_XmlResults,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "addInsertBeforeStep" "', argument " "5"" of type '" "XmlResults &""'");
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "addInsertBeforeStep" "', argument " "5"" of type '" "XmlResults &""'");
  }
  arg5 = reinterpret_cast< XmlResults * >(argp5);
  {
    try {
      (arg1)->addInsertBeforeStep((XmlQueryExpression const &)*arg2,arg3,(std::string const &)*arg4,*arg5);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  if (SWIG_IsNewObj(res4)) delete arg4;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return Qnil;
}


SWIGINTERN VALUE _wrap_XmlModify_addInsertBeforeStep(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;

  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlModify, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlQueryExpression, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_XmlResults, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_XmlModify_addInsertBeforeStep__SWIG_1(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlModify, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlQueryExpression, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_XmlModify_addInsertBeforeStep__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }

fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'XmlModify_addInsertBeforeStep'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlModify_addInsertAfterStep__SWIG_0(int argc, VALUE *argv, VALUE self) {
  XmlModify *arg1 = (XmlModify *) 0 ;
  XmlQueryExpression *arg2 = 0 ;
  enum XmlModify::XmlObject arg3 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  int res5 = SWIG_OLDOBJ ;

  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlModify, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "addInsertAfterStep" "', argument " "1"" of type '" "XmlModify *""'");
  }
  arg1 = reinterpret_cast< XmlModify * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlQueryExpression,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "addInsertAfterStep" "', argument " "2"" of type '" "XmlQueryExpression const &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "addInsertAfterStep" "', argument " "2"" of type '" "XmlQueryExpression const &""'");
  }
  arg2 = reinterpret_cast< XmlQueryExpression * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "addInsertAfterStep" "', argument " "3"" of type '" "enum XmlModify::XmlObject""'");
  }
  arg3 = static_cast< enum XmlModify::XmlObject >(val3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "addInsertAfterStep" "', argument " "4"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "addInsertAfterStep" "', argument " "4"" of type '" "std::string const &""'");
    }
    arg4 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(argv[3], &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "addInsertAfterStep" "', argument " "5"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "addInsertAfterStep" "', argument " "5"" of type '" "std::string const &""'");
    }
    arg5 = ptr;
  }
  {
    try {
      (arg1)->addInsertAfterStep((XmlQueryExpression const &)*arg2,arg3,(std::string const &)*arg4,(std::string const &)*arg5);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlModify_addInsertAfterStep__SWIG_1(int argc, VALUE *argv, VALUE self) {
  XmlModify *arg1 = (XmlModify *) 0 ;
  XmlQueryExpression *arg2 = 0 ;
  enum XmlModify::XmlObject arg3 ;
  std::string *arg4 = 0 ;
  XmlResults *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  void *argp5 = 0 ;
  int res5 = 0 ;

  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlModify, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "addInsertAfterStep" "', argument " "1"" of type '" "XmlModify *""'");
  }
  arg1 = reinterpret_cast< XmlModify * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlQueryExpression,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "addInsertAfterStep" "', argument " "2"" of type '" "XmlQueryExpression const &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "addInsertAfterStep" "', argument " "2"" of type '" "XmlQueryExpression const &""'");
  }
  arg2 = reinterpret_cast< XmlQueryExpression * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "addInsertAfterStep" "', argument " "3"" of type '" "enum XmlModify::XmlObject""'");
  }
  arg3 = static_cast< enum XmlModify::XmlObject >(val3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "addInsertAfterStep" "', argument " "4"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "addInsertAfterStep" "', argument " "4"" of type '" "std::string const &""'");
    }
    arg4 = ptr;
  }
  res5 = SWIG_ConvertPtr(argv[3], &argp5, SWIGTYPE_p_XmlResults,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "addInsertAfterStep" "', argument " "5"" of type '" "XmlResults &""'");
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "addInsertAfterStep" "', argument " "5"" of type '" "XmlResults &""'");
  }
  arg5 = reinterpret_cast< XmlResults * >(argp5);
  {
    try {
      (arg1)->addInsertAfterStep((XmlQueryExpression const &)*arg2,arg3,(std::string const &)*arg4,*arg5);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  if (SWIG_IsNewObj(res4)) delete arg4;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return Qnil;
}


SWIGINTERN VALUE _wrap_XmlModify_addInsertAfterStep(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;

  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlModify, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlQueryExpression, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_XmlResults, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_XmlModify_addInsertAfterStep__SWIG_1(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlModify, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlQueryExpression, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_XmlModify_addInsertAfterStep__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }

fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'XmlModify_addInsertAfterStep'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlModify_addAppendStep__SWIG_0(int argc, VALUE *argv, VALUE self) {
  XmlModify *arg1 = (XmlModify *) 0 ;
  XmlQueryExpression *arg2 = 0 ;
  enum XmlModify::XmlObject arg3 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  int res5 = SWIG_OLDOBJ ;
  int val6 ;
  int ecode6 = 0 ;

  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlModify, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "addAppendStep" "', argument " "1"" of type '" "XmlModify *""'");
  }
  arg1 = reinterpret_cast< XmlModify * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlQueryExpression,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "addAppendStep" "', argument " "2"" of type '" "XmlQueryExpression const &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "addAppendStep" "', argument " "2"" of type '" "XmlQueryExpression const &""'");
  }
  arg2 = reinterpret_cast< XmlQueryExpression * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "addAppendStep" "', argument " "3"" of type '" "enum XmlModify::XmlObject""'");
  }
  arg3 = static_cast< enum XmlModify::XmlObject >(val3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "addAppendStep" "', argument " "4"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "addAppendStep" "', argument " "4"" of type '" "std::string const &""'");
    }
    arg4 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(argv[3], &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "addAppendStep" "', argument " "5"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "addAppendStep" "', argument " "5"" of type '" "std::string const &""'");
    }
    arg5 = ptr;
  }
  ecode6 = SWIG_AsVal_int(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "addAppendStep" "', argument " "6"" of type '" "int""'");
  }
  arg6 = static_cast< int >(val6);
  {
    try {
      (arg1)->addAppendStep((XmlQueryExpression const &)*arg2,arg3,(std::string const &)*arg4,(std::string const &)*arg5,arg6);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlModify_addAppendStep__SWIG_1(int argc, VALUE *argv, VALUE self) {
  XmlModify *arg1 = (XmlModify *) 0 ;
  XmlQueryExpression *arg2 = 0 ;
  enum XmlModify::XmlObject arg3 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  int res5 = SWIG_OLDOBJ ;

  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlModify, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "addAppendStep" "', argument " "1"" of type '" "XmlModify *""'");
  }
  arg1 = reinterpret_cast< XmlModify * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlQueryExpression,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "addAppendStep" "', argument " "2"" of type '" "XmlQueryExpression const &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "addAppendStep" "', argument " "2"" of type '" "XmlQueryExpression const &""'");
  }
  arg2 = reinterpret_cast< XmlQueryExpression * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "addAppendStep" "', argument " "3"" of type '" "enum XmlModify::XmlObject""'");
  }
  arg3 = static_cast< enum XmlModify::XmlObject >(val3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "addAppendStep" "', argument " "4"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "addAppendStep" "', argument " "4"" of type '" "std::string const &""'");
    }
    arg4 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(argv[3], &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "addAppendStep" "', argument " "5"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "addAppendStep" "', argument " "5"" of type '" "std::string const &""'");
    }
    arg5 = ptr;
  }
  {
    try {
      (arg1)->addAppendStep((XmlQueryExpression const &)*arg2,arg3,(std::string const &)*arg4,(std::string const &)*arg5);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlModify_addAppendStep__SWIG_2(int argc, VALUE *argv, VALUE self) {
  XmlModify *arg1 = (XmlModify *) 0 ;
  XmlQueryExpression *arg2 = 0 ;
  enum XmlModify::XmlObject arg3 ;
  std::string *arg4 = 0 ;
  XmlResults *arg5 = 0 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;

  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlModify, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "addAppendStep" "', argument " "1"" of type '" "XmlModify *""'");
  }
  arg1 = reinterpret_cast< XmlModify * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlQueryExpression,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "addAppendStep" "', argument " "2"" of type '" "XmlQueryExpression const &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "addAppendStep" "', argument " "2"" of type '" "XmlQueryExpression const &""'");
  }
  arg2 = reinterpret_cast< XmlQueryExpression * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "addAppendStep" "', argument " "3"" of type '" "enum XmlModify::XmlObject""'");
  }
  arg3 = static_cast< enum XmlModify::XmlObject >(val3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "addAppendStep" "', argument " "4"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "addAppendStep" "', argument " "4"" of type '" "std::string const &""'");
    }
    arg4 = ptr;
  }
  res5 = SWIG_ConvertPtr(argv[3], &argp5, SWIGTYPE_p_XmlResults,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "addAppendStep" "', argument " "5"" of type '" "XmlResults &""'");
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "addAppendStep" "', argument " "5"" of type '" "XmlResults &""'");
  }
  arg5 = reinterpret_cast< XmlResults * >(argp5);
  ecode6 = SWIG_AsVal_int(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "addAppendStep" "', argument " "6"" of type '" "int""'");
  }
  arg6 = static_cast< int >(val6);
  {
    try {
      (arg1)->addAppendStep((XmlQueryExpression const &)*arg2,arg3,(std::string const &)*arg4,*arg5,arg6);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  if (SWIG_IsNewObj(res4)) delete arg4;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlModify_addAppendStep__SWIG_3(int argc, VALUE *argv, VALUE self) {
  XmlModify *arg1 = (XmlModify *) 0 ;
  XmlQueryExpression *arg2 = 0 ;
  enum XmlModify::XmlObject arg3 ;
  std::string *arg4 = 0 ;
  XmlResults *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  void *argp5 = 0 ;
  int res5 = 0 ;

  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlModify, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "addAppendStep" "', argument " "1"" of type '" "XmlModify *""'");
  }
  arg1 = reinterpret_cast< XmlModify * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlQueryExpression,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "addAppendStep" "', argument " "2"" of type '" "XmlQueryExpression const &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "addAppendStep" "', argument " "2"" of type '" "XmlQueryExpression const &""'");
  }
  arg2 = reinterpret_cast< XmlQueryExpression * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "addAppendStep" "', argument " "3"" of type '" "enum XmlModify::XmlObject""'");
  }
  arg3 = static_cast< enum XmlModify::XmlObject >(val3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "addAppendStep" "', argument " "4"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "addAppendStep" "', argument " "4"" of type '" "std::string const &""'");
    }
    arg4 = ptr;
  }
  res5 = SWIG_ConvertPtr(argv[3], &argp5, SWIGTYPE_p_XmlResults,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "addAppendStep" "', argument " "5"" of type '" "XmlResults &""'");
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "addAppendStep" "', argument " "5"" of type '" "XmlResults &""'");
  }
  arg5 = reinterpret_cast< XmlResults * >(argp5);
  {
    try {
      (arg1)->addAppendStep((XmlQueryExpression const &)*arg2,arg3,(std::string const &)*arg4,*arg5);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  if (SWIG_IsNewObj(res4)) delete arg4;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return Qnil;
}


SWIGINTERN VALUE _wrap_XmlModify_addAppendStep(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[7];
  int ii;

  argc = nargs + 1;
  argv[0] = self;
  if (argc > 7) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlModify, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlQueryExpression, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_XmlResults, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_XmlModify_addAppendStep__SWIG_3(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlModify, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlQueryExpression, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_XmlModify_addAppendStep__SWIG_1(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlModify, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlQueryExpression, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_XmlResults, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_XmlModify_addAppendStep__SWIG_2(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlModify, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlQueryExpression, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_XmlModify_addAppendStep__SWIG_0(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }

fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'XmlModify_addAppendStep'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlModify_addUpdateStep(int argc, VALUE *argv, VALUE self) {
  XmlModify *arg1 = (XmlModify *) 0 ;
  XmlQueryExpression *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;

  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlModify, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "addUpdateStep" "', argument " "1"" of type '" "XmlModify *""'");
  }
  arg1 = reinterpret_cast< XmlModify * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlQueryExpression,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "addUpdateStep" "', argument " "2"" of type '" "XmlQueryExpression const &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "addUpdateStep" "', argument " "2"" of type '" "XmlQueryExpression const &""'");
  }
  arg2 = reinterpret_cast< XmlQueryExpression * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "addUpdateStep" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "addUpdateStep" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->addUpdateStep((XmlQueryExpression const &)*arg2,(std::string const &)*arg3);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlModify_addRemoveStep(int argc, VALUE *argv, VALUE self) {
  XmlModify *arg1 = (XmlModify *) 0 ;
  XmlQueryExpression *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlModify, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "addRemoveStep" "', argument " "1"" of type '" "XmlModify *""'");
  }
  arg1 = reinterpret_cast< XmlModify * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlQueryExpression,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "addRemoveStep" "', argument " "2"" of type '" "XmlQueryExpression const &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "addRemoveStep" "', argument " "2"" of type '" "XmlQueryExpression const &""'");
  }
  arg2 = reinterpret_cast< XmlQueryExpression * >(argp2);
  {
    try {
      (arg1)->addRemoveStep((XmlQueryExpression const &)*arg2);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlModify_addRenameStep(int argc, VALUE *argv, VALUE self) {
  XmlModify *arg1 = (XmlModify *) 0 ;
  XmlQueryExpression *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;

  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlModify, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "addRenameStep" "', argument " "1"" of type '" "XmlModify *""'");
  }
  arg1 = reinterpret_cast< XmlModify * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlQueryExpression,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "addRenameStep" "', argument " "2"" of type '" "XmlQueryExpression const &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "addRenameStep" "', argument " "2"" of type '" "XmlQueryExpression const &""'");
  }
  arg2 = reinterpret_cast< XmlQueryExpression * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "addRenameStep" "', argument " "3"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "addRenameStep" "', argument " "3"" of type '" "std::string const &""'");
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->addRenameStep((XmlQueryExpression const &)*arg2,(std::string const &)*arg3);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlModify_setNewEncoding(int argc, VALUE *argv, VALUE self) {
  XmlModify *arg1 = (XmlModify *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlModify, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setNewEncoding" "', argument " "1"" of type '" "XmlModify *""'");
  }
  arg1 = reinterpret_cast< XmlModify * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "setNewEncoding" "', argument " "2"" of type '" "std::string const &""'");
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "setNewEncoding" "', argument " "2"" of type '" "std::string const &""'");
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->setNewEncoding((std::string const &)*arg2);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlModify_execute__SWIG_0(int argc, VALUE *argv, VALUE self) {
  XmlModify *arg1 = (XmlModify *) 0 ;
  XmlValue *arg2 = 0 ;
  XmlQueryContext *arg3 = 0 ;
  XmlUpdateContext *arg4 = 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlModify, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "execute" "', argument " "1"" of type '" "XmlModify const *""'");
  }
  arg1 = reinterpret_cast< XmlModify * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlValue,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "execute" "', argument " "2"" of type '" "XmlValue &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "execute" "', argument " "2"" of type '" "XmlValue &""'");
  }
  arg2 = reinterpret_cast< XmlValue * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_XmlQueryContext,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "execute" "', argument " "3"" of type '" "XmlQueryContext &""'");
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "execute" "', argument " "3"" of type '" "XmlQueryContext &""'");
  }
  arg3 = reinterpret_cast< XmlQueryContext * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_XmlUpdateContext,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "execute" "', argument " "4"" of type '" "XmlUpdateContext &""'");
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "execute" "', argument " "4"" of type '" "XmlUpdateContext &""'");
  }
  arg4 = reinterpret_cast< XmlUpdateContext * >(argp4);
  {
    try {
      result = (unsigned int)((XmlModify const *)arg1)->execute(*arg2,*arg3,*arg4);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlModify_execute__SWIG_1(int argc, VALUE *argv, VALUE self) {
  XmlModify *arg1 = (XmlModify *) 0 ;
  XmlResults *arg2 = 0 ;
  XmlQueryContext *arg3 = 0 ;
  XmlUpdateContext *arg4 = 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlModify, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "execute" "', argument " "1"" of type '" "XmlModify const *""'");
  }
  arg1 = reinterpret_cast< XmlModify * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlResults,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "execute" "', argument " "2"" of type '" "XmlResults &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "execute" "', argument " "2"" of type '" "XmlResults &""'");
  }
  arg2 = reinterpret_cast< XmlResults * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_XmlQueryContext,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "execute" "', argument " "3"" of type '" "XmlQueryContext &""'");
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "execute" "', argument " "3"" of type '" "XmlQueryContext &""'");
  }
  arg3 = reinterpret_cast< XmlQueryContext * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_XmlUpdateContext,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "execute" "', argument " "4"" of type '" "XmlUpdateContext &""'");
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "execute" "', argument " "4"" of type '" "XmlUpdateContext &""'");
  }
  arg4 = reinterpret_cast< XmlUpdateContext * >(argp4);
  {
    try {
      result = (unsigned int)((XmlModify const *)arg1)->execute(*arg2,*arg3,*arg4);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlModify_execute__SWIG_2(int argc, VALUE *argv, VALUE self) {
  XmlModify *arg1 = (XmlModify *) 0 ;
  XmlTransaction *arg2 = 0 ;
  XmlValue *arg3 = 0 ;
  XmlQueryContext *arg4 = 0 ;
  XmlUpdateContext *arg5 = 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlModify, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "execute" "', argument " "1"" of type '" "XmlModify const *""'");
  }
  arg1 = reinterpret_cast< XmlModify * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlTransaction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "execute" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "execute" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  arg2 = reinterpret_cast< XmlTransaction * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_XmlValue,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "execute" "', argument " "3"" of type '" "XmlValue &""'");
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "execute" "', argument " "3"" of type '" "XmlValue &""'");
  }
  arg3 = reinterpret_cast< XmlValue * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_XmlQueryContext,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "execute" "', argument " "4"" of type '" "XmlQueryContext &""'");
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "execute" "', argument " "4"" of type '" "XmlQueryContext &""'");
  }
  arg4 = reinterpret_cast< XmlQueryContext * >(argp4);
  res5 = SWIG_ConvertPtr(argv[3], &argp5, SWIGTYPE_p_XmlUpdateContext,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "execute" "', argument " "5"" of type '" "XmlUpdateContext &""'");
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "execute" "', argument " "5"" of type '" "XmlUpdateContext &""'");
  }
  arg5 = reinterpret_cast< XmlUpdateContext * >(argp5);
  {
    try {
      result = (unsigned int)((XmlModify const *)arg1)->execute(*arg2,*arg3,*arg4,*arg5);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlModify_execute__SWIG_3(int argc, VALUE *argv, VALUE self) {
  XmlModify *arg1 = (XmlModify *) 0 ;
  XmlTransaction *arg2 = 0 ;
  XmlResults *arg3 = 0 ;
  XmlQueryContext *arg4 = 0 ;
  XmlUpdateContext *arg5 = 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlModify, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "execute" "', argument " "1"" of type '" "XmlModify const *""'");
  }
  arg1 = reinterpret_cast< XmlModify * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XmlTransaction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "execute" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "execute" "', argument " "2"" of type '" "XmlTransaction &""'");
  }
  arg2 = reinterpret_cast< XmlTransaction * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_XmlResults,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "execute" "', argument " "3"" of type '" "XmlResults &""'");
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "execute" "', argument " "3"" of type '" "XmlResults &""'");
  }
  arg3 = reinterpret_cast< XmlResults * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_XmlQueryContext,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "execute" "', argument " "4"" of type '" "XmlQueryContext &""'");
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "execute" "', argument " "4"" of type '" "XmlQueryContext &""'");
  }
  arg4 = reinterpret_cast< XmlQueryContext * >(argp4);
  res5 = SWIG_ConvertPtr(argv[3], &argp5, SWIGTYPE_p_XmlUpdateContext,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "execute" "', argument " "5"" of type '" "XmlUpdateContext &""'");
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "execute" "', argument " "5"" of type '" "XmlUpdateContext &""'");
  }
  arg5 = reinterpret_cast< XmlUpdateContext * >(argp5);
  {
    try {
      result = (unsigned int)((XmlModify const *)arg1)->execute(*arg2,*arg3,*arg4,*arg5);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_XmlModify_execute(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;

  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlModify, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlValue, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_XmlQueryContext, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_XmlUpdateContext, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_XmlModify_execute__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlModify, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlResults, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_XmlQueryContext, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_XmlUpdateContext, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_XmlModify_execute__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlModify, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlTransaction, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_XmlValue, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_XmlQueryContext, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_XmlUpdateContext, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_XmlModify_execute__SWIG_2(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlModify, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_XmlTransaction, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_XmlResults, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_XmlQueryContext, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_XmlUpdateContext, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_XmlModify_execute__SWIG_3(nargs, args, self);
            }
          }
        }
      }
    }
  }

fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'XmlModify_execute'");
  return Qnil;
}


swig_class cXmlTransaction;

SWIGINTERN void
free_XmlTransaction(XmlTransaction *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_new_XmlTransaction__SWIG_0(int argc, VALUE *argv, VALUE self) {
  XmlTransaction *result = 0 ;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (XmlTransaction *)new XmlTransaction();DATA_PTR(self) = result;

    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_XmlTransaction_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_XmlTransaction_allocate(int argc, VALUE *argv, VALUE self) {
#endif


    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_XmlTransaction);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }


SWIGINTERN VALUE
_wrap_new_XmlTransaction__SWIG_1(int argc, VALUE *argv, VALUE self) {
  XmlTransaction *arg1 = 0 ;
  XmlTransaction *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_XmlTransaction,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XmlTransaction" "', argument " "1"" of type '" "XmlTransaction const &""'");
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XmlTransaction" "', argument " "1"" of type '" "XmlTransaction const &""'");
  }
  arg1 = reinterpret_cast< XmlTransaction * >(argp1);
  {
    try {
      result = (XmlTransaction *)new XmlTransaction((XmlTransaction const &)*arg1);DATA_PTR(self) = result;

    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_XmlTransaction(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;

  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ii++) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_XmlTransaction__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlTransaction, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_XmlTransaction__SWIG_1(nargs, args, self);
    }
  }

fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'new_XmlTransaction'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlTransaction_abort(int argc, VALUE *argv, VALUE self) {
  XmlTransaction *arg1 = (XmlTransaction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlTransaction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "abort" "', argument " "1"" of type '" "XmlTransaction *""'");
  }
  arg1 = reinterpret_cast< XmlTransaction * >(argp1);
  {
    try {
      (arg1)->abort();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlTransaction_commit__SWIG_0(int argc, VALUE *argv, VALUE self) {
  XmlTransaction *arg1 = (XmlTransaction *) 0 ;
  u_int32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlTransaction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "commit" "', argument " "1"" of type '" "XmlTransaction *""'");
  }
  arg1 = reinterpret_cast< XmlTransaction * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "commit" "', argument " "2"" of type '" "u_int32_t""'");
  }
  arg2 = static_cast< u_int32_t >(val2);
  {
    try {
      (arg1)->commit(arg2);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlTransaction_createChild__SWIG_0(int argc, VALUE *argv, VALUE self) {
  XmlTransaction *arg1 = (XmlTransaction *) 0 ;
  u_int32_t arg2 ;
  XmlTransaction *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlTransaction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "createChild" "', argument " "1"" of type '" "XmlTransaction *""'");
  }
  arg1 = reinterpret_cast< XmlTransaction * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "createChild" "', argument " "2"" of type '" "u_int32_t""'");
  }
  arg2 = static_cast< u_int32_t >(val2);
  {
    try {
      result = (XmlTransaction *)XmlTransaction_createChild__SWIG_0(arg1,arg2);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlTransaction, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlTransaction_createChild__SWIG_1(int argc, VALUE *argv, VALUE self) {
  XmlTransaction *arg1 = (XmlTransaction *) 0 ;
  XmlTransaction *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlTransaction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "createChild" "', argument " "1"" of type '" "XmlTransaction *""'");
  }
  arg1 = reinterpret_cast< XmlTransaction * >(argp1);
  {
    try {
      result = (XmlTransaction *)XmlTransaction_createChild__SWIG_0(arg1);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_XmlTransaction, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_XmlTransaction_createChild(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;

  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlTransaction, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_XmlTransaction_createChild__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlTransaction, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_XmlTransaction_createChild__SWIG_0(nargs, args, self);
      }
    }
  }

fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'XmlTransaction_createChild'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlTransaction_commit__SWIG_1(int argc, VALUE *argv, VALUE self) {
  XmlTransaction *arg1 = (XmlTransaction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlTransaction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "commit" "', argument " "1"" of type '" "XmlTransaction *""'");
  }
  arg1 = reinterpret_cast< XmlTransaction * >(argp1);
  {
    try {
      XmlTransaction_commit__SWIG_1(arg1);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_XmlTransaction_commit(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;

  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlTransaction, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_XmlTransaction_commit__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlTransaction, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_XmlTransaction_commit__SWIG_0(nargs, args, self);
      }
    }
  }

fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'XmlTransaction_commit'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlTransaction_getDbTxn(int argc, VALUE *argv, VALUE self) {
  XmlTransaction *arg1 = (XmlTransaction *) 0 ;
  DbTxn *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlTransaction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getDbTxn" "', argument " "1"" of type '" "XmlTransaction *""'");
  }
  arg1 = reinterpret_cast< XmlTransaction * >(argp1);
  {
    try {
      result = (DbTxn *)(arg1)->getDbTxn();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DbTxn, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


swig_class cXmlStatistics;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_XmlStatistics_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_XmlStatistics_allocate(int argc, VALUE *argv, VALUE self) {
#endif


    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_XmlStatistics);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }


SWIGINTERN VALUE
_wrap_new_XmlStatistics(int argc, VALUE *argv, VALUE self) {
  XmlStatistics *arg1 = 0 ;
  XmlStatistics *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_XmlStatistics,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XmlStatistics" "', argument " "1"" of type '" "XmlStatistics const &""'");
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XmlStatistics" "', argument " "1"" of type '" "XmlStatistics const &""'");
  }
  arg1 = reinterpret_cast< XmlStatistics * >(argp1);
  {
    try {
      result = (XmlStatistics *)new XmlStatistics((XmlStatistics const &)*arg1);DATA_PTR(self) = result;

    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_XmlStatistics(XmlStatistics *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_XmlStatistics_getNumberOfIndexedKeys(int argc, VALUE *argv, VALUE self) {
  XmlStatistics *arg1 = (XmlStatistics *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlStatistics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getNumberOfIndexedKeys" "', argument " "1"" of type '" "XmlStatistics const *""'");
  }
  arg1 = reinterpret_cast< XmlStatistics * >(argp1);
  {
    try {
      result = (double)((XmlStatistics const *)arg1)->getNumberOfIndexedKeys();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlStatistics_getNumberOfUniqueKeys(int argc, VALUE *argv, VALUE self) {
  XmlStatistics *arg1 = (XmlStatistics *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlStatistics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getNumberOfUniqueKeys" "', argument " "1"" of type '" "XmlStatistics const *""'");
  }
  arg1 = reinterpret_cast< XmlStatistics * >(argp1);
  {
    try {
      result = (double)((XmlStatistics const *)arg1)->getNumberOfUniqueKeys();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlStatistics_getSumKeyValueSize(int argc, VALUE *argv, VALUE self) {
  XmlStatistics *arg1 = (XmlStatistics *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlStatistics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getSumKeyValueSize" "', argument " "1"" of type '" "XmlStatistics const *""'");
  }
  arg1 = reinterpret_cast< XmlStatistics * >(argp1);
  {
    try {
      result = (double)((XmlStatistics const *)arg1)->getSumKeyValueSize();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


swig_class cXmlEventReader;

SWIGINTERN void
free_XmlEventReader(XmlEventReader *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_XmlEventReader_close(int argc, VALUE *argv, VALUE self) {
  XmlEventReader *arg1 = (XmlEventReader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlEventReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "close" "', argument " "1"" of type '" "XmlEventReader *""'");
  }
  arg1 = reinterpret_cast< XmlEventReader * >(argp1);
  {
    try {
      (arg1)->close();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlEventReader_setReportEntityInfo(int argc, VALUE *argv, VALUE self) {
  XmlEventReader *arg1 = (XmlEventReader *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlEventReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setReportEntityInfo" "', argument " "1"" of type '" "XmlEventReader *""'");
  }
  arg1 = reinterpret_cast< XmlEventReader * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "setReportEntityInfo" "', argument " "2"" of type '" "bool""'");
  }
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->setReportEntityInfo(arg2);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlEventReader_getReportEntityInfo(int argc, VALUE *argv, VALUE self) {
  XmlEventReader *arg1 = (XmlEventReader *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlEventReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getReportEntityInfo" "', argument " "1"" of type '" "XmlEventReader const *""'");
  }
  arg1 = reinterpret_cast< XmlEventReader * >(argp1);
  {
    try {
      result = (bool)((XmlEventReader const *)arg1)->getReportEntityInfo();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlEventReader_setExpandEntities(int argc, VALUE *argv, VALUE self) {
  XmlEventReader *arg1 = (XmlEventReader *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlEventReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setExpandEntities" "', argument " "1"" of type '" "XmlEventReader *""'");
  }
  arg1 = reinterpret_cast< XmlEventReader * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "setExpandEntities" "', argument " "2"" of type '" "bool""'");
  }
  arg2 = static_cast< bool >(val2);
  {
    try {
      (arg1)->setExpandEntities(arg2);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlEventReader_getExpandEntities(int argc, VALUE *argv, VALUE self) {
  XmlEventReader *arg1 = (XmlEventReader *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlEventReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getExpandEntities" "', argument " "1"" of type '" "XmlEventReader const *""'");
  }
  arg1 = reinterpret_cast< XmlEventReader * >(argp1);
  {
    try {
      result = (bool)((XmlEventReader const *)arg1)->getExpandEntities();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlEventReader_next(int argc, VALUE *argv, VALUE self) {
  XmlEventReader *arg1 = (XmlEventReader *) 0 ;
  enum XmlEventReader::XmlEventType result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlEventReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "next" "', argument " "1"" of type '" "XmlEventReader *""'");
  }
  arg1 = reinterpret_cast< XmlEventReader * >(argp1);
  {
    try {
      result = (enum XmlEventReader::XmlEventType)(arg1)->next();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlEventReader_nextTag(int argc, VALUE *argv, VALUE self) {
  XmlEventReader *arg1 = (XmlEventReader *) 0 ;
  enum XmlEventReader::XmlEventType result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlEventReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "nextTag" "', argument " "1"" of type '" "XmlEventReader *""'");
  }
  arg1 = reinterpret_cast< XmlEventReader * >(argp1);
  {
    try {
      result = (enum XmlEventReader::XmlEventType)(arg1)->nextTag();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlEventReader_hasNext(int argc, VALUE *argv, VALUE self) {
  XmlEventReader *arg1 = (XmlEventReader *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlEventReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hasNext" "', argument " "1"" of type '" "XmlEventReader const *""'");
  }
  arg1 = reinterpret_cast< XmlEventReader * >(argp1);
  {
    try {
      result = (bool)((XmlEventReader const *)arg1)->hasNext();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlEventReader_getEventType(int argc, VALUE *argv, VALUE self) {
  XmlEventReader *arg1 = (XmlEventReader *) 0 ;
  enum XmlEventReader::XmlEventType result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlEventReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getEventType" "', argument " "1"" of type '" "XmlEventReader const *""'");
  }
  arg1 = reinterpret_cast< XmlEventReader * >(argp1);
  {
    try {
      result = (enum XmlEventReader::XmlEventType)((XmlEventReader const *)arg1)->getEventType();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlEventReader_getNamespaceURI(int argc, VALUE *argv, VALUE self) {
  XmlEventReader *arg1 = (XmlEventReader *) 0 ;
  unsigned char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlEventReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getNamespaceURI" "', argument " "1"" of type '" "XmlEventReader const *""'");
  }
  arg1 = reinterpret_cast< XmlEventReader * >(argp1);
  {
    try {
      result = (unsigned char *)((XmlEventReader const *)arg1)->getNamespaceURI();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlEventReader_getLocalName(int argc, VALUE *argv, VALUE self) {
  XmlEventReader *arg1 = (XmlEventReader *) 0 ;
  unsigned char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlEventReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getLocalName" "', argument " "1"" of type '" "XmlEventReader const *""'");
  }
  arg1 = reinterpret_cast< XmlEventReader * >(argp1);
  {
    try {
      result = (unsigned char *)((XmlEventReader const *)arg1)->getLocalName();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlEventReader_getPrefix(int argc, VALUE *argv, VALUE self) {
  XmlEventReader *arg1 = (XmlEventReader *) 0 ;
  unsigned char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlEventReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getPrefix" "', argument " "1"" of type '" "XmlEventReader const *""'");
  }
  arg1 = reinterpret_cast< XmlEventReader * >(argp1);
  {
    try {
      result = (unsigned char *)((XmlEventReader const *)arg1)->getPrefix();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlEventReader_getValue(int argc, VALUE *argv, VALUE self) {
  XmlEventReader *arg1 = (XmlEventReader *) 0 ;
  unsigned char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlEventReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getValue" "', argument " "1"" of type '" "XmlEventReader const *""'");
  }
  arg1 = reinterpret_cast< XmlEventReader * >(argp1);
  {
    try {
      result = (unsigned char *)XmlEventReader_getValue((XmlEventReader const *)arg1);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlEventReader_getValueLength(int argc, VALUE *argv, VALUE self) {
  XmlEventReader *arg1 = (XmlEventReader *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlEventReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getValueLength" "', argument " "1"" of type '" "XmlEventReader const *""'");
  }
  arg1 = reinterpret_cast< XmlEventReader * >(argp1);
  {
    try {
      result = (int)XmlEventReader_getValueLength((XmlEventReader const *)arg1);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlEventReader_getAttributeCount(int argc, VALUE *argv, VALUE self) {
  XmlEventReader *arg1 = (XmlEventReader *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlEventReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getAttributeCount" "', argument " "1"" of type '" "XmlEventReader const *""'");
  }
  arg1 = reinterpret_cast< XmlEventReader * >(argp1);
  {
    try {
      result = (int)((XmlEventReader const *)arg1)->getAttributeCount();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlEventReader_isAttributeSpecified(int argc, VALUE *argv, VALUE self) {
  XmlEventReader *arg1 = (XmlEventReader *) 0 ;
  int arg2 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlEventReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "isAttributeSpecified" "', argument " "1"" of type '" "XmlEventReader const *""'");
  }
  arg1 = reinterpret_cast< XmlEventReader * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "isAttributeSpecified" "', argument " "2"" of type '" "int""'");
  }
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (bool)((XmlEventReader const *)arg1)->isAttributeSpecified(arg2);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlEventReader_getAttributeLocalName(int argc, VALUE *argv, VALUE self) {
  XmlEventReader *arg1 = (XmlEventReader *) 0 ;
  int arg2 ;
  unsigned char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlEventReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getAttributeLocalName" "', argument " "1"" of type '" "XmlEventReader const *""'");
  }
  arg1 = reinterpret_cast< XmlEventReader * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "getAttributeLocalName" "', argument " "2"" of type '" "int""'");
  }
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (unsigned char *)((XmlEventReader const *)arg1)->getAttributeLocalName(arg2);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlEventReader_getAttributeNamespaceURI(int argc, VALUE *argv, VALUE self) {
  XmlEventReader *arg1 = (XmlEventReader *) 0 ;
  int arg2 ;
  unsigned char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlEventReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getAttributeNamespaceURI" "', argument " "1"" of type '" "XmlEventReader const *""'");
  }
  arg1 = reinterpret_cast< XmlEventReader * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "getAttributeNamespaceURI" "', argument " "2"" of type '" "int""'");
  }
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (unsigned char *)((XmlEventReader const *)arg1)->getAttributeNamespaceURI(arg2);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlEventReader_getAttributePrefix(int argc, VALUE *argv, VALUE self) {
  XmlEventReader *arg1 = (XmlEventReader *) 0 ;
  int arg2 ;
  unsigned char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlEventReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getAttributePrefix" "', argument " "1"" of type '" "XmlEventReader const *""'");
  }
  arg1 = reinterpret_cast< XmlEventReader * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "getAttributePrefix" "', argument " "2"" of type '" "int""'");
  }
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (unsigned char *)((XmlEventReader const *)arg1)->getAttributePrefix(arg2);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlEventReader_getAttributeValue(int argc, VALUE *argv, VALUE self) {
  XmlEventReader *arg1 = (XmlEventReader *) 0 ;
  int arg2 ;
  unsigned char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlEventReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getAttributeValue" "', argument " "1"" of type '" "XmlEventReader const *""'");
  }
  arg1 = reinterpret_cast< XmlEventReader * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "getAttributeValue" "', argument " "2"" of type '" "int""'");
  }
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (unsigned char *)((XmlEventReader const *)arg1)->getAttributeValue(arg2);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlEventReader_getEncoding(int argc, VALUE *argv, VALUE self) {
  XmlEventReader *arg1 = (XmlEventReader *) 0 ;
  unsigned char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlEventReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getEncoding" "', argument " "1"" of type '" "XmlEventReader const *""'");
  }
  arg1 = reinterpret_cast< XmlEventReader * >(argp1);
  {
    try {
      result = (unsigned char *)((XmlEventReader const *)arg1)->getEncoding();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlEventReader_getVersion(int argc, VALUE *argv, VALUE self) {
  XmlEventReader *arg1 = (XmlEventReader *) 0 ;
  unsigned char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlEventReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getVersion" "', argument " "1"" of type '" "XmlEventReader const *""'");
  }
  arg1 = reinterpret_cast< XmlEventReader * >(argp1);
  {
    try {
      result = (unsigned char *)((XmlEventReader const *)arg1)->getVersion();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlEventReader_getSystemId(int argc, VALUE *argv, VALUE self) {
  XmlEventReader *arg1 = (XmlEventReader *) 0 ;
  unsigned char *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlEventReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getSystemId" "', argument " "1"" of type '" "XmlEventReader const *""'");
  }
  arg1 = reinterpret_cast< XmlEventReader * >(argp1);
  {
    try {
      result = (unsigned char *)((XmlEventReader const *)arg1)->getSystemId();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlEventReader_isStandalone(int argc, VALUE *argv, VALUE self) {
  XmlEventReader *arg1 = (XmlEventReader *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlEventReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "isStandalone" "', argument " "1"" of type '" "XmlEventReader const *""'");
  }
  arg1 = reinterpret_cast< XmlEventReader * >(argp1);
  {
    try {
      result = (bool)((XmlEventReader const *)arg1)->isStandalone();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlEventReader_standaloneSet(int argc, VALUE *argv, VALUE self) {
  XmlEventReader *arg1 = (XmlEventReader *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlEventReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "standaloneSet" "', argument " "1"" of type '" "XmlEventReader const *""'");
  }
  arg1 = reinterpret_cast< XmlEventReader * >(argp1);
  {
    try {
      result = (bool)((XmlEventReader const *)arg1)->standaloneSet();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlEventReader_encodingSet(int argc, VALUE *argv, VALUE self) {
  XmlEventReader *arg1 = (XmlEventReader *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlEventReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encodingSet" "', argument " "1"" of type '" "XmlEventReader const *""'");
  }
  arg1 = reinterpret_cast< XmlEventReader * >(argp1);
  {
    try {
      result = (bool)((XmlEventReader const *)arg1)->encodingSet();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlEventReader_hasEntityEscapeInfo(int argc, VALUE *argv, VALUE self) {
  XmlEventReader *arg1 = (XmlEventReader *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlEventReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hasEntityEscapeInfo" "', argument " "1"" of type '" "XmlEventReader const *""'");
  }
  arg1 = reinterpret_cast< XmlEventReader * >(argp1);
  {
    try {
      result = (bool)((XmlEventReader const *)arg1)->hasEntityEscapeInfo();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlEventReader_needsEntityEscape__SWIG_0(int argc, VALUE *argv, VALUE self) {
  XmlEventReader *arg1 = (XmlEventReader *) 0 ;
  int arg2 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlEventReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "needsEntityEscape" "', argument " "1"" of type '" "XmlEventReader const *""'");
  }
  arg1 = reinterpret_cast< XmlEventReader * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "needsEntityEscape" "', argument " "2"" of type '" "int""'");
  }
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (bool)((XmlEventReader const *)arg1)->needsEntityEscape(arg2);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlEventReader_needsEntityEscape__SWIG_1(int argc, VALUE *argv, VALUE self) {
  XmlEventReader *arg1 = (XmlEventReader *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlEventReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "needsEntityEscape" "', argument " "1"" of type '" "XmlEventReader const *""'");
  }
  arg1 = reinterpret_cast< XmlEventReader * >(argp1);
  {
    try {
      result = (bool)((XmlEventReader const *)arg1)->needsEntityEscape();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_XmlEventReader_needsEntityEscape(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;

  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ii++) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlEventReader, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_XmlEventReader_needsEntityEscape__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XmlEventReader, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_XmlEventReader_needsEntityEscape__SWIG_0(nargs, args, self);
      }
    }
  }

fail:
  rb_raise(rb_eArgError, "No matching function for overloaded 'XmlEventReader_needsEntityEscape'");
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlEventReader_hasEmptyElementInfo(int argc, VALUE *argv, VALUE self) {
  XmlEventReader *arg1 = (XmlEventReader *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlEventReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hasEmptyElementInfo" "', argument " "1"" of type '" "XmlEventReader const *""'");
  }
  arg1 = reinterpret_cast< XmlEventReader * >(argp1);
  {
    try {
      result = (bool)((XmlEventReader const *)arg1)->hasEmptyElementInfo();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlEventReader_isEmptyElement(int argc, VALUE *argv, VALUE self) {
  XmlEventReader *arg1 = (XmlEventReader *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlEventReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "isEmptyElement" "', argument " "1"" of type '" "XmlEventReader const *""'");
  }
  arg1 = reinterpret_cast< XmlEventReader * >(argp1);
  {
    try {
      result = (bool)((XmlEventReader const *)arg1)->isEmptyElement();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlEventReader_isWhiteSpace(int argc, VALUE *argv, VALUE self) {
  XmlEventReader *arg1 = (XmlEventReader *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE vresult = Qnil;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlEventReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "isWhiteSpace" "', argument " "1"" of type '" "XmlEventReader const *""'");
  }
  arg1 = reinterpret_cast< XmlEventReader * >(argp1);
  {
    try {
      result = (bool)((XmlEventReader const *)arg1)->isWhiteSpace();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_XmlEventReader_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_XmlEventReader_allocate(int argc, VALUE *argv, VALUE self) {
#endif


    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_XmlEventReader);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }


SWIGINTERN VALUE
_wrap_new_XmlEventReader(int argc, VALUE *argv, VALUE self) {
  XmlEventReader *result = 0 ;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (XmlEventReader *)new XmlEventReader();DATA_PTR(self) = result;

    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return self;
fail:
  return Qnil;
}


swig_class cXmlEventWriter;

SWIGINTERN void
free_XmlEventWriter(XmlEventWriter *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_XmlEventWriter_close(int argc, VALUE *argv, VALUE self) {
  XmlEventWriter *arg1 = (XmlEventWriter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlEventWriter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "close" "', argument " "1"" of type '" "XmlEventWriter *""'");
  }
  arg1 = reinterpret_cast< XmlEventWriter * >(argp1);
  {
    try {
      (arg1)->close();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlEventWriter_writeAttribute(int argc, VALUE *argv, VALUE self) {
  XmlEventWriter *arg1 = (XmlEventWriter *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  unsigned char *arg3 = (unsigned char *) 0 ;
  unsigned char *arg4 = (unsigned char *) 0 ;
  unsigned char *arg5 = (unsigned char *) 0 ;
  bool arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;

  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlEventWriter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "writeAttribute" "', argument " "1"" of type '" "XmlEventWriter *""'");
  }
  arg1 = reinterpret_cast< XmlEventWriter * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "writeAttribute" "', argument " "2"" of type '" "unsigned char const *""'");
  }
  arg2 = reinterpret_cast< unsigned char * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "writeAttribute" "', argument " "3"" of type '" "unsigned char const *""'");
  }
  arg3 = reinterpret_cast< unsigned char * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "writeAttribute" "', argument " "4"" of type '" "unsigned char const *""'");
  }
  arg4 = reinterpret_cast< unsigned char * >(argp4);
  res5 = SWIG_ConvertPtr(argv[3], &argp5,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "writeAttribute" "', argument " "5"" of type '" "unsigned char const *""'");
  }
  arg5 = reinterpret_cast< unsigned char * >(argp5);
  ecode6 = SWIG_AsVal_bool(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "writeAttribute" "', argument " "6"" of type '" "bool""'");
  }
  arg6 = static_cast< bool >(val6);
  {
    try {
      (arg1)->writeAttribute((unsigned char const *)arg2,(unsigned char const *)arg3,(unsigned char const *)arg4,(unsigned char const *)arg5,arg6);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlEventWriter_writeText(int argc, VALUE *argv, VALUE self) {
  XmlEventWriter *arg1 = (XmlEventWriter *) 0 ;
  enum XmlEventReader::XmlEventType arg2 ;
  unsigned char *arg3 = (unsigned char *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;

  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlEventWriter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "writeText" "', argument " "1"" of type '" "XmlEventWriter *""'");
  }
  arg1 = reinterpret_cast< XmlEventWriter * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "writeText" "', argument " "2"" of type '" "enum XmlEventReader::XmlEventType""'");
  }
  arg2 = static_cast< enum XmlEventReader::XmlEventType >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "writeText" "', argument " "3"" of type '" "unsigned char const *""'");
  }
  arg3 = reinterpret_cast< unsigned char * >(argp3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "writeText" "', argument " "4"" of type '" "int""'");
  }
  arg4 = static_cast< int >(val4);
  {
    try {
      (arg1)->writeText(arg2,(unsigned char const *)arg3,arg4);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlEventWriter_writeProcessingInstruction(int argc, VALUE *argv, VALUE self) {
  XmlEventWriter *arg1 = (XmlEventWriter *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  unsigned char *arg3 = (unsigned char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;

  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlEventWriter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "writeProcessingInstruction" "', argument " "1"" of type '" "XmlEventWriter *""'");
  }
  arg1 = reinterpret_cast< XmlEventWriter * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "writeProcessingInstruction" "', argument " "2"" of type '" "unsigned char const *""'");
  }
  arg2 = reinterpret_cast< unsigned char * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "writeProcessingInstruction" "', argument " "3"" of type '" "unsigned char const *""'");
  }
  arg3 = reinterpret_cast< unsigned char * >(argp3);
  {
    try {
      (arg1)->writeProcessingInstruction((unsigned char const *)arg2,(unsigned char const *)arg3);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlEventWriter_writeStartElement(int argc, VALUE *argv, VALUE self) {
  XmlEventWriter *arg1 = (XmlEventWriter *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  unsigned char *arg3 = (unsigned char *) 0 ;
  unsigned char *arg4 = (unsigned char *) 0 ;
  int arg5 ;
  bool arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;

  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlEventWriter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "writeStartElement" "', argument " "1"" of type '" "XmlEventWriter *""'");
  }
  arg1 = reinterpret_cast< XmlEventWriter * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "writeStartElement" "', argument " "2"" of type '" "unsigned char const *""'");
  }
  arg2 = reinterpret_cast< unsigned char * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "writeStartElement" "', argument " "3"" of type '" "unsigned char const *""'");
  }
  arg3 = reinterpret_cast< unsigned char * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "writeStartElement" "', argument " "4"" of type '" "unsigned char const *""'");
  }
  arg4 = reinterpret_cast< unsigned char * >(argp4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "writeStartElement" "', argument " "5"" of type '" "int""'");
  }
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_bool(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "writeStartElement" "', argument " "6"" of type '" "bool""'");
  }
  arg6 = static_cast< bool >(val6);
  {
    try {
      (arg1)->writeStartElement((unsigned char const *)arg2,(unsigned char const *)arg3,(unsigned char const *)arg4,arg5,arg6);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlEventWriter_writeEndElement(int argc, VALUE *argv, VALUE self) {
  XmlEventWriter *arg1 = (XmlEventWriter *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  unsigned char *arg3 = (unsigned char *) 0 ;
  unsigned char *arg4 = (unsigned char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;

  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlEventWriter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "writeEndElement" "', argument " "1"" of type '" "XmlEventWriter *""'");
  }
  arg1 = reinterpret_cast< XmlEventWriter * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "writeEndElement" "', argument " "2"" of type '" "unsigned char const *""'");
  }
  arg2 = reinterpret_cast< unsigned char * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "writeEndElement" "', argument " "3"" of type '" "unsigned char const *""'");
  }
  arg3 = reinterpret_cast< unsigned char * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "writeEndElement" "', argument " "4"" of type '" "unsigned char const *""'");
  }
  arg4 = reinterpret_cast< unsigned char * >(argp4);
  {
    try {
      (arg1)->writeEndElement((unsigned char const *)arg2,(unsigned char const *)arg3,(unsigned char const *)arg4);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlEventWriter_writeDTD(int argc, VALUE *argv, VALUE self) {
  XmlEventWriter *arg1 = (XmlEventWriter *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;

  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlEventWriter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "writeDTD" "', argument " "1"" of type '" "XmlEventWriter *""'");
  }
  arg1 = reinterpret_cast< XmlEventWriter * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "writeDTD" "', argument " "2"" of type '" "unsigned char const *""'");
  }
  arg2 = reinterpret_cast< unsigned char * >(argp2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "writeDTD" "', argument " "3"" of type '" "int""'");
  }
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->writeDTD((unsigned char const *)arg2,arg3);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlEventWriter_writeStartDocument(int argc, VALUE *argv, VALUE self) {
  XmlEventWriter *arg1 = (XmlEventWriter *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  unsigned char *arg3 = (unsigned char *) 0 ;
  unsigned char *arg4 = (unsigned char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;

  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlEventWriter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "writeStartDocument" "', argument " "1"" of type '" "XmlEventWriter *""'");
  }
  arg1 = reinterpret_cast< XmlEventWriter * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "writeStartDocument" "', argument " "2"" of type '" "unsigned char const *""'");
  }
  arg2 = reinterpret_cast< unsigned char * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "writeStartDocument" "', argument " "3"" of type '" "unsigned char const *""'");
  }
  arg3 = reinterpret_cast< unsigned char * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "writeStartDocument" "', argument " "4"" of type '" "unsigned char const *""'");
  }
  arg4 = reinterpret_cast< unsigned char * >(argp4);
  {
    try {
      (arg1)->writeStartDocument((unsigned char const *)arg2,(unsigned char const *)arg3,(unsigned char const *)arg4);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlEventWriter_writeEndDocument(int argc, VALUE *argv, VALUE self) {
  XmlEventWriter *arg1 = (XmlEventWriter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlEventWriter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "writeEndDocument" "', argument " "1"" of type '" "XmlEventWriter *""'");
  }
  arg1 = reinterpret_cast< XmlEventWriter * >(argp1);
  {
    try {
      (arg1)->writeEndDocument();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlEventWriter_writeStartEntity(int argc, VALUE *argv, VALUE self) {
  XmlEventWriter *arg1 = (XmlEventWriter *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;

  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlEventWriter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "writeStartEntity" "', argument " "1"" of type '" "XmlEventWriter *""'");
  }
  arg1 = reinterpret_cast< XmlEventWriter * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "writeStartEntity" "', argument " "2"" of type '" "unsigned char const *""'");
  }
  arg2 = reinterpret_cast< unsigned char * >(argp2);
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "writeStartEntity" "', argument " "3"" of type '" "bool""'");
  }
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->writeStartEntity((unsigned char const *)arg2,arg3);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XmlEventWriter_writeEndEntity(int argc, VALUE *argv, VALUE self) {
  XmlEventWriter *arg1 = (XmlEventWriter *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;

  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlEventWriter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "writeEndEntity" "', argument " "1"" of type '" "XmlEventWriter *""'");
  }
  arg1 = reinterpret_cast< XmlEventWriter * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "writeEndEntity" "', argument " "2"" of type '" "unsigned char const *""'");
  }
  arg2 = reinterpret_cast< unsigned char * >(argp2);
  {
    try {
      (arg1)->writeEndEntity((unsigned char const *)arg2);
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return Qnil;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_XmlEventWriter_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_XmlEventWriter_allocate(int argc, VALUE *argv, VALUE self) {
#endif


    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_XmlEventWriter);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }


SWIGINTERN VALUE
_wrap_new_XmlEventWriter(int argc, VALUE *argv, VALUE self) {
  XmlEventWriter *result = 0 ;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  {
    try {
      result = (XmlEventWriter *)new XmlEventWriter();DATA_PTR(self) = result;

    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return self;
fail:
  return Qnil;
}


swig_class cXmlEventReaderToWriter;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_XmlEventReaderToWriter_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_XmlEventReaderToWriter_allocate(int argc, VALUE *argv, VALUE self) {
#endif


    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_XmlEventReaderToWriter);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }


SWIGINTERN VALUE
_wrap_new_XmlEventReaderToWriter(int argc, VALUE *argv, VALUE self) {
  XmlEventReader *arg1 = 0 ;
  XmlEventWriter *arg2 = 0 ;
  bool arg3 ;
  XmlEventReaderToWriter *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;

  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_XmlEventReader,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XmlEventReaderToWriter" "', argument " "1"" of type '" "XmlEventReader &""'");
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XmlEventReaderToWriter" "', argument " "1"" of type '" "XmlEventReader &""'");
  }
  arg1 = reinterpret_cast< XmlEventReader * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_XmlEventWriter,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XmlEventReaderToWriter" "', argument " "2"" of type '" "XmlEventWriter &""'");
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XmlEventReaderToWriter" "', argument " "2"" of type '" "XmlEventWriter &""'");
  }
  arg2 = reinterpret_cast< XmlEventWriter * >(argp2);
  ecode3 = SWIG_AsVal_bool(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "XmlEventReaderToWriter" "', argument " "3"" of type '" "bool""'");
  }
  arg3 = static_cast< bool >(val3);
  {
    try {
      result = (XmlEventReaderToWriter *)new XmlEventReaderToWriter(*arg1,*arg2,arg3);DATA_PTR(self) = result;

    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_XmlEventReaderToWriter(XmlEventReaderToWriter *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_XmlEventReaderToWriter_start(int argc, VALUE *argv, VALUE self) {
  XmlEventReaderToWriter *arg1 = (XmlEventReaderToWriter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;

  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_XmlEventReaderToWriter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "start" "', argument " "1"" of type '" "XmlEventReaderToWriter *""'");
  }
  arg1 = reinterpret_cast< XmlEventReaderToWriter * >(argp1);
  {
    try {
      (arg1)->start();
    } catch ( DbException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_DbException, SWIG_NewPointerObj(new DbException(ex), SWIGTYPE_p_DbException, SWIG_POINTER_OWN))); SWIG_fail;
    } catch ( XmlException &ex ) {
      rb_exc_raise(SWIG_Ruby_ExceptionType(SWIGTYPE_p_XmlException, SWIG_NewPointerObj(new XmlException(ex), SWIGTYPE_p_XmlException, SWIG_POINTER_OWN))); SWIG_fail;
    }
  }
  return Qnil;
fail:
  return Qnil;
}



/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_XmlExceptionTo_p_std__exception(void *x) {
    return (void *)((std::exception *)  ((XmlException *) x));
}
static swig_type_info _swigt__p_DbEnv = {"_p_DbEnv", "DbEnv *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DbException = {"_p_DbException", "DbException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DbTxn = {"_p_DbTxn", "DbTxn *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XmlContainer = {"_p_XmlContainer", "XmlContainer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XmlData = {"_p_XmlData", "XmlData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XmlDocument = {"_p_XmlDocument", "XmlDocument *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XmlEventReader = {"_p_XmlEventReader", "XmlEventReader *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XmlEventReaderToWriter = {"_p_XmlEventReaderToWriter", "XmlEventReaderToWriter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XmlEventWriter = {"_p_XmlEventWriter", "XmlEventWriter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XmlException = {"_p_XmlException", "XmlException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XmlIndexDeclaration = {"_p_XmlIndexDeclaration", "XmlIndexDeclaration *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XmlIndexLookup = {"_p_XmlIndexLookup", "XmlIndexLookup *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XmlIndexSpecification = {"_p_XmlIndexSpecification", "XmlIndexSpecification *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XmlInputStream = {"_p_XmlInputStream", "XmlInputStream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XmlManager = {"_p_XmlManager", "XmlManager *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XmlMetaData = {"_p_XmlMetaData", "XmlMetaData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XmlMetaDataIterator = {"_p_XmlMetaDataIterator", "XmlMetaDataIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XmlModify = {"_p_XmlModify", "XmlModify *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XmlQueryContext = {"_p_XmlQueryContext", "XmlQueryContext *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XmlQueryExpression = {"_p_XmlQueryExpression", "XmlQueryExpression *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XmlResults = {"_p_XmlResults", "XmlResults *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XmlStatistics = {"_p_XmlStatistics", "XmlStatistics *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XmlTransaction = {"_p_XmlTransaction", "XmlTransaction *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XmlUpdateContext = {"_p_XmlUpdateContext", "XmlUpdateContext *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XmlValue = {"_p_XmlValue", "XmlValue *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *|int32_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__exception = {"_p_std__exception", "std::exception *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_DbEnv,
  &_swigt__p_DbException,
  &_swigt__p_DbTxn,
  &_swigt__p_XmlContainer,
  &_swigt__p_XmlData,
  &_swigt__p_XmlDocument,
  &_swigt__p_XmlEventReader,
  &_swigt__p_XmlEventReaderToWriter,
  &_swigt__p_XmlEventWriter,
  &_swigt__p_XmlException,
  &_swigt__p_XmlIndexDeclaration,
  &_swigt__p_XmlIndexLookup,
  &_swigt__p_XmlIndexSpecification,
  &_swigt__p_XmlInputStream,
  &_swigt__p_XmlManager,
  &_swigt__p_XmlMetaData,
  &_swigt__p_XmlMetaDataIterator,
  &_swigt__p_XmlModify,
  &_swigt__p_XmlQueryContext,
  &_swigt__p_XmlQueryExpression,
  &_swigt__p_XmlResults,
  &_swigt__p_XmlStatistics,
  &_swigt__p_XmlTransaction,
  &_swigt__p_XmlUpdateContext,
  &_swigt__p_XmlValue,
  &_swigt__p_char,
  &_swigt__p_int,
  &_swigt__p_std__exception,
  &_swigt__p_unsigned_char,
};

static swig_cast_info _swigc__p_DbEnv[] = {  {&_swigt__p_DbEnv, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DbException[] = {  {&_swigt__p_DbException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DbTxn[] = {  {&_swigt__p_DbTxn, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XmlContainer[] = {  {&_swigt__p_XmlContainer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XmlData[] = {  {&_swigt__p_XmlData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XmlDocument[] = {  {&_swigt__p_XmlDocument, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XmlEventReader[] = {  {&_swigt__p_XmlEventReader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XmlEventReaderToWriter[] = {  {&_swigt__p_XmlEventReaderToWriter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XmlEventWriter[] = {  {&_swigt__p_XmlEventWriter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XmlException[] = {  {&_swigt__p_XmlException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XmlIndexDeclaration[] = {  {&_swigt__p_XmlIndexDeclaration, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XmlIndexLookup[] = {  {&_swigt__p_XmlIndexLookup, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XmlIndexSpecification[] = {  {&_swigt__p_XmlIndexSpecification, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XmlInputStream[] = {  {&_swigt__p_XmlInputStream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XmlManager[] = {  {&_swigt__p_XmlManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XmlMetaData[] = {  {&_swigt__p_XmlMetaData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XmlMetaDataIterator[] = {  {&_swigt__p_XmlMetaDataIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XmlModify[] = {  {&_swigt__p_XmlModify, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XmlQueryContext[] = {  {&_swigt__p_XmlQueryContext, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XmlQueryExpression[] = {  {&_swigt__p_XmlQueryExpression, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XmlResults[] = {  {&_swigt__p_XmlResults, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XmlStatistics[] = {  {&_swigt__p_XmlStatistics, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XmlTransaction[] = {  {&_swigt__p_XmlTransaction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XmlUpdateContext[] = {  {&_swigt__p_XmlUpdateContext, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XmlValue[] = {  {&_swigt__p_XmlValue, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__exception[] = {  {&_swigt__p_std__exception, 0, 0, 0},  {&_swigt__p_XmlException, _p_XmlExceptionTo_p_std__exception, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_DbEnv,
  _swigc__p_DbException,
  _swigc__p_DbTxn,
  _swigc__p_XmlContainer,
  _swigc__p_XmlData,
  _swigc__p_XmlDocument,
  _swigc__p_XmlEventReader,
  _swigc__p_XmlEventReaderToWriter,
  _swigc__p_XmlEventWriter,
  _swigc__p_XmlException,
  _swigc__p_XmlIndexDeclaration,
  _swigc__p_XmlIndexLookup,
  _swigc__p_XmlIndexSpecification,
  _swigc__p_XmlInputStream,
  _swigc__p_XmlManager,
  _swigc__p_XmlMetaData,
  _swigc__p_XmlMetaDataIterator,
  _swigc__p_XmlModify,
  _swigc__p_XmlQueryContext,
  _swigc__p_XmlQueryExpression,
  _swigc__p_XmlResults,
  _swigc__p_XmlStatistics,
  _swigc__p_XmlTransaction,
  _swigc__p_XmlUpdateContext,
  _swigc__p_XmlValue,
  _swigc__p_char,
  _swigc__p_int,
  _swigc__p_std__exception,
  _swigc__p_unsigned_char,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found;

  clientdata = clientdata;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif


#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void Init_dbxml(void) {
  size_t i;

  SWIG_InitRuntime();
  mDbxml = rb_define_module("Dbxml");

  SWIG_InitializeModule(0);
  for (i = 0; i < swig_module.size; i++) {
    SWIG_define_class(swig_module.types[i]);
  }

  SWIG_RubyInitializeTrackings();

  cXmlException.klass = rb_define_class_under(mDbxml, "XmlException", rb_eRuntimeError);
  SWIG_TypeClientData(SWIGTYPE_p_XmlException, (void *) &cXmlException);
  rb_define_alloc_func(cXmlException.klass, _wrap_XmlException_allocate);
  rb_define_method(cXmlException.klass, "initialize", VALUEFUNC(_wrap_new_XmlException), -1);
  rb_define_const(cXmlException.klass, "INTERNAL_ERROR", SWIG_From_int(static_cast< int >(XmlException::INTERNAL_ERROR)));
  rb_define_const(cXmlException.klass, "CONTAINER_OPEN", SWIG_From_int(static_cast< int >(XmlException::CONTAINER_OPEN)));
  rb_define_const(cXmlException.klass, "CONTAINER_CLOSED", SWIG_From_int(static_cast< int >(XmlException::CONTAINER_CLOSED)));
  rb_define_const(cXmlException.klass, "NULL_POINTER", SWIG_From_int(static_cast< int >(XmlException::NULL_POINTER)));
  rb_define_const(cXmlException.klass, "INDEXER_PARSER_ERROR", SWIG_From_int(static_cast< int >(XmlException::INDEXER_PARSER_ERROR)));
  rb_define_const(cXmlException.klass, "DATABASE_ERROR", SWIG_From_int(static_cast< int >(XmlException::DATABASE_ERROR)));
  rb_define_const(cXmlException.klass, "XPATH_PARSER_ERROR", SWIG_From_int(static_cast< int >(XmlException::XPATH_PARSER_ERROR)));
  rb_define_const(cXmlException.klass, "DOM_PARSER_ERROR", SWIG_From_int(static_cast< int >(XmlException::DOM_PARSER_ERROR)));
  rb_define_const(cXmlException.klass, "XPATH_EVALUATION_ERROR", SWIG_From_int(static_cast< int >(XmlException::XPATH_EVALUATION_ERROR)));
  rb_define_const(cXmlException.klass, "NO_VARIABLE_BINDING", SWIG_From_int(static_cast< int >(XmlException::NO_VARIABLE_BINDING)));
  rb_define_const(cXmlException.klass, "LAZY_EVALUATION", SWIG_From_int(static_cast< int >(XmlException::LAZY_EVALUATION)));
  rb_define_const(cXmlException.klass, "DOCUMENT_NOT_FOUND", SWIG_From_int(static_cast< int >(XmlException::DOCUMENT_NOT_FOUND)));
  rb_define_const(cXmlException.klass, "CONTAINER_EXISTS", SWIG_From_int(static_cast< int >(XmlException::CONTAINER_EXISTS)));
  rb_define_const(cXmlException.klass, "UNKNOWN_INDEX", SWIG_From_int(static_cast< int >(XmlException::UNKNOWN_INDEX)));
  rb_define_const(cXmlException.klass, "INVALID_VALUE", SWIG_From_int(static_cast< int >(XmlException::INVALID_VALUE)));
  rb_define_const(cXmlException.klass, "VERSION_MISMATCH", SWIG_From_int(static_cast< int >(XmlException::VERSION_MISMATCH)));
  rb_define_const(cXmlException.klass, "EVENT_ERROR", SWIG_From_int(static_cast< int >(XmlException::EVENT_ERROR)));
  rb_define_const(cXmlException.klass, "CONTAINER_NOT_FOUND", SWIG_From_int(static_cast< int >(XmlException::CONTAINER_NOT_FOUND)));
  rb_define_const(cXmlException.klass, "TRANSACTION_ERROR", SWIG_From_int(static_cast< int >(XmlException::TRANSACTION_ERROR)));
  rb_define_const(cXmlException.klass, "UNIQUE_ERROR", SWIG_From_int(static_cast< int >(XmlException::UNIQUE_ERROR)));
  rb_define_const(cXmlException.klass, "NO_MEMORY_ERROR", SWIG_From_int(static_cast< int >(XmlException::NO_MEMORY_ERROR)));
  rb_define_const(cXmlException.klass, "OPERATION_TIMEOUT", SWIG_From_int(static_cast< int >(XmlException::OPERATION_TIMEOUT)));
  rb_define_const(cXmlException.klass, "OPERATION_INTERRUPTED", SWIG_From_int(static_cast< int >(XmlException::OPERATION_INTERRUPTED)));
  rb_define_method(cXmlException.klass, "what", VALUEFUNC(_wrap_XmlException_what), -1);
  rb_define_alias(cXmlException.klass, "to_s", "what");
  rb_define_method(cXmlException.klass, "getExceptionCode", VALUEFUNC(_wrap_XmlException_getExceptionCode), -1);
  rb_define_alias(cXmlException.klass, "err", "getExceptionCode");
  rb_define_method(cXmlException.klass, "getDbErrno", VALUEFUNC(_wrap_XmlException_getDbErrno), -1);
  cXmlException.mark = 0;
  cXmlException.destroy = (void (*)(void *)) free_XmlException;
  cXmlException.trackObjects = 0;
  rb_define_const(mDbxml, "DB_CREATE", SWIG_From_int(static_cast< int >(DB_CREATE)));
  rb_define_const(mDbxml, "DB_READ_UNCOMMITTED", SWIG_From_int(static_cast< int >(DB_READ_UNCOMMITTED)));
  rb_define_const(mDbxml, "DB_DIRTY_READ", SWIG_From_int(static_cast< int >(DB_DIRTY_READ)));
  rb_define_const(mDbxml, "DB_EXCL", SWIG_From_int(static_cast< int >(DB_EXCL)));
  rb_define_const(mDbxml, "DB_NOMMAP", SWIG_From_int(static_cast< int >(DB_NOMMAP)));
  rb_define_const(mDbxml, "DB_RDONLY", SWIG_From_int(static_cast< int >(DB_RDONLY)));
  rb_define_const(mDbxml, "DB_THREAD", SWIG_From_int(static_cast< int >(DB_THREAD)));
  rb_define_const(mDbxml, "DB_READ_COMMITTED", SWIG_From_int(static_cast< int >(DB_READ_COMMITTED)));
  rb_define_const(mDbxml, "DB_DEGREE_2", SWIG_From_int(static_cast< int >(DB_DEGREE_2)));
  rb_define_const(mDbxml, "DB_INIT_LOCK", SWIG_From_int(static_cast< int >(DB_INIT_LOCK)));
  rb_define_const(mDbxml, "DB_INIT_LOG", SWIG_From_int(static_cast< int >(DB_INIT_LOG)));
  rb_define_const(mDbxml, "DB_INIT_MPOOL", SWIG_From_int(static_cast< int >(DB_INIT_MPOOL)));
  rb_define_const(mDbxml, "DB_INIT_TXN", SWIG_From_int(static_cast< int >(DB_INIT_TXN)));
  rb_define_const(mDbxml, "DB_SALVAGE", SWIG_From_int(static_cast< int >(DB_SALVAGE)));
  rb_define_const(mDbxml, "DB_AGGRESSIVE", SWIG_From_int(static_cast< int >(DB_AGGRESSIVE)));
  rb_define_const(mDbxml, "DBXML_ADOPT_DBENV", SWIG_From_int(static_cast< int >(DBXML_ADOPT_DBENV)));
  rb_define_const(mDbxml, "DBXML_ALLOW_EXTERNAL_ACCESS", SWIG_From_int(static_cast< int >(DBXML_ALLOW_EXTERNAL_ACCESS)));
  rb_define_const(mDbxml, "DBXML_ALLOW_AUTO_OPEN", SWIG_From_int(static_cast< int >(DBXML_ALLOW_AUTO_OPEN)));
  rb_define_const(mDbxml, "DBXML_ALLOW_VALIDATION", SWIG_From_int(static_cast< int >(DBXML_ALLOW_VALIDATION)));
  rb_define_const(mDbxml, "DBXML_TRANSACTIONAL", SWIG_From_int(static_cast< int >(DBXML_TRANSACTIONAL)));
  rb_define_const(mDbxml, "DBXML_CHKSUM", SWIG_From_int(static_cast< int >(DBXML_CHKSUM)));
  rb_define_const(mDbxml, "DBXML_ENCRYPT", SWIG_From_int(static_cast< int >(DBXML_ENCRYPT)));
  rb_define_const(mDbxml, "DBXML_INDEX_NODES", SWIG_From_int(static_cast< int >(DBXML_INDEX_NODES)));
  rb_define_const(mDbxml, "DBXML_NO_INDEX_NODES", SWIG_From_int(static_cast< int >(DBXML_NO_INDEX_NODES)));
  rb_define_const(mDbxml, "DBXML_REVERSE_ORDER", SWIG_From_int(static_cast< int >(DBXML_REVERSE_ORDER)));
  rb_define_const(mDbxml, "DBXML_INDEX_VALUES", SWIG_From_int(static_cast< int >(DBXML_INDEX_VALUES)));
  rb_define_const(mDbxml, "DBXML_CACHE_DOCUMENTS", SWIG_From_int(static_cast< int >(DBXML_CACHE_DOCUMENTS)));
  rb_define_const(mDbxml, "DBXML_LAZY_DOCS", SWIG_From_int(static_cast< int >(DBXML_LAZY_DOCS)));
  rb_define_const(mDbxml, "DBXML_WELL_FORMED_ONLY", SWIG_From_int(static_cast< int >(DBXML_WELL_FORMED_ONLY)));
  rb_define_const(mDbxml, "DBXML_GEN_NAME", SWIG_From_int(static_cast< int >(DBXML_GEN_NAME)));
  rb_define_const(mDbxml, "LEVEL_NONE", SWIG_From_int(static_cast< int >(LEVEL_NONE)));
  rb_define_const(mDbxml, "LEVEL_DEBUG", SWIG_From_int(static_cast< int >(LEVEL_DEBUG)));
  rb_define_const(mDbxml, "LEVEL_INFO", SWIG_From_int(static_cast< int >(LEVEL_INFO)));
  rb_define_const(mDbxml, "LEVEL_WARNING", SWIG_From_int(static_cast< int >(LEVEL_WARNING)));
  rb_define_const(mDbxml, "LEVEL_ERROR", SWIG_From_int(static_cast< int >(LEVEL_ERROR)));
  rb_define_const(mDbxml, "LEVEL_ALL", SWIG_From_int(static_cast< int >(LEVEL_ALL)));
  rb_define_const(mDbxml, "CATEGORY_NONE", SWIG_From_int(static_cast< int >(CATEGORY_NONE)));
  rb_define_const(mDbxml, "CATEGORY_INDEXER", SWIG_From_int(static_cast< int >(CATEGORY_INDEXER)));
  rb_define_const(mDbxml, "CATEGORY_QUERY", SWIG_From_int(static_cast< int >(CATEGORY_QUERY)));
  rb_define_const(mDbxml, "CATEGORY_OPTIMIZER", SWIG_From_int(static_cast< int >(CATEGORY_OPTIMIZER)));
  rb_define_const(mDbxml, "CATEGORY_DICTIONARY", SWIG_From_int(static_cast< int >(CATEGORY_DICTIONARY)));
  rb_define_const(mDbxml, "CATEGORY_CONTAINER", SWIG_From_int(static_cast< int >(CATEGORY_CONTAINER)));
  rb_define_const(mDbxml, "CATEGORY_NODESTORE", SWIG_From_int(static_cast< int >(CATEGORY_NODESTORE)));
  rb_define_const(mDbxml, "CATEGORY_MANAGER", SWIG_From_int(static_cast< int >(CATEGORY_MANAGER)));
  rb_define_const(mDbxml, "CATEGORY_ALL", SWIG_From_int(static_cast< int >(CATEGORY_ALL)));
  rb_define_const(mDbxml, "MetaDataNamespace_uri", SWIG_FromCharPtr("http://www.sleepycat.com/2002/dbxml"));
  rb_define_const(mDbxml, "MetaDataNamespace_prefix", SWIG_FromCharPtr("dbxml"));
  rb_define_const(mDbxml, "MetaDataName_name", SWIG_FromCharPtr("name"));
  rb_define_const(mDbxml, "MetaDataName_root", SWIG_FromCharPtr("root"));

  cXmlManager.klass = rb_define_class_under(mDbxml, "XmlManager", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_XmlManager, (void *) &cXmlManager);
  rb_define_alloc_func(cXmlManager.klass, _wrap_XmlManager_allocate);
  rb_define_method(cXmlManager.klass, "initialize", VALUEFUNC(_wrap_new_XmlManager), -1);
  rb_define_method(cXmlManager.klass, "setDefaultContainerFlags", VALUEFUNC(_wrap_XmlManager_setDefaultContainerFlags), -1);
  rb_define_method(cXmlManager.klass, "getDefaultContainerFlags", VALUEFUNC(_wrap_XmlManager_getDefaultContainerFlags), -1);
  rb_define_method(cXmlManager.klass, "getFlags", VALUEFUNC(_wrap_XmlManager_getFlags), -1);
  rb_define_method(cXmlManager.klass, "setDefaultPageSize", VALUEFUNC(_wrap_XmlManager_setDefaultPageSize), -1);
  rb_define_method(cXmlManager.klass, "getDefaultPageSize", VALUEFUNC(_wrap_XmlManager_getDefaultPageSize), -1);
  rb_define_method(cXmlManager.klass, "setDefaultSequenceIncrement", VALUEFUNC(_wrap_XmlManager_setDefaultSequenceIncrement), -1);
  rb_define_method(cXmlManager.klass, "getDefaultSequenceIncrement", VALUEFUNC(_wrap_XmlManager_getDefaultSequenceIncrement), -1);
  rb_define_method(cXmlManager.klass, "setDefaultContainerType", VALUEFUNC(_wrap_XmlManager_setDefaultContainerType), -1);
  rb_define_method(cXmlManager.klass, "getDefaultContainerType", VALUEFUNC(_wrap_XmlManager_getDefaultContainerType), -1);
  rb_define_method(cXmlManager.klass, "getDbEnv", VALUEFUNC(_wrap_XmlManager_getDbEnv), -1);
  rb_define_method(cXmlManager.klass, "getHome", VALUEFUNC(_wrap_XmlManager_getHome), -1);
  rb_define_method(cXmlManager.klass, "getImplicitTimezone", VALUEFUNC(_wrap_XmlManager_getImplicitTimezone), -1);
  rb_define_method(cXmlManager.klass, "setImplicitTimezone", VALUEFUNC(_wrap_XmlManager_setImplicitTimezone), -1);
  rb_define_method(cXmlManager.klass, "existsContainer", VALUEFUNC(_wrap_XmlManager_existsContainer), -1);
  rb_define_method(cXmlManager.klass, "removeContainer", VALUEFUNC(_wrap_XmlManager_removeContainer), -1);
  rb_define_method(cXmlManager.klass, "renameContainer", VALUEFUNC(_wrap_XmlManager_renameContainer), -1);
  rb_define_method(cXmlManager.klass, "upgradeContainer", VALUEFUNC(_wrap_XmlManager_upgradeContainer), -1);
  rb_define_method(cXmlManager.klass, "compactContainer", VALUEFUNC(_wrap_XmlManager_compactContainer), -1);
  rb_define_method(cXmlManager.klass, "truncateContainer", VALUEFUNC(_wrap_XmlManager_truncateContainer), -1);
  rb_define_method(cXmlManager.klass, "reindexContainer", VALUEFUNC(_wrap_XmlManager_reindexContainer), -1);
  rb_define_method(cXmlManager.klass, "createStdInInputStream", VALUEFUNC(_wrap_XmlManager_createStdInInputStream), -1);
  rb_define_method(cXmlManager.klass, "createLocalFileInputStream", VALUEFUNC(_wrap_XmlManager_createLocalFileInputStream), -1);
  rb_define_method(cXmlManager.klass, "createMemBufInputStream", VALUEFUNC(_wrap_XmlManager_createMemBufInputStream), -1);
  rb_define_method(cXmlManager.klass, "createURLInputStream", VALUEFUNC(_wrap_XmlManager_createURLInputStream), -1);
  rb_define_method(cXmlManager.klass, "createContainer", VALUEFUNC(_wrap_XmlManager_createContainer), -1);
  rb_define_method(cXmlManager.klass, "openContainer", VALUEFUNC(_wrap_XmlManager_openContainer), -1);
  rb_define_method(cXmlManager.klass, "dumpContainer", VALUEFUNC(_wrap_XmlManager_dumpContainer), -1);
  rb_define_method(cXmlManager.klass, "loadContainer", VALUEFUNC(_wrap_XmlManager_loadContainer), -1);
  rb_define_method(cXmlManager.klass, "verifyContainer", VALUEFUNC(_wrap_XmlManager_verifyContainer), -1);
  rb_define_method(cXmlManager.klass, "createDocument", VALUEFUNC(_wrap_XmlManager_createDocument), -1);
  rb_define_method(cXmlManager.klass, "createQueryContext", VALUEFUNC(_wrap_XmlManager_createQueryContext), -1);
  rb_define_alias(cXmlManager.klass, "create_query_context", "createQueryContext");
  rb_define_method(cXmlManager.klass, "createUpdateContext", VALUEFUNC(_wrap_XmlManager_createUpdateContext), -1);
  rb_define_method(cXmlManager.klass, "prepare", VALUEFUNC(_wrap_XmlManager_prepare), -1);
  rb_define_method(cXmlManager.klass, "query", VALUEFUNC(_wrap_XmlManager_query), -1);
  rb_define_method(cXmlManager.klass, "createResults", VALUEFUNC(_wrap_XmlManager_createResults), -1);
  rb_define_method(cXmlManager.klass, "createModify", VALUEFUNC(_wrap_XmlManager_createModify), -1);
  rb_define_method(cXmlManager.klass, "createTransaction", VALUEFUNC(_wrap_XmlManager_createTransaction), -1);
  rb_define_method(cXmlManager.klass, "createIndexLookup", VALUEFUNC(_wrap_XmlManager_createIndexLookup), -1);
  rb_define_singleton_method(cXmlManager.klass, "setLogLevel", VALUEFUNC(_wrap_XmlManager_setLogLevel), -1);
  rb_define_singleton_method(cXmlManager.klass, "setLogCategory", VALUEFUNC(_wrap_XmlManager_setLogCategory), -1);
  rb_define_singleton_method(cXmlManager.klass, "get_version_major", VALUEFUNC(_wrap_XmlManager_get_version_major), -1);
  rb_define_singleton_method(cXmlManager.klass, "get_version_minor", VALUEFUNC(_wrap_XmlManager_get_version_minor), -1);
  rb_define_singleton_method(cXmlManager.klass, "get_version_patch", VALUEFUNC(_wrap_XmlManager_get_version_patch), -1);
  rb_define_singleton_method(cXmlManager.klass, "get_version_string", VALUEFUNC(_wrap_XmlManager_get_version_string), -1);
  cXmlManager.mark = 0;
  cXmlManager.destroy = (void (*)(void *)) free_XmlManager;
  cXmlManager.trackObjects = 0;

  cXmlIndexLookup.klass = rb_define_class_under(mDbxml, "XmlIndexLookup", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_XmlIndexLookup, (void *) &cXmlIndexLookup);
  rb_define_alloc_func(cXmlIndexLookup.klass, _wrap_XmlIndexLookup_allocate);
  rb_define_method(cXmlIndexLookup.klass, "initialize", VALUEFUNC(_wrap_new_XmlIndexLookup), -1);
  rb_define_const(cXmlIndexLookup.klass, "NONE", SWIG_From_int(static_cast< int >(XmlIndexLookup::NONE)));
  rb_define_const(cXmlIndexLookup.klass, "EQ", SWIG_From_int(static_cast< int >(XmlIndexLookup::EQ)));
  rb_define_const(cXmlIndexLookup.klass, "GT", SWIG_From_int(static_cast< int >(XmlIndexLookup::GT)));
  rb_define_const(cXmlIndexLookup.klass, "GTE", SWIG_From_int(static_cast< int >(XmlIndexLookup::GTE)));
  rb_define_const(cXmlIndexLookup.klass, "LT", SWIG_From_int(static_cast< int >(XmlIndexLookup::LT)));
  rb_define_const(cXmlIndexLookup.klass, "LTE", SWIG_From_int(static_cast< int >(XmlIndexLookup::LTE)));
  rb_define_method(cXmlIndexLookup.klass, "isNull", VALUEFUNC(_wrap_XmlIndexLookup_isNull), -1);
  rb_define_method(cXmlIndexLookup.klass, "getIndex", VALUEFUNC(_wrap_XmlIndexLookup_getIndex), -1);
  rb_define_method(cXmlIndexLookup.klass, "setIndex", VALUEFUNC(_wrap_XmlIndexLookup_setIndex), -1);
  rb_define_method(cXmlIndexLookup.klass, "getNodeURI", VALUEFUNC(_wrap_XmlIndexLookup_getNodeURI), -1);
  rb_define_method(cXmlIndexLookup.klass, "getNodeName", VALUEFUNC(_wrap_XmlIndexLookup_getNodeName), -1);
  rb_define_method(cXmlIndexLookup.klass, "setNode", VALUEFUNC(_wrap_XmlIndexLookup_setNode), -1);
  rb_define_method(cXmlIndexLookup.klass, "getParentURI", VALUEFUNC(_wrap_XmlIndexLookup_getParentURI), -1);
  rb_define_method(cXmlIndexLookup.klass, "getParentName", VALUEFUNC(_wrap_XmlIndexLookup_getParentName), -1);
  rb_define_method(cXmlIndexLookup.klass, "setParent", VALUEFUNC(_wrap_XmlIndexLookup_setParent), -1);
  rb_define_method(cXmlIndexLookup.klass, "getLowBoundValue", VALUEFUNC(_wrap_XmlIndexLookup_getLowBoundValue), -1);
  rb_define_method(cXmlIndexLookup.klass, "getLowBoundOperation", VALUEFUNC(_wrap_XmlIndexLookup_getLowBoundOperation), -1);
  rb_define_method(cXmlIndexLookup.klass, "setLowBound", VALUEFUNC(_wrap_XmlIndexLookup_setLowBound), -1);
  rb_define_method(cXmlIndexLookup.klass, "getHighBoundValue", VALUEFUNC(_wrap_XmlIndexLookup_getHighBoundValue), -1);
  rb_define_method(cXmlIndexLookup.klass, "getHighBoundOperation", VALUEFUNC(_wrap_XmlIndexLookup_getHighBoundOperation), -1);
  rb_define_method(cXmlIndexLookup.klass, "setHighBound", VALUEFUNC(_wrap_XmlIndexLookup_setHighBound), -1);
  rb_define_method(cXmlIndexLookup.klass, "getContainer", VALUEFUNC(_wrap_XmlIndexLookup_getContainer), -1);
  rb_define_method(cXmlIndexLookup.klass, "setContainer", VALUEFUNC(_wrap_XmlIndexLookup_setContainer), -1);
  rb_define_method(cXmlIndexLookup.klass, "execute", VALUEFUNC(_wrap_XmlIndexLookup_execute), -1);
  cXmlIndexLookup.mark = 0;
  cXmlIndexLookup.destroy = (void (*)(void *)) free_XmlIndexLookup;
  cXmlIndexLookup.trackObjects = 0;

  cXmlContainer.klass = rb_define_class_under(mDbxml, "XmlContainer", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_XmlContainer, (void *) &cXmlContainer);
  rb_define_alloc_func(cXmlContainer.klass, _wrap_XmlContainer_allocate);
  rb_define_method(cXmlContainer.klass, "initialize", VALUEFUNC(_wrap_new_XmlContainer), -1);
  rb_define_const(cXmlContainer.klass, "WholedocContainer", SWIG_From_int(static_cast< int >(XmlContainer::WholedocContainer)));
  rb_define_const(cXmlContainer.klass, "NodeContainer", SWIG_From_int(static_cast< int >(XmlContainer::NodeContainer)));
  rb_define_method(cXmlContainer.klass, "sync", VALUEFUNC(_wrap_XmlContainer_sync), -1);
  rb_define_method(cXmlContainer.klass, "close", VALUEFUNC(_wrap_XmlContainer_close), -1);
  rb_define_method(cXmlContainer.klass, "getFlags", VALUEFUNC(_wrap_XmlContainer_getFlags), -1);
  rb_define_method(cXmlContainer.klass, "addAlias", VALUEFUNC(_wrap_XmlContainer_addAlias), -1);
  rb_define_method(cXmlContainer.klass, "removeAlias", VALUEFUNC(_wrap_XmlContainer_removeAlias), -1);
  rb_define_method(cXmlContainer.klass, "getManager", VALUEFUNC(_wrap_XmlContainer_getManager), -1);
  rb_define_alias(cXmlContainer.klass, "manager", "getManager");
  rb_define_method(cXmlContainer.klass, "getName", VALUEFUNC(_wrap_XmlContainer_getName), -1);
  rb_define_method(cXmlContainer.klass, "getContainerType", VALUEFUNC(_wrap_XmlContainer_getContainerType), -1);
  rb_define_method(cXmlContainer.klass, "getIndexNodes", VALUEFUNC(_wrap_XmlContainer_getIndexNodes), -1);
  rb_define_method(cXmlContainer.klass, "getPageSize", VALUEFUNC(_wrap_XmlContainer_getPageSize), -1);
  rb_define_method(cXmlContainer.klass, "setIndexSpecification", VALUEFUNC(_wrap_XmlContainer_setIndexSpecification), -1);
  rb_define_method(cXmlContainer.klass, "addIndex", VALUEFUNC(_wrap_XmlContainer_addIndex), -1);
  rb_define_method(cXmlContainer.klass, "deleteIndex", VALUEFUNC(_wrap_XmlContainer_deleteIndex), -1);
  rb_define_method(cXmlContainer.klass, "replaceIndex", VALUEFUNC(_wrap_XmlContainer_replaceIndex), -1);
  rb_define_method(cXmlContainer.klass, "addDefaultIndex", VALUEFUNC(_wrap_XmlContainer_addDefaultIndex), -1);
  rb_define_method(cXmlContainer.klass, "deleteDefaultIndex", VALUEFUNC(_wrap_XmlContainer_deleteDefaultIndex), -1);
  rb_define_method(cXmlContainer.klass, "replaceDefaultIndex", VALUEFUNC(_wrap_XmlContainer_replaceDefaultIndex), -1);
  rb_define_method(cXmlContainer.klass, "putDocument", VALUEFUNC(_wrap_XmlContainer_putDocument), -1);
  rb_define_method(cXmlContainer.klass, "putDocumentAsEventWriter", VALUEFUNC(_wrap_XmlContainer_putDocumentAsEventWriter), -1);
  rb_define_method(cXmlContainer.klass, "deleteDocument", VALUEFUNC(_wrap_XmlContainer_deleteDocument), -1);
  rb_define_method(cXmlContainer.klass, "updateDocument", VALUEFUNC(_wrap_XmlContainer_updateDocument), -1);
  rb_define_method(cXmlContainer.klass, "getNumDocuments", VALUEFUNC(_wrap_XmlContainer_getNumDocuments), -1);
  rb_define_method(cXmlContainer.klass, "getIndexSpecification", VALUEFUNC(_wrap_XmlContainer_getIndexSpecification), -1);
  rb_define_method(cXmlContainer.klass, "getDocument", VALUEFUNC(_wrap_XmlContainer_getDocument), -1);
  rb_define_method(cXmlContainer.klass, "getNode", VALUEFUNC(_wrap_XmlContainer_getNode), -1);
  rb_define_method(cXmlContainer.klass, "getAllDocuments", VALUEFUNC(_wrap_XmlContainer_getAllDocuments), -1);
  rb_define_method(cXmlContainer.klass, "lookupIndex", VALUEFUNC(_wrap_XmlContainer_lookupIndex), -1);
  rb_define_method(cXmlContainer.klass, "lookupStatistics", VALUEFUNC(_wrap_XmlContainer_lookupStatistics), -1);
  cXmlContainer.mark = 0;
  cXmlContainer.destroy = (void (*)(void *)) free_XmlContainer;
  cXmlContainer.trackObjects = 0;

  cXmlDocument.klass = rb_define_class_under(mDbxml, "XmlDocument", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_XmlDocument, (void *) &cXmlDocument);
  rb_define_alloc_func(cXmlDocument.klass, _wrap_XmlDocument_allocate);
  rb_define_method(cXmlDocument.klass, "initialize", VALUEFUNC(_wrap_new_XmlDocument), -1);
  rb_define_method(cXmlDocument.klass, "setName", VALUEFUNC(_wrap_XmlDocument_setName), -1);
  rb_define_alias(cXmlDocument.klass, "name=", "setName");
  rb_define_method(cXmlDocument.klass, "getName", VALUEFUNC(_wrap_XmlDocument_getName), -1);
  rb_define_alias(cXmlDocument.klass, "name", "getName");
  rb_define_method(cXmlDocument.klass, "setContent", VALUEFUNC(_wrap_XmlDocument_setContent), -1);
  rb_define_alias(cXmlDocument.klass, "content=", "setContent");
  rb_define_method(cXmlDocument.klass, "getContentAsXmlInputStream", VALUEFUNC(_wrap_XmlDocument_getContentAsXmlInputStream), -1);
  rb_define_method(cXmlDocument.klass, "setContentAsXmlInputStream", VALUEFUNC(_wrap_XmlDocument_setContentAsXmlInputStream), -1);
  rb_define_method(cXmlDocument.klass, "getContentAsEventReader", VALUEFUNC(_wrap_XmlDocument_getContentAsEventReader), -1);
  rb_define_method(cXmlDocument.klass, "setContentAsEventReader", VALUEFUNC(_wrap_XmlDocument_setContentAsEventReader), -1);
  rb_define_method(cXmlDocument.klass, "getContentAsEventWriter", VALUEFUNC(_wrap_XmlDocument_getContentAsEventWriter), -1);
  rb_define_method(cXmlDocument.klass, "fetchAllData", VALUEFUNC(_wrap_XmlDocument_fetchAllData), -1);
  rb_define_method(cXmlDocument.klass, "removeMetaData", VALUEFUNC(_wrap_XmlDocument_removeMetaData), -1);
  rb_define_method(cXmlDocument.klass, "setMetaData", VALUEFUNC(_wrap_XmlDocument_setMetaData), -1);
  rb_define_method(cXmlDocument.klass, "getContentAsString", VALUEFUNC(_wrap_XmlDocument_getContentAsString), -1);
  rb_define_alias(cXmlDocument.klass, "to_s", "getContentAsString");
  rb_define_method(cXmlDocument.klass, "getContent", VALUEFUNC(_wrap_XmlDocument_getContent), -1);
  rb_define_alias(cXmlDocument.klass, "content", "getContent");
  rb_define_method(cXmlDocument.klass, "getMetaData", VALUEFUNC(_wrap_XmlDocument_getMetaData), -1);
  rb_define_method(cXmlDocument.klass, "getMetaDataIterator", VALUEFUNC(_wrap_XmlDocument_getMetaDataIterator), -1);
  rb_define_method(cXmlDocument.klass, "equals", VALUEFUNC(_wrap_XmlDocument_equals), -1);
  cXmlDocument.mark = 0;
  cXmlDocument.destroy = (void (*)(void *)) free_XmlDocument;
  cXmlDocument.trackObjects = 0;

  cXmlMetaDataIterator.klass = rb_define_class_under(mDbxml, "XmlMetaDataIterator", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_XmlMetaDataIterator, (void *) &cXmlMetaDataIterator);
  rb_define_alloc_func(cXmlMetaDataIterator.klass, _wrap_XmlMetaDataIterator_allocate);
  rb_define_method(cXmlMetaDataIterator.klass, "initialize", VALUEFUNC(_wrap_new_XmlMetaDataIterator), -1);
  rb_define_method(cXmlMetaDataIterator.klass, "reset", VALUEFUNC(_wrap_XmlMetaDataIterator_reset), -1);
  rb_define_method(cXmlMetaDataIterator.klass, "next", VALUEFUNC(_wrap_XmlMetaDataIterator_next), -1);
  cXmlMetaDataIterator.mark = 0;
  cXmlMetaDataIterator.destroy = (void (*)(void *)) free_XmlMetaDataIterator;
  cXmlMetaDataIterator.trackObjects = 0;

  cXmlMetaData.klass = rb_define_class_under(mDbxml, "XmlMetaData", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_XmlMetaData, (void *) &cXmlMetaData);
  rb_define_alloc_func(cXmlMetaData.klass, _wrap_XmlMetaData_allocate);
  rb_define_method(cXmlMetaData.klass, "initialize", VALUEFUNC(_wrap_new_XmlMetaData), -1);
  rb_define_method(cXmlMetaData.klass, "get_uri", VALUEFUNC(_wrap_XmlMetaData_get_uri), -1);
  rb_define_method(cXmlMetaData.klass, "get_name", VALUEFUNC(_wrap_XmlMetaData_get_name), -1);
  rb_define_method(cXmlMetaData.klass, "get_value", VALUEFUNC(_wrap_XmlMetaData_get_value), -1);
  cXmlMetaData.mark = 0;
  cXmlMetaData.destroy = (void (*)(void *)) free_XmlMetaData;
  cXmlMetaData.trackObjects = 0;

  cXmlQueryContext.klass = rb_define_class_under(mDbxml, "XmlQueryContext", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_XmlQueryContext, (void *) &cXmlQueryContext);
  rb_define_alloc_func(cXmlQueryContext.klass, _wrap_XmlQueryContext_allocate);
  rb_define_method(cXmlQueryContext.klass, "initialize", VALUEFUNC(_wrap_new_XmlQueryContext), -1);
  rb_define_const(cXmlQueryContext.klass, "DeadValues", SWIG_From_int(static_cast< int >(XmlQueryContext::DeadValues)));
  rb_define_const(cXmlQueryContext.klass, "LiveValues", SWIG_From_int(static_cast< int >(XmlQueryContext::LiveValues)));
  rb_define_const(cXmlQueryContext.klass, "Eager", SWIG_From_int(static_cast< int >(XmlQueryContext::Eager)));
  rb_define_const(cXmlQueryContext.klass, "Lazy", SWIG_From_int(static_cast< int >(XmlQueryContext::Lazy)));
  rb_define_method(cXmlQueryContext.klass, "setNamespace", VALUEFUNC(_wrap_XmlQueryContext_setNamespace), -1);
  rb_define_alias(cXmlQueryContext.klass, "namespace=", "setNamespace");
  rb_define_method(cXmlQueryContext.klass, "getNamespace", VALUEFUNC(_wrap_XmlQueryContext_getNamespace), -1);
  rb_define_alias(cXmlQueryContext.klass, "namespace", "getNamespace");
  rb_define_method(cXmlQueryContext.klass, "removeNamespace", VALUEFUNC(_wrap_XmlQueryContext_removeNamespace), -1);
  rb_define_method(cXmlQueryContext.klass, "clearNamespaces", VALUEFUNC(_wrap_XmlQueryContext_clearNamespaces), -1);
  rb_define_method(cXmlQueryContext.klass, "setVariableValue", VALUEFUNC(_wrap_XmlQueryContext_setVariableValue), -1);
  rb_define_method(cXmlQueryContext.klass, "setBaseURI", VALUEFUNC(_wrap_XmlQueryContext_setBaseURI), -1);
  rb_define_method(cXmlQueryContext.klass, "getBaseURI", VALUEFUNC(_wrap_XmlQueryContext_getBaseURI), -1);
  rb_define_method(cXmlQueryContext.klass, "setReturnType", VALUEFUNC(_wrap_XmlQueryContext_setReturnType), -1);
  rb_define_method(cXmlQueryContext.klass, "getReturnType", VALUEFUNC(_wrap_XmlQueryContext_getReturnType), -1);
  rb_define_method(cXmlQueryContext.klass, "setEvaluationType", VALUEFUNC(_wrap_XmlQueryContext_setEvaluationType), -1);
  rb_define_method(cXmlQueryContext.klass, "getEvaluationType", VALUEFUNC(_wrap_XmlQueryContext_getEvaluationType), -1);
  rb_define_method(cXmlQueryContext.klass, "setDefaultCollection", VALUEFUNC(_wrap_XmlQueryContext_setDefaultCollection), -1);
  rb_define_alias(cXmlQueryContext.klass, "collection=", "setDefaultCollection");
  rb_define_method(cXmlQueryContext.klass, "getDefaultCollection", VALUEFUNC(_wrap_XmlQueryContext_getDefaultCollection), -1);
  rb_define_alias(cXmlQueryContext.klass, "collection", "getDefaultCollection");
  rb_define_method(cXmlQueryContext.klass, "interruptQuery", VALUEFUNC(_wrap_XmlQueryContext_interruptQuery), -1);
  rb_define_method(cXmlQueryContext.klass, "setQueryTimeoutSeconds", VALUEFUNC(_wrap_XmlQueryContext_setQueryTimeoutSeconds), -1);
  rb_define_method(cXmlQueryContext.klass, "getQueryTimeoutSeconds", VALUEFUNC(_wrap_XmlQueryContext_getQueryTimeoutSeconds), -1);
  rb_define_method(cXmlQueryContext.klass, "getVariableValue", VALUEFUNC(_wrap_XmlQueryContext_getVariableValue), -1);
  rb_define_method(cXmlQueryContext.klass, "getVariableValues", VALUEFUNC(_wrap_XmlQueryContext_getVariableValues), -1);
  cXmlQueryContext.mark = 0;
  cXmlQueryContext.destroy = (void (*)(void *)) free_XmlQueryContext;
  cXmlQueryContext.trackObjects = 0;

  cXmlResults.klass = rb_define_class_under(mDbxml, "XmlResults", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_XmlResults, (void *) &cXmlResults);
  rb_define_alloc_func(cXmlResults.klass, _wrap_XmlResults_allocate);
  rb_define_method(cXmlResults.klass, "initialize", VALUEFUNC(_wrap_new_XmlResults), -1);
  rb_define_method(cXmlResults.klass, "hasNext", VALUEFUNC(_wrap_XmlResults_hasNext), -1);
  rb_define_method(cXmlResults.klass, "hasPrevious", VALUEFUNC(_wrap_XmlResults_hasPrevious), -1);
  rb_define_method(cXmlResults.klass, "getEvaluationType", VALUEFUNC(_wrap_XmlResults_getEvaluationType), -1);
  rb_define_method(cXmlResults.klass, "next", VALUEFUNC(_wrap_XmlResults_next), -1);
  rb_define_method(cXmlResults.klass, "previous", VALUEFUNC(_wrap_XmlResults_previous), -1);
  rb_define_method(cXmlResults.klass, "peek", VALUEFUNC(_wrap_XmlResults_peek), -1);
  rb_define_method(cXmlResults.klass, "reset", VALUEFUNC(_wrap_XmlResults_reset), -1);
  rb_define_method(cXmlResults.klass, "size", VALUEFUNC(_wrap_XmlResults_size), -1);
  rb_define_method(cXmlResults.klass, "add", VALUEFUNC(_wrap_XmlResults_add), -1);
  cXmlResults.mark = 0;
  cXmlResults.destroy = (void (*)(void *)) free_XmlResults;
  cXmlResults.trackObjects = 0;

  cXmlUpdateContext.klass = rb_define_class_under(mDbxml, "XmlUpdateContext", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_XmlUpdateContext, (void *) &cXmlUpdateContext);
  rb_define_alloc_func(cXmlUpdateContext.klass, _wrap_XmlUpdateContext_allocate);
  rb_define_method(cXmlUpdateContext.klass, "initialize", VALUEFUNC(_wrap_new_XmlUpdateContext), -1);
  rb_define_method(cXmlUpdateContext.klass, "setApplyChangesToContainers", VALUEFUNC(_wrap_XmlUpdateContext_setApplyChangesToContainers), -1);
  rb_define_method(cXmlUpdateContext.klass, "getApplyChangesToContainers", VALUEFUNC(_wrap_XmlUpdateContext_getApplyChangesToContainers), -1);
  cXmlUpdateContext.mark = 0;
  cXmlUpdateContext.destroy = (void (*)(void *)) free_XmlUpdateContext;
  cXmlUpdateContext.trackObjects = 0;

  cXmlValue.klass = rb_define_class_under(mDbxml, "XmlValue", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_XmlValue, (void *) &cXmlValue);
  rb_define_alloc_func(cXmlValue.klass, _wrap_XmlValue_allocate);
  rb_define_method(cXmlValue.klass, "initialize", VALUEFUNC(_wrap_new_XmlValue), -1);
  rb_define_const(cXmlValue.klass, "ELEMENT_NODE", SWIG_From_int(static_cast< int >(XmlValue::ELEMENT_NODE)));
  rb_define_const(cXmlValue.klass, "ATTRIBUTE_NODE", SWIG_From_int(static_cast< int >(XmlValue::ATTRIBUTE_NODE)));
  rb_define_const(cXmlValue.klass, "TEXT_NODE", SWIG_From_int(static_cast< int >(XmlValue::TEXT_NODE)));
  rb_define_const(cXmlValue.klass, "CDATA_SECTION_NODE", SWIG_From_int(static_cast< int >(XmlValue::CDATA_SECTION_NODE)));
  rb_define_const(cXmlValue.klass, "ENTITY_REFERENCE_NODE", SWIG_From_int(static_cast< int >(XmlValue::ENTITY_REFERENCE_NODE)));
  rb_define_const(cXmlValue.klass, "ENTITY_NODE", SWIG_From_int(static_cast< int >(XmlValue::ENTITY_NODE)));
  rb_define_const(cXmlValue.klass, "PROCESSING_INSTRUCTION_NODE", SWIG_From_int(static_cast< int >(XmlValue::PROCESSING_INSTRUCTION_NODE)));
  rb_define_const(cXmlValue.klass, "COMMENT_NODE", SWIG_From_int(static_cast< int >(XmlValue::COMMENT_NODE)));
  rb_define_const(cXmlValue.klass, "DOCUMENT_NODE", SWIG_From_int(static_cast< int >(XmlValue::DOCUMENT_NODE)));
  rb_define_const(cXmlValue.klass, "DOCUMENT_TYPE_NODE", SWIG_From_int(static_cast< int >(XmlValue::DOCUMENT_TYPE_NODE)));
  rb_define_const(cXmlValue.klass, "DOCUMENT_FRAGMENT_NODE", SWIG_From_int(static_cast< int >(XmlValue::DOCUMENT_FRAGMENT_NODE)));
  rb_define_const(cXmlValue.klass, "NOTATION_NODE", SWIG_From_int(static_cast< int >(XmlValue::NOTATION_NODE)));
  rb_define_const(cXmlValue.klass, "NONE", SWIG_From_int(static_cast< int >(XmlValue::NONE)));
  rb_define_const(cXmlValue.klass, "NODE", SWIG_From_int(static_cast< int >(XmlValue::NODE)));
  rb_define_const(cXmlValue.klass, "ANY_SIMPLE_TYPE", SWIG_From_int(static_cast< int >(XmlValue::ANY_SIMPLE_TYPE)));
  rb_define_const(cXmlValue.klass, "ANY_URI", SWIG_From_int(static_cast< int >(XmlValue::ANY_URI)));
  rb_define_const(cXmlValue.klass, "BASE_64_BINARY", SWIG_From_int(static_cast< int >(XmlValue::BASE_64_BINARY)));
  rb_define_const(cXmlValue.klass, "BOOLEAN", SWIG_From_int(static_cast< int >(XmlValue::BOOLEAN)));
  rb_define_const(cXmlValue.klass, "DATE", SWIG_From_int(static_cast< int >(XmlValue::DATE)));
  rb_define_const(cXmlValue.klass, "DATE_TIME", SWIG_From_int(static_cast< int >(XmlValue::DATE_TIME)));
  rb_define_const(cXmlValue.klass, "DAY_TIME_DURATION", SWIG_From_int(static_cast< int >(XmlValue::DAY_TIME_DURATION)));
  rb_define_const(cXmlValue.klass, "DECIMAL", SWIG_From_int(static_cast< int >(XmlValue::DECIMAL)));
  rb_define_const(cXmlValue.klass, "DOUBLE", SWIG_From_int(static_cast< int >(XmlValue::DOUBLE)));
  rb_define_const(cXmlValue.klass, "DURATION", SWIG_From_int(static_cast< int >(XmlValue::DURATION)));
  rb_define_const(cXmlValue.klass, "FLOAT", SWIG_From_int(static_cast< int >(XmlValue::FLOAT)));
  rb_define_const(cXmlValue.klass, "G_DAY", SWIG_From_int(static_cast< int >(XmlValue::G_DAY)));
  rb_define_const(cXmlValue.klass, "G_MONTH", SWIG_From_int(static_cast< int >(XmlValue::G_MONTH)));
  rb_define_const(cXmlValue.klass, "G_MONTH_DAY", SWIG_From_int(static_cast< int >(XmlValue::G_MONTH_DAY)));
  rb_define_const(cXmlValue.klass, "G_YEAR", SWIG_From_int(static_cast< int >(XmlValue::G_YEAR)));
  rb_define_const(cXmlValue.klass, "G_YEAR_MONTH", SWIG_From_int(static_cast< int >(XmlValue::G_YEAR_MONTH)));
  rb_define_const(cXmlValue.klass, "HEX_BINARY", SWIG_From_int(static_cast< int >(XmlValue::HEX_BINARY)));
  rb_define_const(cXmlValue.klass, "NOTATION", SWIG_From_int(static_cast< int >(XmlValue::NOTATION)));
  rb_define_const(cXmlValue.klass, "QNAME", SWIG_From_int(static_cast< int >(XmlValue::QNAME)));
  rb_define_const(cXmlValue.klass, "STRING", SWIG_From_int(static_cast< int >(XmlValue::STRING)));
  rb_define_const(cXmlValue.klass, "TIME", SWIG_From_int(static_cast< int >(XmlValue::TIME)));
  rb_define_const(cXmlValue.klass, "YEAR_MONTH_DURATION", SWIG_From_int(static_cast< int >(XmlValue::YEAR_MONTH_DURATION)));
  rb_define_const(cXmlValue.klass, "UNTYPED_ATOMIC", SWIG_From_int(static_cast< int >(XmlValue::UNTYPED_ATOMIC)));
  rb_define_const(cXmlValue.klass, "BINARY", SWIG_From_int(static_cast< int >(XmlValue::BINARY)));
  rb_define_method(cXmlValue.klass, "getType", VALUEFUNC(_wrap_XmlValue_getType), -1);
  rb_define_method(cXmlValue.klass, "getTypeURI", VALUEFUNC(_wrap_XmlValue_getTypeURI), -1);
  rb_define_method(cXmlValue.klass, "getTypeName", VALUEFUNC(_wrap_XmlValue_getTypeName), -1);
  rb_define_method(cXmlValue.klass, "isNull", VALUEFUNC(_wrap_XmlValue_isNull), -1);
  rb_define_method(cXmlValue.klass, "isType", VALUEFUNC(_wrap_XmlValue_isType), -1);
  rb_define_method(cXmlValue.klass, "isNumber", VALUEFUNC(_wrap_XmlValue_isNumber), -1);
  rb_define_method(cXmlValue.klass, "isString", VALUEFUNC(_wrap_XmlValue_isString), -1);
  rb_define_method(cXmlValue.klass, "isBoolean", VALUEFUNC(_wrap_XmlValue_isBoolean), -1);
  rb_define_method(cXmlValue.klass, "isBinary", VALUEFUNC(_wrap_XmlValue_isBinary), -1);
  rb_define_method(cXmlValue.klass, "isNode", VALUEFUNC(_wrap_XmlValue_isNode), -1);
  rb_define_method(cXmlValue.klass, "asNumber", VALUEFUNC(_wrap_XmlValue_asNumber), -1);
  rb_define_alias(cXmlValue.klass, "to_f", "asNumber");
  rb_define_method(cXmlValue.klass, "asString", VALUEFUNC(_wrap_XmlValue_asString), -1);
  rb_define_alias(cXmlValue.klass, "to_s", "asString");
  rb_define_method(cXmlValue.klass, "asBoolean", VALUEFUNC(_wrap_XmlValue_asBoolean), -1);
  rb_define_method(cXmlValue.klass, "asBinary", VALUEFUNC(_wrap_XmlValue_asBinary), -1);
  rb_define_method(cXmlValue.klass, "asDocument", VALUEFUNC(_wrap_XmlValue_asDocument), -1);
  rb_define_alias(cXmlValue.klass, "to_doc", "asDocument");
  rb_define_method(cXmlValue.klass, "asEventReader", VALUEFUNC(_wrap_XmlValue_asEventReader), -1);
  rb_define_method(cXmlValue.klass, "getNodeHandle", VALUEFUNC(_wrap_XmlValue_getNodeHandle), -1);
  rb_define_method(cXmlValue.klass, "equals", VALUEFUNC(_wrap_XmlValue_equals), -1);
  rb_define_method(cXmlValue.klass, "getNodeName", VALUEFUNC(_wrap_XmlValue_getNodeName), -1);
  rb_define_method(cXmlValue.klass, "getNodeValue", VALUEFUNC(_wrap_XmlValue_getNodeValue), -1);
  rb_define_method(cXmlValue.klass, "getNamespaceURI", VALUEFUNC(_wrap_XmlValue_getNamespaceURI), -1);
  rb_define_method(cXmlValue.klass, "getPrefix", VALUEFUNC(_wrap_XmlValue_getPrefix), -1);
  rb_define_method(cXmlValue.klass, "getLocalName", VALUEFUNC(_wrap_XmlValue_getLocalName), -1);
  rb_define_method(cXmlValue.klass, "getNodeType", VALUEFUNC(_wrap_XmlValue_getNodeType), -1);
  rb_define_method(cXmlValue.klass, "getParentNode", VALUEFUNC(_wrap_XmlValue_getParentNode), -1);
  rb_define_method(cXmlValue.klass, "getFirstChild", VALUEFUNC(_wrap_XmlValue_getFirstChild), -1);
  rb_define_method(cXmlValue.klass, "getLastChild", VALUEFUNC(_wrap_XmlValue_getLastChild), -1);
  rb_define_method(cXmlValue.klass, "getPreviousSibling", VALUEFUNC(_wrap_XmlValue_getPreviousSibling), -1);
  rb_define_method(cXmlValue.klass, "getNextSibling", VALUEFUNC(_wrap_XmlValue_getNextSibling), -1);
  rb_define_method(cXmlValue.klass, "getAttributes", VALUEFUNC(_wrap_XmlValue_getAttributes), -1);
  rb_define_method(cXmlValue.klass, "getOwnerElement", VALUEFUNC(_wrap_XmlValue_getOwnerElement), -1);
  rb_define_singleton_method(cXmlValue.klass, "setValue", VALUEFUNC(_wrap_XmlValue_setValue), -1);
  cXmlValue.mark = 0;
  cXmlValue.destroy = (void (*)(void *)) free_XmlValue;
  cXmlValue.trackObjects = 0;

  cXmlIndexSpecification.klass = rb_define_class_under(mDbxml, "XmlIndexSpecification", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_XmlIndexSpecification, (void *) &cXmlIndexSpecification);
  rb_define_alloc_func(cXmlIndexSpecification.klass, _wrap_XmlIndexSpecification_allocate);
  rb_define_method(cXmlIndexSpecification.klass, "initialize", VALUEFUNC(_wrap_new_XmlIndexSpecification), -1);
  rb_define_const(cXmlIndexSpecification.klass, "UNIQUE_OFF", SWIG_From_int(static_cast< int >(XmlIndexSpecification::UNIQUE_OFF)));
  rb_define_const(cXmlIndexSpecification.klass, "UNIQUE_ON", SWIG_From_int(static_cast< int >(XmlIndexSpecification::UNIQUE_ON)));
  rb_define_const(cXmlIndexSpecification.klass, "PATH_NONE", SWIG_From_int(static_cast< int >(XmlIndexSpecification::PATH_NONE)));
  rb_define_const(cXmlIndexSpecification.klass, "PATH_NODE", SWIG_From_int(static_cast< int >(XmlIndexSpecification::PATH_NODE)));
  rb_define_const(cXmlIndexSpecification.klass, "PATH_EDGE", SWIG_From_int(static_cast< int >(XmlIndexSpecification::PATH_EDGE)));
  rb_define_const(cXmlIndexSpecification.klass, "NODE_NONE", SWIG_From_int(static_cast< int >(XmlIndexSpecification::NODE_NONE)));
  rb_define_const(cXmlIndexSpecification.klass, "NODE_ELEMENT", SWIG_From_int(static_cast< int >(XmlIndexSpecification::NODE_ELEMENT)));
  rb_define_const(cXmlIndexSpecification.klass, "NODE_ATTRIBUTE", SWIG_From_int(static_cast< int >(XmlIndexSpecification::NODE_ATTRIBUTE)));
  rb_define_const(cXmlIndexSpecification.klass, "NODE_METADATA", SWIG_From_int(static_cast< int >(XmlIndexSpecification::NODE_METADATA)));
  rb_define_const(cXmlIndexSpecification.klass, "KEY_NONE", SWIG_From_int(static_cast< int >(XmlIndexSpecification::KEY_NONE)));
  rb_define_const(cXmlIndexSpecification.klass, "KEY_PRESENCE", SWIG_From_int(static_cast< int >(XmlIndexSpecification::KEY_PRESENCE)));
  rb_define_const(cXmlIndexSpecification.klass, "KEY_EQUALITY", SWIG_From_int(static_cast< int >(XmlIndexSpecification::KEY_EQUALITY)));
  rb_define_const(cXmlIndexSpecification.klass, "KEY_SUBSTRING", SWIG_From_int(static_cast< int >(XmlIndexSpecification::KEY_SUBSTRING)));
  rb_define_method(cXmlIndexSpecification.klass, "addIndex", VALUEFUNC(_wrap_XmlIndexSpecification_addIndex), -1);
  rb_define_method(cXmlIndexSpecification.klass, "deleteIndex", VALUEFUNC(_wrap_XmlIndexSpecification_deleteIndex), -1);
  rb_define_method(cXmlIndexSpecification.klass, "replaceIndex", VALUEFUNC(_wrap_XmlIndexSpecification_replaceIndex), -1);
  rb_define_method(cXmlIndexSpecification.klass, "addDefaultIndex", VALUEFUNC(_wrap_XmlIndexSpecification_addDefaultIndex), -1);
  rb_define_method(cXmlIndexSpecification.klass, "deleteDefaultIndex", VALUEFUNC(_wrap_XmlIndexSpecification_deleteDefaultIndex), -1);
  rb_define_method(cXmlIndexSpecification.klass, "replaceDefaultIndex", VALUEFUNC(_wrap_XmlIndexSpecification_replaceDefaultIndex), -1);
  rb_define_method(cXmlIndexSpecification.klass, "reset", VALUEFUNC(_wrap_XmlIndexSpecification_reset), -1);
  rb_define_method(cXmlIndexSpecification.klass, "find", VALUEFUNC(_wrap_XmlIndexSpecification_find), -1);
  rb_define_method(cXmlIndexSpecification.klass, "next", VALUEFUNC(_wrap_XmlIndexSpecification_next), -1);
  rb_define_method(cXmlIndexSpecification.klass, "getDefaultIndex", VALUEFUNC(_wrap_XmlIndexSpecification_getDefaultIndex), -1);
  rb_define_singleton_method(cXmlIndexSpecification.klass, "getValueType", VALUEFUNC(_wrap_XmlIndexSpecification_getValueType), -1);
  cXmlIndexSpecification.mark = 0;
  cXmlIndexSpecification.destroy = (void (*)(void *)) free_XmlIndexSpecification;
  cXmlIndexSpecification.trackObjects = 0;

  cXmlIndexDeclaration.klass = rb_define_class_under(mDbxml, "XmlIndexDeclaration", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_XmlIndexDeclaration, (void *) &cXmlIndexDeclaration);
  rb_define_alloc_func(cXmlIndexDeclaration.klass, _wrap_XmlIndexDeclaration_allocate);
  rb_define_method(cXmlIndexDeclaration.klass, "initialize", VALUEFUNC(_wrap_new_XmlIndexDeclaration), -1);
  rb_define_method(cXmlIndexDeclaration.klass, "get_uri", VALUEFUNC(_wrap_XmlIndexDeclaration_get_uri), -1);
  rb_define_method(cXmlIndexDeclaration.klass, "get_name", VALUEFUNC(_wrap_XmlIndexDeclaration_get_name), -1);
  rb_define_method(cXmlIndexDeclaration.klass, "get_index", VALUEFUNC(_wrap_XmlIndexDeclaration_get_index), -1);
  cXmlIndexDeclaration.mark = 0;
  cXmlIndexDeclaration.destroy = (void (*)(void *)) free_XmlIndexDeclaration;
  cXmlIndexDeclaration.trackObjects = 0;

  cXmlQueryExpression.klass = rb_define_class_under(mDbxml, "XmlQueryExpression", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_XmlQueryExpression, (void *) &cXmlQueryExpression);
  rb_define_alloc_func(cXmlQueryExpression.klass, _wrap_XmlQueryExpression_allocate);
  rb_define_method(cXmlQueryExpression.klass, "initialize", VALUEFUNC(_wrap_new_XmlQueryExpression), -1);
  rb_define_method(cXmlQueryExpression.klass, "getQuery", VALUEFUNC(_wrap_XmlQueryExpression_getQuery), -1);
  rb_define_method(cXmlQueryExpression.klass, "getQueryPlan", VALUEFUNC(_wrap_XmlQueryExpression_getQueryPlan), -1);
  rb_define_method(cXmlQueryExpression.klass, "execute", VALUEFUNC(_wrap_XmlQueryExpression_execute), -1);
  cXmlQueryExpression.mark = 0;
  cXmlQueryExpression.destroy = (void (*)(void *)) free_XmlQueryExpression;
  cXmlQueryExpression.trackObjects = 0;

  cXmlInputStream.klass = rb_define_class_under(mDbxml, "XmlInputStream", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_XmlInputStream, (void *) &cXmlInputStream);
  rb_undef_alloc_func(cXmlInputStream.klass);
  rb_define_method(cXmlInputStream.klass, "curPos", VALUEFUNC(_wrap_XmlInputStream_curPos), -1);
  rb_define_method(cXmlInputStream.klass, "readBytes", VALUEFUNC(_wrap_XmlInputStream_readBytes), -1);
  rb_define_method(cXmlInputStream.klass, "freeMemory", VALUEFUNC(_wrap_XmlInputStream_freeMemory), -1);
  cXmlInputStream.mark = 0;
  cXmlInputStream.destroy = (void (*)(void *)) free_XmlInputStream;
  cXmlInputStream.trackObjects = 0;

  cXmlModify.klass = rb_define_class_under(mDbxml, "XmlModify", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_XmlModify, (void *) &cXmlModify);
  rb_define_alloc_func(cXmlModify.klass, _wrap_XmlModify_allocate);
  rb_define_method(cXmlModify.klass, "initialize", VALUEFUNC(_wrap_new_XmlModify), -1);
  rb_define_const(cXmlModify.klass, "Element", SWIG_From_int(static_cast< int >(XmlModify::Element)));
  rb_define_const(cXmlModify.klass, "Attribute", SWIG_From_int(static_cast< int >(XmlModify::Attribute)));
  rb_define_const(cXmlModify.klass, "Text", SWIG_From_int(static_cast< int >(XmlModify::Text)));
  rb_define_const(cXmlModify.klass, "ProcessingInstruction", SWIG_From_int(static_cast< int >(XmlModify::ProcessingInstruction)));
  rb_define_const(cXmlModify.klass, "Comment", SWIG_From_int(static_cast< int >(XmlModify::Comment)));
  rb_define_method(cXmlModify.klass, "addInsertBeforeStep", VALUEFUNC(_wrap_XmlModify_addInsertBeforeStep), -1);
  rb_define_method(cXmlModify.klass, "addInsertAfterStep", VALUEFUNC(_wrap_XmlModify_addInsertAfterStep), -1);
  rb_define_method(cXmlModify.klass, "addAppendStep", VALUEFUNC(_wrap_XmlModify_addAppendStep), -1);
  rb_define_method(cXmlModify.klass, "addUpdateStep", VALUEFUNC(_wrap_XmlModify_addUpdateStep), -1);
  rb_define_method(cXmlModify.klass, "addRemoveStep", VALUEFUNC(_wrap_XmlModify_addRemoveStep), -1);
  rb_define_method(cXmlModify.klass, "addRenameStep", VALUEFUNC(_wrap_XmlModify_addRenameStep), -1);
  rb_define_method(cXmlModify.klass, "setNewEncoding", VALUEFUNC(_wrap_XmlModify_setNewEncoding), -1);
  rb_define_method(cXmlModify.klass, "execute", VALUEFUNC(_wrap_XmlModify_execute), -1);
  cXmlModify.mark = 0;
  cXmlModify.destroy = (void (*)(void *)) free_XmlModify;
  cXmlModify.trackObjects = 0;

  cXmlTransaction.klass = rb_define_class_under(mDbxml, "XmlTransaction", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_XmlTransaction, (void *) &cXmlTransaction);
  rb_define_alloc_func(cXmlTransaction.klass, _wrap_XmlTransaction_allocate);
  rb_define_method(cXmlTransaction.klass, "initialize", VALUEFUNC(_wrap_new_XmlTransaction), -1);
  rb_define_method(cXmlTransaction.klass, "abort", VALUEFUNC(_wrap_XmlTransaction_abort), -1);
  rb_define_method(cXmlTransaction.klass, "createChild", VALUEFUNC(_wrap_XmlTransaction_createChild), -1);
  rb_define_method(cXmlTransaction.klass, "commit", VALUEFUNC(_wrap_XmlTransaction_commit), -1);
  rb_define_method(cXmlTransaction.klass, "getDbTxn", VALUEFUNC(_wrap_XmlTransaction_getDbTxn), -1);
  cXmlTransaction.mark = 0;
  cXmlTransaction.destroy = (void (*)(void *)) free_XmlTransaction;
  cXmlTransaction.trackObjects = 0;

  cXmlStatistics.klass = rb_define_class_under(mDbxml, "XmlStatistics", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_XmlStatistics, (void *) &cXmlStatistics);
  rb_define_alloc_func(cXmlStatistics.klass, _wrap_XmlStatistics_allocate);
  rb_define_method(cXmlStatistics.klass, "initialize", VALUEFUNC(_wrap_new_XmlStatistics), -1);
  rb_define_method(cXmlStatistics.klass, "getNumberOfIndexedKeys", VALUEFUNC(_wrap_XmlStatistics_getNumberOfIndexedKeys), -1);
  rb_define_method(cXmlStatistics.klass, "getNumberOfUniqueKeys", VALUEFUNC(_wrap_XmlStatistics_getNumberOfUniqueKeys), -1);
  rb_define_method(cXmlStatistics.klass, "getSumKeyValueSize", VALUEFUNC(_wrap_XmlStatistics_getSumKeyValueSize), -1);
  cXmlStatistics.mark = 0;
  cXmlStatistics.destroy = (void (*)(void *)) free_XmlStatistics;
  cXmlStatistics.trackObjects = 0;

  cXmlEventReader.klass = rb_define_class_under(mDbxml, "XmlEventReader", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_XmlEventReader, (void *) &cXmlEventReader);
  rb_define_alloc_func(cXmlEventReader.klass, _wrap_XmlEventReader_allocate);
  rb_define_method(cXmlEventReader.klass, "initialize", VALUEFUNC(_wrap_new_XmlEventReader), -1);
  rb_define_const(cXmlEventReader.klass, "StartElement", SWIG_From_int(static_cast< int >(XmlEventReader::StartElement)));
  rb_define_const(cXmlEventReader.klass, "EndElement", SWIG_From_int(static_cast< int >(XmlEventReader::EndElement)));
  rb_define_const(cXmlEventReader.klass, "Characters", SWIG_From_int(static_cast< int >(XmlEventReader::Characters)));
  rb_define_const(cXmlEventReader.klass, "CDATA", SWIG_From_int(static_cast< int >(XmlEventReader::CDATA)));
  rb_define_const(cXmlEventReader.klass, "Comment", SWIG_From_int(static_cast< int >(XmlEventReader::Comment)));
  rb_define_const(cXmlEventReader.klass, "Whitespace", SWIG_From_int(static_cast< int >(XmlEventReader::Whitespace)));
  rb_define_const(cXmlEventReader.klass, "StartDocument", SWIG_From_int(static_cast< int >(XmlEventReader::StartDocument)));
  rb_define_const(cXmlEventReader.klass, "EndDocument", SWIG_From_int(static_cast< int >(XmlEventReader::EndDocument)));
  rb_define_const(cXmlEventReader.klass, "StartEntityReference", SWIG_From_int(static_cast< int >(XmlEventReader::StartEntityReference)));
  rb_define_const(cXmlEventReader.klass, "EndEntityReference", SWIG_From_int(static_cast< int >(XmlEventReader::EndEntityReference)));
  rb_define_const(cXmlEventReader.klass, "ProcessingInstruction", SWIG_From_int(static_cast< int >(XmlEventReader::ProcessingInstruction)));
  rb_define_const(cXmlEventReader.klass, "DTD", SWIG_From_int(static_cast< int >(XmlEventReader::DTD)));
  rb_define_method(cXmlEventReader.klass, "close", VALUEFUNC(_wrap_XmlEventReader_close), -1);
  rb_define_method(cXmlEventReader.klass, "setReportEntityInfo", VALUEFUNC(_wrap_XmlEventReader_setReportEntityInfo), -1);
  rb_define_method(cXmlEventReader.klass, "getReportEntityInfo", VALUEFUNC(_wrap_XmlEventReader_getReportEntityInfo), -1);
  rb_define_method(cXmlEventReader.klass, "setExpandEntities", VALUEFUNC(_wrap_XmlEventReader_setExpandEntities), -1);
  rb_define_method(cXmlEventReader.klass, "getExpandEntities", VALUEFUNC(_wrap_XmlEventReader_getExpandEntities), -1);
  rb_define_method(cXmlEventReader.klass, "next", VALUEFUNC(_wrap_XmlEventReader_next), -1);
  rb_define_method(cXmlEventReader.klass, "nextTag", VALUEFUNC(_wrap_XmlEventReader_nextTag), -1);
  rb_define_method(cXmlEventReader.klass, "hasNext", VALUEFUNC(_wrap_XmlEventReader_hasNext), -1);
  rb_define_method(cXmlEventReader.klass, "getEventType", VALUEFUNC(_wrap_XmlEventReader_getEventType), -1);
  rb_define_method(cXmlEventReader.klass, "getNamespaceURI", VALUEFUNC(_wrap_XmlEventReader_getNamespaceURI), -1);
  rb_define_method(cXmlEventReader.klass, "getLocalName", VALUEFUNC(_wrap_XmlEventReader_getLocalName), -1);
  rb_define_method(cXmlEventReader.klass, "getPrefix", VALUEFUNC(_wrap_XmlEventReader_getPrefix), -1);
  rb_define_method(cXmlEventReader.klass, "getValue", VALUEFUNC(_wrap_XmlEventReader_getValue), -1);
  rb_define_method(cXmlEventReader.klass, "getValueLength", VALUEFUNC(_wrap_XmlEventReader_getValueLength), -1);
  rb_define_method(cXmlEventReader.klass, "getAttributeCount", VALUEFUNC(_wrap_XmlEventReader_getAttributeCount), -1);
  rb_define_method(cXmlEventReader.klass, "isAttributeSpecified", VALUEFUNC(_wrap_XmlEventReader_isAttributeSpecified), -1);
  rb_define_method(cXmlEventReader.klass, "getAttributeLocalName", VALUEFUNC(_wrap_XmlEventReader_getAttributeLocalName), -1);
  rb_define_method(cXmlEventReader.klass, "getAttributeNamespaceURI", VALUEFUNC(_wrap_XmlEventReader_getAttributeNamespaceURI), -1);
  rb_define_method(cXmlEventReader.klass, "getAttributePrefix", VALUEFUNC(_wrap_XmlEventReader_getAttributePrefix), -1);
  rb_define_method(cXmlEventReader.klass, "getAttributeValue", VALUEFUNC(_wrap_XmlEventReader_getAttributeValue), -1);
  rb_define_method(cXmlEventReader.klass, "getEncoding", VALUEFUNC(_wrap_XmlEventReader_getEncoding), -1);
  rb_define_method(cXmlEventReader.klass, "getVersion", VALUEFUNC(_wrap_XmlEventReader_getVersion), -1);
  rb_define_method(cXmlEventReader.klass, "getSystemId", VALUEFUNC(_wrap_XmlEventReader_getSystemId), -1);
  rb_define_method(cXmlEventReader.klass, "isStandalone", VALUEFUNC(_wrap_XmlEventReader_isStandalone), -1);
  rb_define_method(cXmlEventReader.klass, "standaloneSet", VALUEFUNC(_wrap_XmlEventReader_standaloneSet), -1);
  rb_define_method(cXmlEventReader.klass, "encodingSet", VALUEFUNC(_wrap_XmlEventReader_encodingSet), -1);
  rb_define_method(cXmlEventReader.klass, "hasEntityEscapeInfo", VALUEFUNC(_wrap_XmlEventReader_hasEntityEscapeInfo), -1);
  rb_define_method(cXmlEventReader.klass, "needsEntityEscape", VALUEFUNC(_wrap_XmlEventReader_needsEntityEscape), -1);
  rb_define_method(cXmlEventReader.klass, "hasEmptyElementInfo", VALUEFUNC(_wrap_XmlEventReader_hasEmptyElementInfo), -1);
  rb_define_method(cXmlEventReader.klass, "isEmptyElement", VALUEFUNC(_wrap_XmlEventReader_isEmptyElement), -1);
  rb_define_method(cXmlEventReader.klass, "isWhiteSpace", VALUEFUNC(_wrap_XmlEventReader_isWhiteSpace), -1);
  cXmlEventReader.mark = 0;
  cXmlEventReader.destroy = (void (*)(void *)) free_XmlEventReader;
  cXmlEventReader.trackObjects = 0;

  cXmlEventWriter.klass = rb_define_class_under(mDbxml, "XmlEventWriter", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_XmlEventWriter, (void *) &cXmlEventWriter);
  rb_define_alloc_func(cXmlEventWriter.klass, _wrap_XmlEventWriter_allocate);
  rb_define_method(cXmlEventWriter.klass, "initialize", VALUEFUNC(_wrap_new_XmlEventWriter), -1);
  rb_define_method(cXmlEventWriter.klass, "close", VALUEFUNC(_wrap_XmlEventWriter_close), -1);
  rb_define_method(cXmlEventWriter.klass, "writeAttribute", VALUEFUNC(_wrap_XmlEventWriter_writeAttribute), -1);
  rb_define_method(cXmlEventWriter.klass, "writeText", VALUEFUNC(_wrap_XmlEventWriter_writeText), -1);
  rb_define_method(cXmlEventWriter.klass, "writeProcessingInstruction", VALUEFUNC(_wrap_XmlEventWriter_writeProcessingInstruction), -1);
  rb_define_method(cXmlEventWriter.klass, "writeStartElement", VALUEFUNC(_wrap_XmlEventWriter_writeStartElement), -1);
  rb_define_method(cXmlEventWriter.klass, "writeEndElement", VALUEFUNC(_wrap_XmlEventWriter_writeEndElement), -1);
  rb_define_method(cXmlEventWriter.klass, "writeDTD", VALUEFUNC(_wrap_XmlEventWriter_writeDTD), -1);
  rb_define_method(cXmlEventWriter.klass, "writeStartDocument", VALUEFUNC(_wrap_XmlEventWriter_writeStartDocument), -1);
  rb_define_method(cXmlEventWriter.klass, "writeEndDocument", VALUEFUNC(_wrap_XmlEventWriter_writeEndDocument), -1);
  rb_define_method(cXmlEventWriter.klass, "writeStartEntity", VALUEFUNC(_wrap_XmlEventWriter_writeStartEntity), -1);
  rb_define_method(cXmlEventWriter.klass, "writeEndEntity", VALUEFUNC(_wrap_XmlEventWriter_writeEndEntity), -1);
  cXmlEventWriter.mark = 0;
  cXmlEventWriter.destroy = (void (*)(void *)) free_XmlEventWriter;
  cXmlEventWriter.trackObjects = 0;

  cXmlEventReaderToWriter.klass = rb_define_class_under(mDbxml, "XmlEventReaderToWriter", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_XmlEventReaderToWriter, (void *) &cXmlEventReaderToWriter);
  rb_define_alloc_func(cXmlEventReaderToWriter.klass, _wrap_XmlEventReaderToWriter_allocate);
  rb_define_method(cXmlEventReaderToWriter.klass, "initialize", VALUEFUNC(_wrap_new_XmlEventReaderToWriter), -1);
  rb_define_method(cXmlEventReaderToWriter.klass, "start", VALUEFUNC(_wrap_XmlEventReaderToWriter_start), -1);
  cXmlEventReaderToWriter.mark = 0;
  cXmlEventReaderToWriter.destroy = (void (*)(void *)) free_XmlEventReaderToWriter;
  cXmlEventReaderToWriter.trackObjects = 0;
}

